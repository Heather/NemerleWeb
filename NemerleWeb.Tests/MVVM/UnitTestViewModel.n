using NemerleWeb;
using Nemerle.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb.Tests
{
  [ViewModel]
  public class UnitTestViewModel
  {
    Results : List[(string * bool)] { get; set; }
    
    class SomeDisposable : IDisposable
    {
      public Dispose() : void
      {
        _ = "Do something";
      }
    }
    
    public this()
    {
      def test(description, res)
      {
        Results.Add((description, res()));
      }
      Results = [].ToList();
      
      test("simple", () =>
      {
        true
      });
      
      test("simple negative", () =>
      {
        !false
      });
      
      test("simple double negative", () =>
      {
        ! !true
      });
      
      test("simple triple negative", () =>
      {
        ! ! !false
      });
      
      test("if(true) p else f", () =>
      {
        if(true)
          true
        else
          false
      });
      
      test("if(false) f else p", () =>
      {
        if(false)
          false
        else
          true
      });
      
      test("ctor().field", () =>
      {
        _ = Dummy().DummyField;
        true
      });
      
      test("ctor().prop with if/else inside", () =>
      {
        _ = Dummy().DummyProp;
        true
      });
      
      test("tuple expansion def (a, b, c) = tuple", () =>
      {
        def tuple = ("Failed", true, 0);
        def (_a, b, _c) = tuple;
        b;
      });
      
      test("dummy.prop++", () =>
      {
        def d = Dummy();
        d.DummyInt++;
        
        d.DummyInt == 1
      });
      
      test("when", () =>
      {
        when(true)
          _ = ();
        
        true
      });
      
      test("for when", () =>
      {
        for(mutable i = 0; i != 1; i++)
          when(true)
            _ = ();
        
        true
      });
      
      test("for when variable", () =>
      {
        mutable res = false;
        
        for(mutable i = 0; i != 1; i++)
          when(true)
            res = true;
        
        res
      });
      
      test("neste if else", () =>
      {
        mutable i = 0;
        
        if(i == 0)
        {
          i++;
          
          if(i == 2)
            false
          else
            if(i == 1)
              true
            else
              false
        }
        else
          if(i != 10)
            false
          else
            true
      });
      
      test("list initialization", () =>
      {
        def l1 = List([1, 2, 3]);
        def l2 = [1, 2, 3].ToList();        
        def l3 = List() <- [1, 2, 3];
        
        mutable res = true;
                
        for(mutable i = 0; i < l1.Count; i++)
          when(l1[i] != l2[i] || l1[i] != l3[i])
            res = false;
            
        res
      });
      
      test("using", () =>
      {
        using (s = SomeDisposable())
        {
          _ = "Do something";
        }
        
        true
      });
      
      test("variant", () =>
      {
        def v = DummyVariant.Case3(false) : DummyVariant;
        match(v) {
        | Case1 => false
        | Case2 => false
        | Case3(val) => val == false
        }
      });
      
      // TODO: #11
      //test("linq where", () =>
      //{
      //  def l = [1, 2, 3, 4, 5, 6].ToList();
      //  def r = l.Where(x => x > 4);
        
      //  mutable res = true;
      //  mutable i = 0;
      //  using (e = r.GetEnumerator())
      //  {
      //    while (e.MoveNext())
      //    {
      //      when (e.Current != i + 1)
      //        res = false;
      //    }
      //  }
        
      //  res
      //});
      
      //test("linq select", () =>
      //{
      //  "Passed"
      //});
    }
    
    [Html]
    public View() : string
    {
      <#
        <table class="jsast-tests">
          <tbody>
            <tr $foreach(r in Results) css-failed='$(r[1] == false)'>
              <td>$(r[0])</td>
              <td>$(r[1])</td>
            </tr>
          </tbody>
        </table>
      #>
    }
    
    class Dummy 
    {
      public DummyInt : int { get; set; }
      public mutable DummyField : string = "Passed"; 
      public DummyProp : string
      {
        get
        {
          if(true)
            "Passed"
          else 
            "Failed"
        }
      }
    }
    
    [JsModel]
    variant DummyVariant
    {
      | Case1 { A : string }
      | Case2 { B : int }
      | Case3 { C : bool }
      
      public D : bool = true;
    }
  }
}
