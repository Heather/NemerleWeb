using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Macros;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace Nemerle.Peg.Web.AstUtils
{
  /// Walks through AST object and collects all ancestors of `Nemerle.Peg.Web.Located' class
  /// which name starts with "Error".
  /// Code returns `SCG.List[Nemerle.Peg.Web.Located]' instance.
  macro CollectParseErrors(ast)
  {
    def typer = ImplicitCTX();

    def makeResult(_ : PT.PExpr, x : TT.TExpr)
    {
      def pegLocatedType = FixedType.Class(typer.Manager.LookupTypeInfo("Nemerle.Peg.Web.Located", 0), []);
      def typeHandler(ty : FixedType, var : PT.PExpr) : option[PT.PExpr]
      {
        match(ty)
        {
          | Class(ti, _) when ty.TryRequire(pegLocatedType) && ti.Name.StartsWith("Error") =>
            Some(<[ buffer.Add($var); ]>);
          | _ =>
            None()
        }
      }
      def typeWalker = TypeWalker(typeHandler);
      typeWalker.Run(x.Type);
      <[
        def buffer = System.Collections.Generic.List.[Nemerle.Peg.Web.Located]();
        $(typeWalker.Compile(x));
        buffer
      ]>
    }

    if(Manager().IsIntelliSenseMode)
      <[ System.Collections.Generic.List.[Nemerle.Peg.Web.Located]() ]>
    else
      typer.TransformWhenAllTypesWouldBeInfered(makeResult, typer.TypeExpr(ast))
  }
}