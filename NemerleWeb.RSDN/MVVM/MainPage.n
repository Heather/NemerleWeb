using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{    
  [Unit]
  public class MainPage
  {    
    public mutable static Instance : MainPage;

    Root : TreeNode { get; set; }    
    Pinned : TreeNode { get; set; }
    Search : Search { get; set; }
    
    ActiveNodes : list[TreeNode] { get; set; }
    SelectedUrl : string { get; set; }
    
    mutable _splitterAdded : bool;
    
    public this() 
    {
      MainPage.Instance = this;
      
      SelectedUrl = "";

      LoadTopNodes();
      Pinned = TreeNode();
      Search = Search();
                       
      UpdatePinned();
      
      _ = window.setTimeout(_ => 
        when(window.innerWidth < 800) {
          _ = jQuery(".page").splitterSetWidth(window.innerWidth);
        }, 
        50);
    }
        
    public LoadTopNodes() : void
    {
      _ = server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes
        );
      });
    }
    
    UpdatePinned() : void
    {
      _ = server.LoadByIds(GetPinned(), nodes => {
        Pinned.Children = nodes.ToList()
      });
    }
    
    public AddPinned(id : string) : void
    {
      def pinned = nweb.getCookie("pinned");
      
      if(pinned == null) nweb.setCookie("pinned", id, 360);
      else nweb.setCookie("pinned", pinned + "," + id, 360);
      
      UpdatePinned();
    }
    
    public RemovePinned(id : string) : void
    {
      def pinned = nweb.getCookie.[string]("pinned");
      when(pinned != null) nweb.setCookie("pinned", pinned.Replace(re (",?" + id) "g", ""), 360);
      
      UpdatePinned();
    }
    
    public GetPinned() : IEnumerable[string]
    {
      match(nweb.getCookie.[string]("pinned")) {
      | null => []
      | str => str.Split(',')
      }
    }
    
    public IsPinned(node : TreeNode) : bool
    {
      GetPinned().Any(id => id == node.Id);
    }
    
    public SelectNode(node : TreeNode) : void
    {
      def getAllParents(node : TreeNode) : list[TreeNode] {
      | _ when node.Parent != null => node.Parent :: getAllParents(node.Parent)
      | _ => [];
      };
      
      SelectedUrl = node.Href;
      ActiveNodes = node :: getAllParents(node);
           
      when(window.innerWidth < 800) {
        _ = jscall (@$)(".page").splitterSetWidth(0);
      }
    }
    
    public IsActiveNode(node : TreeNode) : bool 
    {
      ActiveNodes?.Any(n => n.Id == node.Id);
    }
    
    [Html]
    public View() : string
    {
      <#
        <div template="$(this, "DesktopView")" />
      #>
    }
    
    [Html]
    public DesktopView() : string
    {
      <#
        <div class="page">
          <div class="left">
            <div $when(Root != null) class="root">
              <div template="$Search" />
              <div $when(string.IsNullOrEmpty(Search.SearchTerm))>
                <div class="pinned-nodes">
                  <div template="$Pinned" />
                </div>
                <div template="$Root" />
              </div>
            </div>
          </div>
          <div class="right">
            <iframe src="$SelectedUrl" frameborder="0" border="0" />
          </div>
        </div>
      #>
    }
    
    [Html]
    public MobileView() : string
    {
      <#
        <div class="page">
          MOBILE!!!111
        </div>
      #>
    }
    
    
    public class Server
    {
      public GetTopNodes() : List[TreeNode]
      {
        TreeLoader.GetTopNodes()
      }
      
      public LoadByIds(ids : IEnumerable[string]) : IEnumerable[TreeNode]
      {
        TreeLoader.LoadByIds(ids)
      }
    }
  }
}
