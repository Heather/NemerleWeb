using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{    
  [Unit]
  public class MainPage
  {    
    public mutable static Instance : MainPage;
    public enum State { | Tree | Content | JumpList };
    
    Root : TreeNode { get; set; }    
    Pinned : TreeNode { get; set; }
    Popular : TreeNode { get; set; }
    Search : Search { get; set; }
        
    ActiveNodes : list[TreeNode] { get; set; }
    SelectedNode : TreeNode { get; set; }
    SelectedNodeUrl : string { get { if(SelectedNode != null) SelectedNode.Href else "" } }
    
    CurrentView : string { get { if(IsMobile) "MobileView" else "DesktopView"; } }
    IsMobile : bool { get; set; }
    CurrentState : State { get; set; }
    PreviousState : State { get; set; }
    
    mutable _splitterAdded : bool;
    
    public this() 
    {
      MainPage.Instance = this;
      
      Pinned = TreeNode();
      Search = Search();
                       
      UpdatePinned();
      IsMobile = window.document.body.clientWidth < 1000;
              
      _ = server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes.ToList()
        );
      });
      
      _ = server.GetPopularNodes(nodes => {
        def pinned = GetPinned();
        Popular = TreeNode() <- (
          Children = nodes.Where(n => !pinned.Any(p => p != n.Id)).ToList()
        );
      });
    }
    
    UpdatePinned() : void
    {
      _ = server.LoadByIds(GetPinned(), nodes => {
        Pinned.Children = nodes.ToList()
      });
    }
    
    public AddPinned(id : string) : void
    {
      def pinned = nweb.getCookie("pinned");
      
      if(pinned == null) nweb.setCookie("pinned", id, 360);
      else nweb.setCookie("pinned", pinned + "," + id, 360);
      
      UpdatePinned();
    }
    
    public RemovePinned(id : string) : void
    {
      def pinned = nweb.getCookie.[string]("pinned");
      when(pinned != null) nweb.setCookie("pinned", pinned.Replace(re (",?" + id) "g", ""), 360);
      
      UpdatePinned();
    }
    
    public GetPinned() : IEnumerable[string]
    {
      match(nweb.getCookie.[string]("pinned")) {
      | null => []
      | str => str.Split(',')
      }
    }
    
    public IsPinned(node : TreeNode) : bool
    {
      GetPinned().Any(id => id == node.Id);
    }
    
    public SelectNode(node : TreeNode) : void
    {
      def getAllParents(node : TreeNode) : list[TreeNode] {
      | _ when node.Parent != null => node.Parent :: getAllParents(node.Parent)
      | _ => [];
      };
            
      SelectedNode = node;
      ActiveNodes = node :: getAllParents(node);
      CurrentState = State.Content;
    }
    
    public IsActiveNode(node : TreeNode) : bool 
    {
      ActiveNodes?.Any(n => n.Id == node.Id);
    }
    
    public ToggleJumpList() : void
    {
      if(CurrentState == State.JumpList) {
        CurrentState = PreviousState;
      } else {
        PreviousState = CurrentState;
        CurrentState = State.JumpList;
      }
    }
    
    [Html]
    public View() : string
    {
      <#
        <div template="$(this, CurrentView)" />
      #>
    }
    
    [Html]
    public DesktopView() : string
    {
      <#
        <div class="page">
          <div class="left">
            <div $when(Root != null) class="root">
              <div template="$Search" />
              <div $when(string.IsNullOrEmpty(Search.SearchTerm))>
                <div class="pinned-nodes">
                  <div template="$Pinned" />
                </div>
                <div template="$Root" />
              </div>
            </div>
          </div>
          <div class="right">
            <iframe src="$(SelectedNode.Href)" frameborder="0" border="0" />
          </div>
        </div>
      #>
    }
    
    [Html]
    public MobileView() : string
    {
      <#
        <div class="mobile">
          <div class="mobile-toolbar">
            <span $when(CurrentState == State.Content) class="toggle-tree" click="$(CurrentState = State.Tree)">&lt</span>
            <span $when(CurrentState == State.Tree && SelectedNode != null) class="toggle-tree" click="$(CurrentState = State.Content)">&gt</span>
          
            <span class="toggle-jump-list" click="$(ToggleJumpList())">jump</span>
            <span $when(CurrentState == State.Content && !IsPinned(SelectedNode)) click="$(AddPinned(SelectedNode.Id))">
              pin
            </span>
            <span $when(CurrentState == State.Content && IsPinned(SelectedNode)) click="$(RemovePinned(SelectedNode.Id))">
              unpin
            </span>
          </div>
          <div $when(CurrentState == State.Tree)>
            <div $when(Root != null) class="root">
              <div template="$Search" />
              <div $when(string.IsNullOrEmpty(Search.SearchTerm))>
                <div template="$Root" />
              </div>
            </div>
          </div>
          <div visible="$(CurrentState == State.Content)" class="mobile-right">
            <iframe src="$(SelectedNodeUrl)" frameborder="0" border="0" />
          </div>
          <div $when(CurrentState == State.JumpList) class="jump-list">
            <div template="$Pinned" />
            <div template="$Popular" />
          </div>
        </div>
      #>
    }    
    
    public class Server
    {
      public GetTopNodes() : IEnumerable[TreeNode]
      {
        TreeLoader.GetTopNodes()
      }
      
      public LoadByIds(ids : IEnumerable[string]) : IEnumerable[TreeNode]
      {
        TreeLoader.LoadByIds(ids)
      }
      
      public GetPopularNodes() : IEnumerable[TreeNode]
      {
        TreeLoader.GetPopularNodes();
      }
    }
  }
}
