using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using NemerleWeb;

namespace NemerleWeb
{  
  /// <summary>
  /// Parses d.ts files and creates an appropriate Nemerle types and variables.
  ///
  /// Macro parameters:
  ///   Root: Required argument, where all classes will be generated.
  ///   Lib (optional): Where lib.d.ts file exists.
  ///   Files:
  ///     First: Directory.
  ///     Second: Exclude (optional). Do not look for this files. Specified by regular expression.  
  /// Path is relative to the project directory.
  ///
  /// Example, assuming we have all files in TS directory:
  ///   [assembly: GenerateJSApi(
  ///     Root = "TypedJS"
  ///     Lib = @"TS\_infrastructure\1.0\lib.d.ts",
  ///     Files =
  ///     [
  ///       ["TS", @"TS\\_infrastructure\\"],
  ///       ["UserTSD"]
  ///     ]
  ///   )]
  ///
  /// The convertion:
  /// All types are generated in the given namespace.
  /// The namespace and module with corresponding name are created.  
  /// This allows to have one 'using' for global JS functions and types.
  ///
  /// First all files are preparsed to resolve all referenced files.
  /// Then all files are parsed and code is generated.
  /// Types (classes, interfaces, modules) are generated before variables and functions.
  /// </summary>
  /// <note>
  /// There is no structural typing analysis.
  /// Use special macros to structuraly cast objects.
  /// </note>
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Assembly)]
  macro GenerateTypedJS(params options : list[PExpr])
  {
    GenerateTypedJSImpl.Impl(ImplicitCTX(), options)
  }
}
