using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using PT = Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using TSParser.Ast;
using NemerleWeb;

namespace NemerleWeb
{  
  internal module TypeBuilderExtensions
  {
    public DefineMember(
      this scope : TypeBuilder,
      member : ClassMember,
      classModifiers : NemerleModifiers) : void
    {
      def isStatic = member.Attributes %&& NemerleModifiers.Static;
      def isInterface = scope.IsInterface;
      def publicFunction = !isInterface || isStatic;
      
      match(member)
      {
      | f is ClassMember.Function when publicFunction =>
        f.body = DefaultFunctionImplementation;
      | p is ClassMember.Property when !scope.IsInterface =>
        when(p.getter is Some(getter))
          getter.body = DefaultFunctionImplementation;
        when(p.setter is Some(setter))
          setter.body = DefaultFunctionImplementation;
      | _ => ()
      }
      
      member.modifiers.mods |= NemerleModifiers.New;
      when(publicFunction)
        member.modifiers.mods |= classModifiers;
      
      _ = scope.Define(member);
    } 
    
    public DefineMemberPublicNew(this scope : TypeBuilder, member : ClassMember) : void
    {
      DefineMember(scope, member, NemerleModifiers.Public)
    }
    
    private DefaultImplementation : PExpr =
      <[ { IgnoreParams(); throw NemerleWeb.ClientCodeCalledInServerException(); } ]>;
    private DefaultFunctionImplementation : FunBody.Parsed =
      FunBody.Parsed(DefaultImplementation);
  }
}
