using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// A scope is a namespace with possibility to define members using module with the same name.
  /// </summary>
  internal sealed class Scope
  {
    private _globalEnv : GlobalEnv;
        
    public this([NotNull] globalEnv : GlobalEnv)
    {
      _globalEnv = globalEnv;
    }
    
    public Define([NotNull] member : ClassMember) : TypeBuilder
    {
      _globalEnv.Define(member)
    }
    
    public InnerScope([NotNull] inner : string) : Scope
    {
      if(!inner.IsEmpty()) Scope(_globalEnv.EnterIntoNamespace([inner])) else this;
    }
    
    /// <summary>
    /// Go one level up and create module with the last part
    /// </summary>
    [Memoize]
    public GetTypeBuilder() : TypeBuilder
    { 
      def moduleName = _globalEnv.CurrentNamespace.PartName;
      
      def parent =
        _globalEnv.Manager.CoreEnv.EnterIntoNamespace(_globalEnv.CurrentNamespace.Parent);
      
      parent.Define(<[ decl: public partial module $(moduleName : usesite) {} ]>)
    }
  }
}
