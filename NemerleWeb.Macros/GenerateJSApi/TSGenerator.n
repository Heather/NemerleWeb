using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using PT = Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using TSParser.Ast;
using NemerleWeb;

namespace NemerleWeb
{
  /// <summary>
  /// Description of TSGenerator.
  /// </summary>
  internal module TSGenerator
  {
    #region Public
    
    /// <summary>
    /// Create namespace and module 
    /// </summary>
    public GenerateCode(
      [NotNull] typer : Typer,
      [NotNull] root : string,
      [NotNull] tsAst : IEnumerable[DeclarationElement]) : void
    {
      def jsApiRoot = typer.Env.EnterIntoNamespace(root.SplitDot());
      
      // First generate all types
      GenerateTypes(jsApiRoot, tsAst);
      
      // Generate types members
      GenerateTypesMembers(jsApiRoot, tsAst);
      
      // Then generate the rest: variables, functions...
      GenerateRest(jsApiRoot, tsAst);
    }
    
    #endregion
    
    #region Generate types
    
    private GenerateTypes(typesScope : GlobalEnv, members : IEnumerable[DeclarationElement]) : void
    {
      foreach(mem in members) 
      {
      | InterfaceDeclaration(value) => CreateInterface(typesScope, value, false)
      | AmbientDeclaration(value) => GenerateTypesAmbient(typesScope, value)
      | _ => ()
      }
    }
    
    private GenerateTypesAmbient(typesScope : GlobalEnv, ambient : AmbientDeclaration) : void
    {
      match(ambient)
      {
      | VariableDeclaration
      | FunctionDeclaration
      | ClassDeclaration         
      | EnumDeclaration          
      | ExternalModuleDeclaration => ()
      | ModuleDeclaration(value) => GenerateTypesModule(typesScope, value)
      | _ => ()
      }
    }
    
    private GenerateTypesModule(typesScope : GlobalEnv, @module : AmbientModuleDeclaration) : void
    {
      def moduleScope = typesScope.EnterIntoNamespace(@module.Name.SplitDot());
      
      foreach (member in @module.Members)
      {
        | VariableDeclaration
        | FunctionDeclaration
        | ClassDeclaration => ()
        | InterfaceDeclaration(value) => CreateInterface(moduleScope, value, false)
        | EnumDeclaration => ()
        | ModuleDeclaration(value) => GenerateTypesModule(moduleScope, value)
        | _ => ()
      }
    }
    
    #endregion
    
    #region Generate types members
    
    private GenerateTypesMembers(typesScope : GlobalEnv, members : IEnumerable[DeclarationElement]) : void
    {
      foreach(mem in members) 
      { 
      | InterfaceDeclaration(value) => CreateInterface(typesScope, value, true)
      | AmbientDeclaration(value) => GenerateTypesMembersAmbient(typesScope, value)
      | _ => ()
      }
    }
    
    private GenerateTypesMembersAmbient(typesScope : GlobalEnv, ambient : AmbientDeclaration) : void
    {
      match(ambient)
      {
      | VariableDeclaration
      | FunctionDeclaration
      | ClassDeclaration         
      | EnumDeclaration          
      | ExternalModuleDeclaration => ()
      | ModuleDeclaration(value) => GenerateTypesMembersModule(typesScope, value)
      | _ => ()
      }
    }
     
    private GenerateTypesMembersModule(typesScope : GlobalEnv, @module : AmbientModuleDeclaration) : void
    {
      def moduleScope = typesScope.EnterIntoNamespace(@module.Name.SplitDot());
      
      foreach (member in @module.Members)
      {
        | VariableDeclaration
        | FunctionDeclaration
        | ClassDeclaration => ()
        | InterfaceDeclaration(value) => CreateInterface(moduleScope, value, true)
        | EnumDeclaration => ()
        | ModuleDeclaration(value) => GenerateTypesMembersModule(moduleScope, value)
        | _ => ()
      }
    }
    
    #endregion
    
    #region Generate rest
    
    private GenerateRest(typesScope : GlobalEnv, members : IEnumerable[DeclarationElement]) : void
    {
      foreach(mem in members) 
      { 
      | AmbientDeclaration(value) => GenerateRestAmbient(typesScope, value)
      | _ => ()
      }
    }
    
    private GenerateRestAmbient(typesScope : GlobalEnv, ambient : AmbientDeclaration) : void
    {
      // Create module
      def membersScope = Scope(typesScope).GetTypeBuilder();
      
      match(ambient)
      {
      | VariableDeclaration(value) => CreateVariable(typesScope, membersScope, value)
      | FunctionDeclaration(value) => CreateFunction(typesScope, membersScope, value)
      | ExternalModuleDeclaration => ()
      | ModuleDeclaration(value) => GenerateRestModule(typesScope, value)
      | _ => ()
      }
      
      // Compile module
      membersScope.Compile();
    }
    
    private GenerateRestModule(typesScope : GlobalEnv, @module : AmbientModuleDeclaration) : void
    {
      def moduleScope = typesScope.EnterIntoNamespace(@module.Name.SplitDot());
      
      // Create module
      def membersScope = Scope(moduleScope).GetTypeBuilder();
      
      foreach (member in @module.Members)
      {
        | VariableDeclaration(value) => CreateVariable(moduleScope, membersScope, value)
        | FunctionDeclaration(value) => CreateFunction(moduleScope, membersScope, value)
        | ClassDeclaration
        | InterfaceDeclaration
        | EnumDeclaration => ()
        | ModuleDeclaration(value) => GenerateRestModule(moduleScope, value)
        | _ => ()
      }
      
      membersScope.Compile();
    }
    
    #endregion
    
    #region Code Generation
    
    private CreateInterface(
      typesScope : GlobalEnv,
      tsInterface : InterfaceDeclaration,
      generateMembers : bool) : void
    {
      def typeParameters = ConvertTypeParameters(tsInterface.TypeParameters);
        
      def extends = 
        if (generateMembers)
          tsInterface.Extends.Select(e => MakeFullType(e, typeParameters));
        else
          [];
        
      def interfaceType = typesScope.Define(
        <[ decl:
          [JSApi]
          public partial interface $(tsInterface.Name : usesite)[..$typeParameters] : ..$extends {}
        ]>);
      
      when (generateMembers)
        CreateObject(typesScope, interfaceType, tsInterface.Type, tsInterface.Name);
        
      interfaceType.Compile();
    }

    private CreateVariable(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      var : AmbientVariableDeclaration) : void
    {
      def typePrefix = string.Join(Separator, var.Name, Variable);
      def varType = ConvertType(typesScope, var.Type, typePrefix);
      
      _ = membersScope.Define(
        <[ decl: public new mutable $(var.Name : usesite) : $varType = default($varType); ]>);
    }
  
    private CreateFunction(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      function : AmbientFunctionDeclaration) : void
    {
      CreateMethod(typesScope, membersScope, function.Name, function.Signature, "");
    }
    
    CreateObject(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      obj : ScriptType.Object,
      prefix : string) : void
    {
      foreach(mem in obj.Members) CreateObject(typesScope, membersScope, mem, prefix);
    }
    
    CreateObject(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      obj : ScriptObject,
      prefix : string) : void
    {
      match(obj)
      {
      | Call(value)      => CreateCall(typesScope, membersScope, value, prefix)
      | Construct(value) => CreateConstruct(typesScope, membersScope, value, prefix)
      | Index(value)     => CreateIndex(typesScope, membersScope, value, prefix)
      | Property(value)  => CreateProperty(typesScope, membersScope, value, prefix)
      | Method(value)    => CreateMethod(typesScope, membersScope, value, prefix)
      | _ => ()
      }
    }
    
    CreateCall(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      call : CallSignature,prefix : string) : void
    {
      def fullPrefix = string.Join(Separator, prefix, Call);
      def returnTypePrefix = string.Join(Separator, fullPrefix, Return);
      def realReturnType = ConvertType(typesScope, call.ReturnType, returnTypePrefix);
      
      def functionParams = ConvertParameters(typesScope, call.Parameters, fullPrefix);
      when(functionParams is None()) return;      
      def functionParams = functionParams.Value;
      
      def typeParameters = ConvertTypeParameters(call.TypeParameters);
      
      membersScope.DefineMemberPublicNew(
        <[ decl: $(JSApiSpecial.Call : usesite)[..$typeParameters](..$functionParams) : $realReturnType; ]>);
    }
   
    CreateConstruct(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      construct : Construct,
      prefix : string) : void
    {
      def fullPrefix = string.Join(Separator, prefix, New);
      def returnTypePrefix = string.Join(Separator, fullPrefix, Return);
      def realReturnType = ConvertType(typesScope, construct.ReturnType, returnTypePrefix);
    
      def functionParams = ConvertParameters(typesScope, construct.Parameters, fullPrefix);
      when(functionParams is None()) return;      
      def functionParams = functionParams.Value;
      
      def typeParameters = ConvertTypeParameters(construct.TypeParameters);
      
      membersScope.DefineMemberPublicNew(
        <[ decl: $(JSApiSpecial.New : usesite)[..$typeParameters](..$functionParams) : $realReturnType; ]>);
    }
    
    CreateIndex(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      index : IndexSignature,
      prefix : string) : void
    {
      def (realParamType, typeName) =
        match(index.ParameterType)
        {
        | Number => (<[ float ]>, "Number")
        | String => (<[ string ]>, "String")
        };
        
      def fullPrefix = string.Join(Separator, prefix, typeName, Index);
      def returnTypePrefix = string.Join(Separator, fullPrefix, Return);
      def realReturnType = ConvertType(typesScope, index.ReturnType, returnTypePrefix);
      
      membersScope.DefineMemberPublicNew(
        <[ decl:
          new Item[$(index.ParameterName : usesite) : $realParamType] : $realReturnType
          {
            get;
            set;
          }
        ]>);
    }

    /// <summary>
    /// Don't pay attention to optional, always generate property
    /// </summary>
    CreateProperty(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      property : Property,
      prefix : string) : void
    {
      def fullPrefix = string.Join(Separator, prefix, property.Name);
      def typePrefix = string.Join(Separator, fullPrefix, Property);
      def propertyType = ConvertType(typesScope, property.Type, typePrefix);
      
      membersScope.DefineMemberPublicNew(
        <[ decl: $(property.Name : usesite) : $propertyType { get; set; }; ]>);
    }
    
    /// <summary>
    /// Don't pay attention to optional, always generate method
    /// </summary>
    CreateMethod(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      method : Method,
      prefix : string) : void
    {
      CreateMethod(typesScope, membersScope, method.Name, method.Signature, prefix);
    }
    
    CreateMethod(
      typesScope : GlobalEnv,
      membersScope : TypeBuilder,
      name : string,
      signature : CallSignature,
      prefix : string) : void
    {
      def fullPrefix = string.Join(Separator, prefix, name);
      def returnTypePrefix = string.Join(Separator, fullPrefix, Return);
      def realReturnType = ConvertType(typesScope, signature.ReturnType, returnTypePrefix);
    
      def functionParams = ConvertParameters(typesScope, signature.Parameters, fullPrefix);
      when(functionParams is None()) return;      
      def functionParams = functionParams.Value;
      
      def typeParameters = ConvertTypeParameters(signature.TypeParameters);
    
      membersScope.DefineMemberPublicNew(
        <[ decl: $(name : usesite)[..$typeParameters](..$functionParams) : $realReturnType; ]>);
    }
    
    static mutable anonymousTypeIndex : int = 0;
    
    private CreateAnonymousType(
      typesScope : GlobalEnv,
      obj : ScriptType.Object,
      prefix : string) : PExpr
    {
      // Filter out pseudo types
      if(obj.Members is [])
        <[ object ]>
      else
      {
        anonymousTypeIndex++;
        
        def name = string.Join(Separator, prefix, AnonymousType, anonymousTypeIndex.ToString());
        
        def type = typesScope.Define(
          <[ decl: 
            [JSApi] public partial class $(name : usesite) { }
          ]>);
          
        // Suppress warning
        type.HasBeenUsed = true;
        
        CreateObject(typesScope, type, obj, name);
        type.Compile();
          
        <[ $(name : usesite) ]>
      }
    }
    
    private CreateModule() : TypeBuilder
    {
      null
    }
    
    #endregion
    
    #region Converters
    
    /// <summary>
    /// Makes type with type argument
    /// </summary>
    private MakeFullType(
      typeRef : ScriptType.Ref,
      typeParameters : IEnumerable[PT.Splicable]) : PExpr
    {
      def typeArguments = typeRef.TypeArguments.Select(
        tyArg => MakeFullTypeImpl(tyArg, typeParameters));
      
      <[ $(typeRef.Name : usesite).[..$typeArguments] ]>
    }
    
    /// <summary>
    /// Get PExpr from TS type
    /// </summary>
    private MakeFullTypeImpl(
      type : ScriptType,
      typeParameters : IEnumerable[PT.Splicable]) : PExpr
    {
      match(type)
      {
      | Any => <[ object ]>
      | Number => <[ float ]>
      | Boolean => <[ bool ]>
      | String => <[ string ]>
      | Void => <[ void ]>
      | Ref as r => MakeFullType(r, typeParameters)
      | Query => Message.Warning("Query type argument unsupported"); <[ object ]>
      | Array => Message.Warning("Array type argument unsupported"); <[ object ]>
      | Object as o =>
        if(o.Members is [])
          <[ object ]>
        else
        {
          Message.Warning("Object type argument is supported only without members");
          <[ object ]>
        }        
      | Function => Message.Warning("Function type argument unsupported"); <[ object ]>
      | Constructor => Message.Warning("Constructor type argument unsupported"); <[ object ]>
      | _ => Message.Warning($"Unsupport type argument $type");  <[ object ]>
      }
    }
    
    private ConvertTypeParameters(typeParameters : IEnumerable[ScriptTypeParameter])
      : list[PT.Splicable]
    {
      typeParameters.Select(e => PT.Splicable.Name(<[ $(e.Name : dyn) ]>)).NToList()
    }
    
    private GetParameterPrefix(prefix : string, name : string) : string
    {
      string.Join(Separator, prefix, name, Parameter)
    }
    
    /// <summary>
    /// Convert function parameters
    /// If there is a literal parameter, None is returned.
    /// </summary>
    private ConvertParameters(
      typesScope : GlobalEnv,
      parms : IEnumerable[ScriptParameter],
      prefix : string) : option[List[PParameter]]
    {
      def convert(p : ScriptParameter) : option[PParameter]
      {
        // Literal parameters are not supported now
        | Required(RequiredParameter.Literal) => None()          
        | Required(RequiredParameter.Regular(name, type, _))
        | Optional(name, type, _, _) => 
          def realType = ConvertType(typesScope, type, GetParameterPrefix(prefix, name));
          Some(<[ parameter: $(name : usesite) : $realType ]>)
        | Rest(name, type) =>          
          def realType = ConvertType(typesScope, type, GetParameterPrefix(prefix, name));
          Some(<[ parameter: params $(name : usesite) : $realType ]>)
      }
      
      def ret = List();
      foreach(parm in parms)
      {
        def maybeRealParam = convert(parm);
        if(maybeRealParam is Some(realParam))
          ret.Add(realParam);
        else
          return None();
      }
      
      Some(ret);
    }
    
    /// <summary>
    /// Return parameters types
    /// </summary>
    private GetParametersType(
      typesScope : GlobalEnv,
      parms : list[ScriptParameter],
      prefix : string) : list[PExpr]
    {
      def convertParamsType(p : ScriptParameter)
      {
        // Literal parameters are not supported now
        | Required(RequiredParameter.Literal) =>
          throw InvalidOperationException("Literal parameters are not supported")
        | Required(RequiredParameter.Regular(name, type, _))
        | Optional(name, type, _, _) => 
          ConvertType(typesScope, type, GetParameterPrefix(prefix, name))
        | Rest(name, type) =>
          ConvertType(typesScope, type, GetParameterPrefix(prefix, name))
      }
    
      def ret = parms.Map(convertParamsType);
      ret
    }
    
    private ConvertType(typesScope : GlobalEnv, type : option[ScriptType], prefix : string) : PExpr
    {
      if(type is Some(t)) ConvertType(typesScope, t, prefix) else <[ object ]>
    }
    
    private ConvertType(typesScope : GlobalEnv, type : ScriptType, prefix : string) : PExpr
    {
      match(type)
      {
      | Any => <[ object ]>
      | Array(t, 0) => <[ $(ConvertType(typesScope, t, prefix)) ]>
      | Array(t, rank) => <[ array[$(ConvertType(typesScope, ScriptType.Array(t, rank - 1), prefix))] ]>
      | Boolean => <[ bool ]>
      | Constructor => <[ object ]>
      | Function(value) =>
        // TODO: Handle generic function literals
        if(value.TypeParameters is [])
        {
          mutable lambdaParams = GetParametersType(typesScope, value.Parameters, prefix);
          def type =
            if(value.ReturnType is ScriptType.Void())
              <[ System.Action ]>
            else
            {
              lambdaParams = lambdaParams.Concat([ConvertType(typesScope, value.ReturnType, prefix)]);
              <[ System.Func ]>
            };
          
          <[ $type.[..$lambdaParams] ]>
        }
        else
        {
          <[object]>
        }
        
      | Number => <[ float ]>
      | Object as type => CreateAnonymousType(typesScope, type, prefix)
      | Query as q =>
        // TODO: Support query
        Message.Hint($"Query is not supported, typeof $(q.Name)");
        <[ object ]>      
      | Ref("Array", tyArgs) =>
        // TODO: Support local Array type
        def tyArg =
          match(tyArgs)
          {
          | [] => ScriptType.Any()
          | [tyArg] => tyArg
          | _ =>
            Message.Warning(@"Array generic type cannot receive more than one type argument,"
                            @"using the first one.");
            tyArgs.Head
          };
          
        def typeArgumentPrefix = string.Join(Separator, prefix, TypeArgument);
        def realType = ConvertType(typesScope, tyArg, typeArgumentPrefix);
        
        <[ array[$realType] ]>
          
      | Ref(name, tyArgs) => 
        def typeArgumentPrefix = string.Join(Separator, prefix, TypeArgument);
        def realTypeArguments = tyArgs.Map(type => ConvertType(typesScope, type, typeArgumentPrefix));
      
        <[ $(name : usesite).[..$realTypeArguments] ]>
      | String => <[ string ]>
      | Void => <[ void ]>
      }
    }
    
    #endregion
    
    #region Special constants
    
    private Call = "Call";
    private New = "New";
    private Variable = "Variable";
    private Constructor = "Constructor";
    private Index = "Index";
    private Return = "Return";
    private Parameter = "Parameter";
    private AnonymousType = "AnonymousType";
    private TypeArgument = "TypeArgument";
    private Separator = "_";
    
    #endregion
    
    #region Helpers
    
    
    #endregion
  }
  
  internal module ScopeExtensions
  {
    public DefineMemberPublicNew(this scope : TypeBuilder, member : ClassMember) : void
    {
      when(!scope.IsInterface)
      {
        match(member)
        {
        | f is ClassMember.Function =>
          f.body = DefaultFunctionImplementation;
        | p is ClassMember.Property =>
          when(p.getter is Some(getter))
            getter.body = DefaultFunctionImplementation;
          when(p.setter is Some(setter))
            setter.body = DefaultFunctionImplementation;
        | _ => ()
        }
      }
      
      member.modifiers.mods |= NemerleModifiers.New;
      when(!scope.IsInterface)
        member.modifiers.mods |= NemerleModifiers.Public;
      
      _ = scope.DefineWithSource(member);
    }
    
    private DefaultImplementation : PExpr =
      <[ { IgnoreParams(); throw NemerleWeb.ClientCodeCalledInServerException(); } ]>;
    private DefaultFunctionImplementation : FunBody.Parsed =
      FunBody.Parsed(DefaultImplementation);
  }
}
