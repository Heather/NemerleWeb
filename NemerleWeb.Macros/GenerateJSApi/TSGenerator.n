using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using PT = Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using TSParser.Ast;
using NemerleWeb;

namespace NemerleWeb
{
  /// <summary>
  /// Description of TSGenerator.
  /// </summary>
  internal module TSGenerator
  {
    #region Generation analysis
    
    public GenerateCode(typer : Typer, root : string, tsAst : IEnumerable[DeclarationElement]) : void
    {
      def jsApiNamespace = typer.Env.EnterIntoNamespace(root.SplitDot());
      //def jsApiModule = CreateModule(root.SplitDot(), Scope(typer.Env), [], true, true);
      
      // First generate all types
      GenerateTypes(Scope(jsApiNamespace), tsAst);
      
      // Generate types members
      //GenerateTypesMembers(Scope(jsApiNamespace), tsAst);
      
      // Then generate the rest: variables, functions.
      //GenerateRestMembers(Scope(jsApiNamespace), jsApiModule, tsAst);
      
      // Finalize
      //jsApiModule.Compile();
    }
    
    private GenerateTypes(typesScope : Scope, members : IEnumerable[DeclarationElement]) : void
    {
      foreach(mem in members) 
      { 
      | InterfaceDeclaration(value) => CreateInterface(value, typesScope)
      | AmbientDeclaration(value) => ()
      | _ => ()
      }
    }
    
    #endregion
    
    #region Code Generation
    
    private CreateInterface(
      tsInterface : InterfaceDeclaration,
      typesScope : Scope) : void
    {
      def extends = tsInterface.Extends
        .Select(e => typesScope.FromQualifiedIdentifier(e.Name));
      
      def typeParameters = tsInterface.TypeParameters
        .Select(e => PT.Splicable.Name(Name(e.Name)))
        .NToList();
      
      def interfaceType = typesScope.Define(
        <[ decl:
          [JSApi]
          public partial interface $(tsInterface.Name : usesite)[..$typeParameters] : ..$extends {}
        ]>);
      
      interfaceType.Compile();
    }
    
    private CreateInterfaceTyped(
      tsInterface : InterfaceDeclaration,
      typesScope : Scope) : void
    {
      /*
      def interfaceType =
        if (typeMembers || tsInterface.Extends is [])
          typesScope.Define(
            <[ decl: 
              [JSApi] public partial interface $(tsInterface.Name : usesite) {}
            ]>)
        else
        {
          def extends = tsInterface.Extends.Select(typesScope.FromQualifiedIdentifier);
          typesScope.Define(
            <[ decl:
              [JSApi] public partial interface $(tsInterface.Name : usesite) : ..$extends {}
            ]>)
        };
      */
    }
   
    
    #endregion
    
    #if A
    
    
    private GenerateTypes(typesScope : Scope, members : IEnumerable[DeclarationElement]) : void
    {
      foreach(mem in members) 
      { 
      | InterfaceDeclaration(value) => ()//CreateTSGlobalInterface(i, typesScope, false)
      //| Class     as c => CreateTSGlobalClass    (c, typesScope, false)
      //| Enum      as e => CreateTSGlobalEnum     (e, typesScope)
      //| Import    as i => CreateTSGlobalImport   (i, typesScope)
      //| Export    as e => CreateTSGlobalExport   (e, typesScope)
      //| Module    as m => CreateTSGlobalModule   (m, typesScope, true, false)
      | _ => ()
      }
    }
    private GenerateTypesMembers(typesScope : Scope, members : IEnumerable[TSGlobal]) : void
    {
      foreach(mem in members) 
      {
      | Interface as i => CreateTSGlobalInterface(i, typesScope, true)
      | Class     as c => CreateTSGlobalClass    (c, typesScope, true)
      | Module    as m => CreateTSGlobalModule   (m, typesScope, true, true)
      | _ => ()
      }
    }
    
    private GenerateOthers(
      typesScope : Scope,
      othersScope : TypeBuilder,
      members : IEnumerable[TSGlobal]) : void
    {
      foreach(mem in members)
      {
      | Module    as m => CreateTSGlobalModule   (m, typesScope, false, true)
      | Variable  as v => CreateTSGlobalVariable (v, othersScope, typesScope)
      | Function  as f => CreateTSGlobalFunction (f, othersScope, typesScope)
      | Construct as c => CreateTSGlobalConstruct(c, typesScope)
      | _ => ()
      }
    }
    
    private CreateTSGlobalVariable(var : TSGlobal.Variable, othersScope : TypeBuilder, typesScope : Scope) : void
    {
      def typePrefix = $"$(var.Name)_Variable";
      def varType = ConvertType(typePrefix, var.Type, typesScope);
      
      _ = othersScope.Define(<[ decl: public mutable $(var.Name : usesite) : $varType = default($varType); ]>);
    }
  
    /// <summary>
    /// Creates function in module.
    /// Global function can be without a name.
    /// </summary>
    private CreateTSGlobalFunction(function : TSGlobal.Function, othersScope : TypeBuilder, typesScope : Scope) : void
    {
      def typePrefix = $"$(function.Name)_Return";
      def returnType = ConvertType(typePrefix, function.ReturnType, typesScope);
        
      def functionParams = ConvertParameters(function.Name, function.Params, typesScope);
        
      _ = othersScope.Define(<[ decl: 
        public $(function.Name : usesite)(..$functionParams) : $returnType
          $DefaultImplementation
      ]>);   
    }
    
    private CreateTSGlobalInterface(tsInterface : TSGlobal.Interface, typesScope : Scope, typeMembers : bool) : void
    {
      def interfaceType =
        if (typeMembers || tsInterface.Extends is [])
          typesScope.Define(
            <[ decl: 
              [JSApi] public partial interface $(tsInterface.Name : usesite) {}
            ]>)
        else
        {
          def extends = tsInterface.Extends.Select(typesScope.FromQualifiedIdentifier);
          typesScope.Define(
            <[ decl:
              [JSApi] public partial interface $(tsInterface.Name : usesite) : ..$extends {}
            ]>)
        };
      
      when(typeMembers)
        foreach(member in tsInterface.Type.Members)
        {
        | Call(parms, returnType) =>
          def fullPrefix = $"$(tsInterface.Name)_Call";
          def returnTypePrefix = $"$(fullPrefix)_Return";
          def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
          def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
       
          _ = interfaceType.DefineWithSource(
            <[ decl:
              new $(JSApiSpecial.Call : usesite)(..$functionParams) : $realReturnType;
            ]>);
        | Construct(parms, type) =>
          def fullPrefix = $"$(tsInterface.Name)_New";
          def typePrefix = $"$(fullPrefix)_Return";
          def realType = ConvertType(typePrefix, type, typesScope);
        
          def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
          
          _ = interfaceType.DefineWithSource(
            <[ decl:
              new $(JSApiSpecial.New : usesite)(..$functionParams) : $realType;
            ]>);
        | Index(paramName, paramType, returnType) =>
          def (realParamType, typeName) =
            match(paramType)
            {
            | Number => (<[ float ]>, "Number")
            | String => (<[ string ]>, "String")
            };
        
          def fullPrefix = $"$(tsInterface.Name)_$(typeName)_Index";
          def returnTypePrefix = $"$(fullPrefix)_Return";
          def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
            _ = interfaceType.DefineWithSource(
            <[ decl:
              new Item[$(paramName : usesite) : $realParamType] : $realReturnType
              {
                get;
                set;
              }
            ]>);
        
        | Property(name, _optional, type) =>
          // Don't pay attention to optional, always generate property
          def fullPrefix = $"$(tsInterface.Name)_$(name)";
          def typePrefix = $"$(fullPrefix)_Property";
          def propertyType = ConvertType(typePrefix, type, typesScope);
        
          _ = interfaceType.DefineWithSource(<[ decl: new $(name : usesite) : $propertyType { get; set; }; ]>);
        
        | Function(name, _optional, parms, returnType) =>
          // Don't pay attention to optional, always generate property
          def fullPrefix = $"$(tsInterface.Name)_$(name)";
          def returnTypePrefix = $"$(fullPrefix)_Return";
          def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
          def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
          _ = interfaceType.DefineWithSource(<[ decl: new $(name : usesite)(..$functionParams) : $realReturnType; ]>);
        }
        
      interfaceType.Compile();
    }
  
    private CreateTSGlobalClass(tsClass : TSGlobal.Class, typesScope : Scope, typeMembers : bool) : void
    {
      def classType = 
        if(typeMembers)
          typesScope.Define(<[ decl: [JSApi] public partial class $(tsClass.Name : usesite) {} ]>)
        else
          match((tsClass.Extends, tsClass.Implements))
          {
          | (None, []) =>
            typesScope.Define(<[ decl: [JSApi] public partial class $(tsClass.Name : usesite) {} ]>)
          | _ =>
            def extends =
              if (tsClass.Extends is Some(ex))
                if(typesScope.LookupType(ex) is Some(t))
                  [t]
                else []
              else [];
            
            def implement = tsClass.Implements.Select(typesScope.FromQualifiedIdentifier);
            def inherit = extends.Concat(implement);
            
            typesScope.Define(
              <[ decl:
                [JSApi] public partial class $(tsClass.Name : usesite) : ..$inherit {}
              ]>)
          };
      
      when(typeMembers)
        foreach(member in tsClass.Members)
        {
        | Constructor(parms) =>
        def fullPrefix = $"$(tsClass.Name)_Constructor";
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = classType.DefineWithSource(
          <[ decl:
            public this(..$functionParams)
              $DefaultImplementation
          ]>);
      
        | Member(part, isStatic, _access) =>
        // Access is ignored.      
        // Generate private as public ones.
        match(part)
        {
        | Variable(name, type) =>
          def fullPrefix = $"$(tsClass.Name)_$(name)";
          def typePrefix = $"$(fullPrefix)_Variable";
          def variableType = ConvertType(typePrefix, type, typesScope);
          
          if(isStatic is Some(true))
            _ = classType.DefineWithSource(
              <[ decl: public static mutable $(name : usesite) : $variableType = default($variableType); ]>);
          else
            _ = classType.DefineWithSource(
              <[ decl: public mutable $(name : usesite) : $variableType = default($variableType); ]>);
          
        | Method(name, _optional, parms, returnType) =>
          // Don't pay attention to optional, always generate property
          def fullPrefix = $"$(tsClass.Name)_$(name)";
          def returnTypePrefix = $"$(fullPrefix)_Return";
          def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
            
          def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
          
          if(isStatic is Some(true))
            _ = classType.DefineWithSource(
              <[ decl: 
                public static new $(name : usesite)(..$functionParams) : $realReturnType
                  $DefaultImplementation
              ]>);
          else
            _ = classType.DefineWithSource(
              <[ decl: 
                public new $(name : usesite)(..$functionParams) : $realReturnType
                  $DefaultImplementation
              ]>);
        }
        }
        
      classType.Compile();
    }
  
    private CreateTSGlobalConstruct(_c : TSGlobal.Construct, _typesScope : Scope) : void
    {
      Message.Hint("TSGlobal.Construct is not supported");
    }
    
    private CreateTSGlobalEnum(tsEnum : TSGlobal.Enum, typesScope : Scope) : void
    {
      def type = <[ decl: public enum $(tsEnum.Name : usesite) { } ]>;
      typesScope.Define(type).Compile();
    }
  
    private CreateTSGlobalImport(_i : TSGlobal.Import, _typesScope : Scope) : void
    {
      Message.Hint("TSGlobal.Import is not supported");
    }
  
    private CreateTSGlobalExport(_e : TSGlobal.Export, _typesScope : Scope) : void
    {
      Message.Hint("TSGlobal.Export is not supported");
    }
  
    private CreateTSGlobalModule(tsModule : TSGlobal.Module, typesScope : Scope, types : bool, typeMembers : bool) : void
    {
      def moduleName = tsModule.Name.Replace('/', '.').Replace('\\', '.');

      // Create modules by splitting '.'
      def moduleType = CreateModule(moduleName.SplitDot(), typesScope, tsModule.Members, types, typeMembers);
      moduleType.Compile()
    }
    
    
           

    #region Helpers
    
    /// <summary>
    /// Return parameter types
    /// </summary>
    private GetParamsType(prefix : string, parms : list[TSParam], typesScope : Scope) : list[PExpr]
    {
      def makePrefix(name)
      {
        $"$(prefix)_$(name)_Parameter"
      }
      def convertParamsType(p : TSParam)
      {
        | Required(name, type, _access)
        | Option(name, _, type, _access) => ConvertType(makePrefix(name), type, typesScope)
        | Rest(name, type) => ConvertType(makePrefix(name), type, typesScope)
      }
    
      def ret = parms.Map(convertParamsType);
      ret
    }

    /// <summary>
    /// Convert function parameters
    /// </summary>
    private ConvertParameters(prefix : string, parms : IEnumerable[TSParam], typesScope : Scope) : IEnumerable[PParameter]
    {
      def makePrefix(name)
      {
        $"$(prefix)_$(name)_Parameter"
      }
      def convertParamsType(p : TSParam)
      {
        | Required(name, type, _access)
        | Option(name, _optional, type, _access) =>
          def realType = ConvertType(makePrefix(name), type, typesScope);
          <[ parameter: $(name : usesite) : $realType ]>          
        | Rest(name, type) =>
          def realType = ConvertType(makePrefix(name), type, typesScope);
          <[ parameter: params $(name : usesite) : $realType ]>
      }
    
      def ret = parms.Select(convertParamsType);
      ret
    }
    
    private CreateAnonymousType(prefix : string, members : list[TSObject], typesScope : Scope) : PExpr
    {
      if(members is [])
        <[ object ]>
      else
        CreateAnonymousTypeAlways(prefix, members, typesScope)
    }
    
    static mutable anonymousTypeIndex : int = 0;
    
    private CreateAnonymousTypeAlways(prefix : string, members : list[TSObject], typesScope : Scope) : PExpr
    {
      // Handle no members case
      
      def classNamePrefix = $"$(prefix)_AnonymousType";
      
      anonymousTypeIndex++;
      def className = $"$classNamePrefix$anonymousTypeIndex";
      
      def anonClass = typesScope.Define(<[ decl:
        [JSApi] public sealed class $(className : usesite) { }
      ]>);
      
      // Suppress warning
      anonClass.HasBeenUsed = true;
      
      // Add members
      def analyzedMembers = members.SelectMany(AnalyzeTSObject).Distinct(TSObjectEqualityComparer());
      foreach(member in analyzedMembers)
      {
      | Call(parms, returnType) =>
        def fullPrefix = $"$(className)_Call";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);

        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = anonClass.DefineWithSource(
          <[ decl:
            public $(JSApiSpecial.Call : usesite)(..$functionParams) : $realReturnType
              $DefaultImplementation
          ]>);
      | Construct(parms, type) =>
        def fullPrefix = $"$(className)_New";
        def typePrefix = $"$(fullPrefix)_Return";
        def realType = ConvertType(typePrefix, type, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
          
        _ = anonClass.DefineWithSource(
          <[ decl:
            public $(JSApiSpecial.New : usesite)(..$functionParams) : $realType
              $DefaultImplementation
          ]>);
      | Index(paramName, paramType, returnType) =>
        def (realParamType, typeName) =
          match(paramType)
          {
          | Number => (<[ float ]>, "Number")
          | String => (<[ string ]>, "String")
          };
        
        def fullPrefix = $"$(className)_$(typeName)_Index";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
        _ = anonClass.DefineWithSource(
          <[ decl:
            public Item[$(paramName : usesite) : $realParamType] : $realReturnType
            {
              get
                $DefaultImplementation;
              set
                $DefaultImplementation;
            }
          ]>);
      
      | Property(name, _optional, type)  =>
        // Don't pay attention to optional, always generate property
        def fullPrefix = $"$(className)_$(name)";
        def typePrefix = $"$(fullPrefix)_Property";
        def propertyType = ConvertType(typePrefix, type, typesScope);
        
        _ = anonClass.DefineWithSource(<[ decl: public $(name : usesite) : $propertyType { get; set; } ]>);
      
      | Function(name, _optional, parms, returnType) =>
        // Don't pay attention to optional, always generate property
        def fullPrefix = $"$(className)_$(name)";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = anonClass.DefineWithSource(
          <[ decl: 
            $(name : usesite)(..$functionParams) : $realReturnType
              $DefaultImplementation
          ]>);
      }
      
      // Finalize
      anonClass.Compile();
      <[ $(anonClass.Name : usesite) ]>
    }
  
    private ConvertType(prefix : string, inputType : option[TSType], typesScope : Scope) : PExpr
    {
      match(inputType)
      {
      | Some(type) => ConvertType(prefix, type, typesScope)
      | None => <[ object ]>
      }
    }
  
    private ConvertType(prefix : string, inputType : TSType, typesScope : Scope) : PExpr
    {
      match(inputType)
      {
      | Array(type, 0) => <[ $(ConvertType(prefix, type, typesScope)) ]>
      | Array(type, rank) => <[ array[$(ConvertType(prefix, TSType.Array(type, rank - 1), typesScope))] ]>
      | Bool => <[ bool ]>   
      | Lambda(parms, ret) =>
        mutable lambdaParams = GetParamsType(prefix, parms, typesScope);
        def type =
          if(ret is TSType.Void())
            <[ System.Action ]>
          else
          {
            lambdaParams = lambdaParams.Concat([ConvertType(prefix, ret, typesScope)]);
            <[ System.Func ]>
          };
        
        <[ $type.[..$lambdaParams] ]>
      | Named(name) => LookupTypeInScope(name, typesScope)
      | New(parms, returnType) =>
        CreateAnonymousType(prefix, [TSObject.Construct(parms, Some(returnType))], typesScope)
        
      | Number => <[ float ]>
      | Object(members) => CreateAnonymousType(prefix, members, typesScope)
      | String => <[ string ]>
      | Void => <[ void ]>
      | Any => <[ object ]>
      }
    }
    
    // <summary>
    // We cannot simply put type as is because it leads to compilation problems.
    // Assume following situation:
    // module A { export module B { export class C { y : number; } } }
    //
    // module X {
    //  export module A { export module B { export class C { x : number; } } }
    //	
    //  export var c : A.B.C;
    //}
    //
    // TypeScript behaves like C# and allows this code with choosing internal module.
    // We must do same lookup and find out all types starting from the current scope.
    // </summary>
    private LookupTypeInScope(name : string, scope : Scope) : PExpr
    {
      // Try finding type going up in hierarcy of scope.
      // TODO: Think about functional solution :)
      def scopeFullName = scope.FullNameParts.ToArray();
      for(mutable i = 0; i < scopeFullName.Length - 1; i++)
      {
        def qid = scopeFullName.Take(scopeFullName.Length - i).JoinDot() + "." + name;
        when(scope.LookupType(qid) is Some(type))
          return type;
      }
      
      // If type has not been found use name
      <[ $(name : usesite) ]>
    }
    
    private CreateModule(
      parts : list[string],
      outer : Scope,
      members : list[TSGlobal],
      types : bool,
      typeMembers : bool) : TypeBuilder
    {
      match (parts)
      {
      | [] => 
        if(outer.TypeBuilder != null) outer.TypeBuilder 
        else
        {
          Message.Error("List must not be empty");
          null
        }
        
      | [hd] =>
        // One part means we generate members
        // Generate partial module to simplify the code
        // Otherwise we need to lookup for type in case types == false
        def moduleType = outer.Define(<[ decl: [JSApi] public partial module $(hd : usesite) {} ]>);
        
        if(types)
          if(!typeMembers)
            GenerateTypes(Scope(moduleType), members);
          else
            GenerateTypesMembers(Scope(moduleType), members);            
        else
          GenerateOthers(Scope(moduleType), moduleType, members);
        
        moduleType
      
      | hd :: tl =>
        // If module consists from more than one part, first create all needed parts,
        // and then generate all members
        // Generate partial module to simplify the code
        // Otherwise we need to lookup for type in case types == false
        def innerModule = outer.Define(<[ decl: [JSApi] public partial module $(hd : usesite) {} ]>);
        def t = CreateModule(tl, Scope(innerModule), members, types, typeMembers);
        innerModule.Compile();
        t
      }
    }

    private FailedParsing(tsFile : string, text : string, pos : int) : void
    {
      def errorText =
        if(pos + 55 > text.Length)
          text.Substring(pos)
        else
          text.Substring(pos, 55);
      Message.Error(Location(tsFile, 1, 1, 1, 1), $"Failed to parse $tsFile, somewhere here: $errorText...");
    }
    
    #endregion
    
    #endif
    
  }
}
