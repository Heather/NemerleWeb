using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using TSParser.Ast;
using NemerleWeb;

namespace NemerleWeb
{  
  internal module GenerateTypedJSImpl
  {
    #region Implementation
    
    tsParser = TSDeclarationParser();
    
    public Impl(typer : Typer, options : list[PExpr]) : void
    {
      DefineCTX(typer);
      
      def args = ParseArgs(options);
      
      // Add assembly level attribute
      Manager().Hierarchy.AddAssemblyAttribute(
        Manager().CoreEnv,
        <[ NemerleWeb.JSApiRootAttribute($(args.Root : string)) ]>);
        
      // Add JSApi root
      _ = JSClassSettings.JSApiRoots.Add(args.Root);        
      
      // Step 1: PreParse
      def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
      def tsFilesToParse = PreParseTSAll(projectDir, args.Lib, args.Args);
      
      // Step 2: Parse
      def tsAsts = tsFilesToParse.SelectMany(ParseTS);
      
      // Step 3: Analyze
      def finalAst = TSAnalyzer.AnalyzeTSAst(tsAsts).ToList();
      
      // Step 4: Generate
      TSGenerator.GenerateCode(typer, args.Root, finalAst);
    }
    
    private ParseArgs(options : list[PExpr]) : GenerateArgs
    {
      match(options)
      {
      | [<[ Root = $(root : string) ]>, <[ Files = [..$files] ]> ] with lib = ""
      | [<[ Root = $(root : string) ]>, <[ Lib = $(lib : string) ]>, <[ Files = [..$files] ]>] =>
        // Convert PExpr sequence to regular type
        def filesArg =
          files.Select(
            f => match(f)
            {
            | <[ $(dir : string) ]> with exclude = ""
            | <[ ($(dir : string), $(exclude : string)) ]> => DirectoryArg(dir, exclude)
            | _ =>
              Message.Error("You must specify at most 1 or 2 arguments: directory and exclude pattern");
              null
            })
          .ToArray();
        GenerateArgs(root, lib, filesArg)
      | _ =>
        Message.Error("Specify Root, Files parameter and optional Lib. Files parameter must not be empty.");
        null
      }
    }
    
    #endregion
    
    #region PreParse
    
    private PreParseTSAll(projectDir : string, lib : string, args : IEnumerable[DirectoryArg]) : HashSet[string]
    {      
      def tsFilesToParse = HashSet();
      
      // Add lib if exists
      when(lib != "") _ = tsFilesToParse.Add(Path.Combine(projectDir, lib));
      
      // Resolve all references        
      foreach(arg in args)
      {
        def re = Regex(arg.Exclude);
        def isIncluded(s) { if (arg.Exclude == "") true else !re.IsMatch(s) }
      
        def fullDir = Path.Combine(projectDir, arg.Directory);          
        def tsFiles = Directory.EnumerateFiles(fullDir, "*.d.ts", SearchOption.AllDirectories);

        // Add all files and references, do not scan files twice.
        foreach(tsFile in tsFiles)
          when(isIncluded(tsFile) && tsFilesToParse.Add(tsFile))
           tsFilesToParse.UnionWith(PreParseTS(tsFile).Where(_ != ""))
      }
      
      tsFilesToParse
    } 
    
    private PreParseTS(tsFile : string) : IEnumerable[string]
    {
      def text =
        try
        {
          File.ReadAllText(tsFile);
        }
        catch
        {
          | e => Message.Hint($"Caught exception $e"); ""
        };
      when(text == "") yield "";
      
      match(tsParser.TryParse(text))
      {
      | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
        // Add file
        yield tsFile;
        
        // Check all references
        foreach(DeclarationElement.Reference(Reference.Lib(path)) in result)
        {
          def reference = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(tsFile), path));
          yield reference;
          
          foreach(r in PreParseTS(reference)) yield r;
        }
      | (pos, _) =>
        FailedParsing(tsFile, tsParser.ParsingSource.OriginalText, pos);
      }
    }
    
    #endregion   
    
    #region Parse
    
    private ParseTS(tsFile : string) : IEnumerable[DeclarationElement]
    {
      match(tsParser.TryParse(File.ReadAllText(tsFile)))
      {
      | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
        result
      | (pos, _) =>
        FailedParsing(tsFile, tsParser.ParsingSource.OriginalText, pos);
        []
      }
    }
    
    #endregion    
    
    private FailedParsing(tsFile : string, text : string, pos : int) : void
    {
      def errorText =
        if(pos + 55 > text.Length)
          text.Substring(pos)
        else
          text.Substring(pos, 55);
      Message.Error(Location(tsFile, 1, 1, 1, 1), $"Failed to parse $tsFile, somewhere here: $errorText...");
    }
  }

  #region Data types
  
  [Record]
  class DirectoryArg
  {    
    public Directory : string { get; }
    public Exclude : string { get; }
  }
  
  [Record]
  class GenerateArgs
  {
    public Root : string { get; }
    public Lib : string { get; }
    public Args : array[DirectoryArg] { get; }
  }
  
  #endregion
}
