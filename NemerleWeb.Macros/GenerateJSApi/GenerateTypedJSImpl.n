using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using TSParser.Ast;
using NemerleWeb;

namespace NemerleWeb
{  
  internal module GenerateTypedJSImpl
  {
    #region Implementation
    
    tsParser = TSDeclarationParser();
    
    public Impl(typer : Typer, options : list[PExpr]) : void
    {
      DefineCTX(typer);
      
      def args = ParseArgs(options);
      
      // Add assembly level attribute
      Manager().Hierarchy.AddAssemblyAttribute(
        Manager().CoreEnv,
        <[ NemerleWeb.JSApiRootAttribute($(args.Root : string)) ]>);
        
      // Add JSApi root
      _ = JSClassSettings.JSApiRoots.Add(args.Root);
      
      // Step 1: PreParse
      def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
      def tsFilesToParse = PreParseTSAll(projectDir, args.Libs, args.Args);
      
      // Step 2: Parse
      def tsAsts = tsFilesToParse.SelectMany(ParseTS).ToList();
      
      // Step 3: Analyze
      def finalAst = TSAnalyzer.AnalyzeTSAst(tsAsts);
      
      // Step 4: Generate
      TSGenerator.GenerateCode(typer, args.Root, finalAst);
    }
    
    private ParseArgs(options : list[PExpr]) : GenerateArgs
    {
      match(options)
      {
      | [<[ Root = $(root : string) ]>, <[ Files = [..$files] ]> ] with libs = []
      | [<[ Root = $(root : string) ]>, <[ Lib = $(lib : string) ]>, <[ Files = [..$files] ]>]
        with libs = [ <[ $(lib : string) ]> ]
      | [<[ Root = $(root : string) ]>, <[ Lib = [..$libs] ]>, <[ Files = [..$files] ]>] =>
        when (root.IsEmpty())
          Message.Error("Root must not be empty");
        
        // Convert PExpr sequence to regular type
        def filesArg =
          files.Select(
            f => match(f)
            {
            | <[ $(dir : string) ]> with exclude = ""
            | <[ ($(dir : string), $(exclude : string)) ]> =>
              DirectoryArg(dir, exclude)
            | _ =>
              Message.Error("You must specify at most 1 or 2 arguments: directory and exclude pattern");
              null
            })
          .ToArray();
          
        def libsArg =
          libs.Select(
            l => match(l)
            {
            | <[ $(lib : string) ]> => lib
            | _ =>
              Message.Error("Lib must be a string or a list of strings");
              null
            })
          .ToArray();
          
        GenerateArgs(root, libsArg, filesArg)
      | _ =>
        Message.Error("Specify Root, Files parameter and optional Lib. Files parameter must not be empty.");
        null
      }
    }
    
    #endregion
    
    #region PreParse
    
    private PreParseTSAll(
      projectDir : string,
      libs : IEnumerable[string],
      args : IEnumerable[DirectoryArg]) : HashSet[string]
    {      
      def tsFilesToParse = HashSet();
      
      // Add libs if specified
      foreach(lib when !lib.IsEmpty() in libs)
        _ = tsFilesToParse.Add(Path.Combine(projectDir, lib));
      
      // Resolve all references        
      foreach(arg in args)
      {
        def re = Regex(arg.Exclude);
        def isIncluded(s) { if (arg.Exclude == "") true else !re.IsMatch(s) }
      
        def fullDir = Path.Combine(projectDir, arg.Directory);
        try
        {
          def tsFiles = Directory.EnumerateFiles(fullDir, "*.d.ts", SearchOption.AllDirectories);

          // Add all files and references, do not scan files twice.
          foreach(tsFile in tsFiles)
            when(isIncluded(tsFile) && tsFilesToParse.Add(tsFile))
             tsFilesToParse.UnionWith(PreParseTS(tsFile).Where(_ != ""))
        }
        catch
        {
        | _ =>
          // Skip this directory
          ()
        }
      }
      
      tsFilesToParse
    } 
    
    private PreParseTS(tsFile : string) : IEnumerable[string]
    {
      def text =
        try
        {
          File.ReadAllText(tsFile);
        }
        catch
        {
          | e => Message.Hint($"Caught exception $e"); ""
        };
      
      if(text == "") yield "";
      else
        match(tsParser.TryParse(text))
        {
        | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
          // Add file
          yield tsFile;
          
          // Check all references
          foreach(DeclarationElement.Reference(Reference.Lib(path)) in result)
          {
            def reference = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(tsFile), path));
            yield reference;
            
            foreach(r in PreParseTS(reference)) yield r;
          }
        | (pos, _) =>
          FailedParsing(tsFile, tsParser.ParsingSource.OriginalText, pos);
        }
    }
    
    #endregion   
    
    #region Parse
    
    private ParseTS(tsFile : string) : IEnumerable[DeclarationElement]
    {
      try
      {
        def text = File.ReadAllText(tsFile);
        
        match(tsParser.TryParse(text))
        {
        | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
          result
        | (pos, _) =>
          FailedParsing(tsFile, tsParser.ParsingSource.OriginalText, pos);
          List()
        }
      }
      catch
      {
      | e => Message.Hint($"Caught exception $e"); List()
      }
    }
    
    private FailedParsing(tsFile : string, text : string, pos : int) : void
    {
      def errorText =
        if(pos + 55 > text.Length)
          text.Substring(pos)
        else
          text.Substring(pos, 55);
      Message.Warning(Location(tsFile, 1, 1, 1, 1), $"Failed to parse $tsFile, somewhere here: $errorText...");
    }
    
    #endregion
  }

  #region Data types
    
  [Record]
  class DirectoryArg
  {    
    public Directory : string { get; }
    public Exclude : string { get; }
  }
    
  [Record]
  class GenerateArgs
  {
    public Root : string { get; }
    public Libs : array[string] { get; }
    public Args : array[DirectoryArg] { get; }
  }
    
  #endregion
}
