using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using TSParser.Ast;
using NemerleWeb;

namespace NemerleWeb
{
  /// <summary>
  /// Description of TSAnalyzer.
  /// </summary>
  internal module TSAnalyzer
  {
    /// <summary>
    /// Take all elements and remove duplicates
    /// </summary>
    public AnalyzeTSAst([NotNull] tsAsts : List[DeclarationElement]) : List[DeclarationElement]
    {
      tsAsts.Where(FilterAst).GroupBy(GroupAst).SelectMany(SelectAst).ToList()
    }
    
    private FilterAst(ast : DeclarationElement) : bool
    {
      | DeclarationElement.InterfaceDeclaration => true
      | DeclarationElement.AmbientDeclaration(v) =>
        match(v)
        {
        | AmbientDeclaration.VariableDeclaration
        | AmbientDeclaration.FunctionDeclaration
        | AmbientDeclaration.ClassDeclaration   
        | AmbientDeclaration.EnumDeclaration 
        | AmbientDeclaration.ModuleDeclaration  => true             
        | _ => false
        }
      | _ => false
    }
    
    private GroupAst(ast : DeclarationElement) : list[Type] * string
    {
      | DeclarationElement.InterfaceDeclaration(v) => ([ast.GetType()], v.Name)
      | DeclarationElement.AmbientDeclaration(ambient) =>
        def name =
          match(ambient)
          {
          | AmbientDeclaration.VariableDeclaration(v) => v.Name
          | AmbientDeclaration.FunctionDeclaration(v) => v.Name
          | AmbientDeclaration.ClassDeclaration   (v) => v.Name
          | AmbientDeclaration.EnumDeclaration    (v) => v.Name
          | AmbientDeclaration.ModuleDeclaration  (v) => v.Name
          | _ => throw Exception()
          };
          
        ([ast.GetType(), ambient.GetType()], name)
      | _ => throw Exception()
    }
    
    private SelectAst(typeAndNameGroup : IGrouping[list[Type] * string, DeclarationElement]) :
      IEnumerable[DeclarationElement]
    {
      def types = typeAndNameGroup.Key[0];
      match(types)
      {
      | [type] when type.Equals(typeof(DeclarationElement.InterfaceDeclaration)) =>
          AnalyzeInterface(
            typeAndNameGroup
              .Cast.[DeclarationElement.InterfaceDeclaration]()
              .Select(i => i.Value))
          .Select(i => DeclarationElement.InterfaceDeclaration(i))
          
      | [type, ambientType] when type.Equals(typeof(DeclarationElement.AmbientDeclaration)) =>
        def ambientGroup = typeAndNameGroup.Cast.[DeclarationElement.AmbientDeclaration]().Select(v => v.Value);
      
        match(ambientType)
        {
        | type when type.Equals(typeof(AmbientDeclaration.VariableDeclaration)) =>          
          AnalyzeVariable(
            ambientGroup
              .Cast.[AmbientDeclaration.VariableDeclaration]()
              .Select(a => a.Value))
            .Select(f => DeclarationElement.AmbientDeclaration(AmbientDeclaration.VariableDeclaration(f)))
      
        | type when type.Equals(typeof(AmbientDeclaration.FunctionDeclaration)) =>
          AnalyzeFunction(
            ambientGroup
              .Cast.[AmbientDeclaration.FunctionDeclaration]()
              .Select(a => a.Value))
            .Select(f => DeclarationElement.AmbientDeclaration(AmbientDeclaration.FunctionDeclaration(f)))
          
        | type when type.Equals(typeof(AmbientDeclaration.ClassDeclaration)) =>
          AnalyzeСlass(
            ambientGroup
              .Cast.[AmbientDeclaration.ClassDeclaration]()
              .Select(c => c.Value))
          .Select(c => DeclarationElement.AmbientDeclaration(AmbientDeclaration.ClassDeclaration(c)))
        
        | type when type.Equals(typeof(AmbientDeclaration.EnumDeclaration)) =>
          AnalyzeEnum(
            ambientGroup
              .Cast.[AmbientDeclaration.EnumDeclaration]()
              .Select(c => c.Value))
          .Select(c => DeclarationElement.AmbientDeclaration(AmbientDeclaration.EnumDeclaration(c)))
      
        | type when type.Equals(typeof(AmbientDeclaration.ModuleDeclaration)) =>
          AnalyzeModule(
            ambientGroup
              .Cast.[AmbientDeclaration.ModuleDeclaration]()
              .Select(m => m.Value))
          .Select(m => DeclarationElement.AmbientDeclaration(AmbientDeclaration.ModuleDeclaration(m)))
          
        // By default take first and skip others        
        | _ => [DeclarationElement.AmbientDeclaration(ambientGroup.First())]
        }
      // By default take first and skip others        
      | _ => [typeAndNameGroup.First()]
      }
    }
        
    /// <summary>
    /// Input:
    /// interface A : X&lt;XX&gt; { a : number; b : string; }
    /// interface A : Y&lt;YY&gt; , X&lt;XX&gt; { a : number; }
    ///
    /// Output:
    /// interface A : X&lt;XX&gt;, Y&lt;YY&gt; { a : number; b : string; }
    /// </summary>
    private AnalyzeInterface(ast : IEnumerable[InterfaceDeclaration]) : IEnumerable[InterfaceDeclaration]
    {
      def name = ast.First().Name;
      
      def typeParameters = ast.SelectMany(x => x.TypeParameters).Distinct().NToList();      
      def extends = ast.SelectMany(x => x.Extends).Distinct().NToList();
      
      def members = ast
        .SelectMany(x => x.Type.Members.SelectMany(AnalyzeScriptObject))
        .Distinct()
        .NToList();
      
      def @type = ScriptType.Object(members);
        
      yield InterfaceDeclaration(name, typeParameters, extends, @type)
    }
    
    private AnalyzeScriptObject(obj : ScriptObject) : IEnumerable[ScriptObject]
    {
      | ScriptObject.Call(value) => 
        GenerateOverloads(value).Select(ScriptObject.Call)
    
      | ScriptObject.Construct(value) =>
        GenerateOverloads(value).Select(ScriptObject.Construct)
        
      | ScriptObject.Method(value) =>
        GenerateOverloads(value.Signature)
        .Select(sig => ScriptObject.Method(Method(value.Name, value.Optional, sig)))
      
      | ScriptObject.Index
      | ScriptObject.Property
      | _ => [obj]
    }
    
    private AnalyzeСlass(ast : IEnumerable[AmbientClassDeclaration]) : IEnumerable[AmbientClassDeclaration]
    {
      def name = ast.First().Name;
      
      def typeParameters = ast
        .SelectMany(x => x.TypeParameters)
        .Distinct()
        .NToList();
      
      // Extends can be only once
      def firstExtends = ast.FirstOrDefault(c => c.Heritage.Base.IsSome);
      def firstExtends = if (firstExtends != null) firstExtends.Heritage.Base else None();      
      
      // Implements is not limited
      def @implements = ast
        .SelectMany(x => x.Heritage.Interfaces)
        .Distinct()
        .NToList();
      
      def members = ast
        .SelectMany(x => x.Members.SelectMany(AnalyzeClassElement))
        .Distinct()
        .NToList();
      
      yield AmbientClassDeclaration(
        name,
        typeParameters,
        ClassHeritage(firstExtends, @implements),
        members);
    }
    
    private AnalyzeClassElement(elem : AmbientClassBodyElement) : IEnumerable[AmbientClassBodyElement]
    {
      | AmbientClassBodyElement.Constructor(parms) => 
        GenerateOverloads(CallSignature([], parms, None()))
        .Select(sig => AmbientClassBodyElement.Constructor(sig.Parameters))
    
      | AmbientClassBodyElement.Method(name, signature, access, @static) =>
        GenerateOverloads(signature)
          .Select(sig => AmbientClassBodyElement.Method(name, sig, access, @static))
        
      | AmbientClassBodyElement.Index
      | AmbientClassBodyElement.Property
      | _ => [elem]
    }
    
    private AnalyzeEnum(ast : IEnumerable[AmbientEnumDeclaration]) : IEnumerable[AmbientEnumDeclaration]
    {
      def name = ast.First().Name;
      
      def members = ast
        .SelectMany(x => x.Members)
        .Distinct()
        .NToList();
      
      yield AmbientEnumDeclaration(name, members)
    }
    
    /// <summary>
    /// Select first and generate overloads
    /// </summary>
    private AnalyzeVariable(ast : IEnumerable[AmbientVariableDeclaration]) : IEnumerable[AmbientVariableDeclaration]
    {
      def first = ast.First();
      def name = first.Name;
     
      match (first.Type)
      {
      | Some(Object(value)) =>
        def members = value.SelectMany(v => AnalyzeScriptObject(v)).Distinct().NToList();
        [AmbientVariableDeclaration(
          name,
          Some(ScriptType.Object(members)))]
        
      | _ => [AmbientVariableDeclaration(name, first.Type)]
      }
    }
         
    /// <summary>
    /// Select all dictinct function overloads
    /// </summary>
    private AnalyzeFunction(ast : IEnumerable[AmbientFunctionDeclaration]) : IEnumerable[AmbientFunctionDeclaration]
    {
      def name = ast.First().Name;
      
      def ret = ast
        .SelectMany(f =>
          GenerateOverloads(f.Signature).Select(s => AmbientFunctionDeclaration(name, s)))
        .Distinct();
        
      ret
    }
    
    private AnalyzeModule(ast : IEnumerable[AmbientModuleDeclaration]) : IEnumerable[AmbientModuleDeclaration]
    {
      def name = ast.First().Name;
      def members = ast.First().Members;
      //ast
        //.SelectMany(a => a.Members)
        //.NToList();
      
      def ret = AmbientModuleDeclaration(name, members);
      [ret];
    }
    
    #region Function overloads
    
    private GenerateOverloads(signature : CallSignature) : IEnumerable[CallSignature]
    {
      def res = GenerateLambdaOverloads(signature);
      def res = res.SelectMany(s => GenerateOverloadsImpl(s));
      
      res
    }
    
    private GenerateOverloadsImpl(signature : CallSignature) : IEnumerable[CallSignature]
    {
      GenerateOverloadsList(
        signature.TypeParameters,
        signature.Parameters,
        signature.ReturnType)
    }
    
    /// <summary>
    /// Create all possible overloads according to the rules
    /// Go through all parameters and start generating overloads if needed    
    /// </summary>
    private GenerateOverloadsList(
      typeParams : list[ScriptTypeParameter],
      parms : list[ScriptParameter],
      returnType : option[ScriptType]) : IEnumerable[CallSignature]
    {
      when(!(parms is []))
      {
        def revParms = parms.Reverse();
        match(revParms.Head)
        {
        | Optional(_, _, _, true) 
        | Rest =>
          def returnTypeParametersUsed =
            if(returnType is Some(r))
              GetScriptTypeTypes(r)
            else
              [];
        
          // Process all without last parameter
          def newParams = revParms.Tail;
          
          // Collect all types that are used
          def newParamsTypes = CollectParametersTypes(newParams)
            .Concat(returnTypeParametersUsed)
            .Distinct();
          
          // Only used types from type parameters are needed
          def newTypeParams = typeParams.Filter(tyParam => newParamsTypes.Contains(tyParam.Name));
          
          foreach(res in GenerateOverloadsList(newTypeParams, revParms.Tail, returnType)) yield res;
          
        | _ => ()
        }
      }
      
      // Generate current parameters and stop
      yield CallSignature(typeParams, parms, returnType);
    }
    
    /// <summary>
    /// Generate lambda arguments and create additional ?->void overload if return type is any.
    /// </summary>
    private GenerateLambdaOverloads(signature : CallSignature) : IEnumerable[CallSignature]
    { 
      // For any lambda parameter return any type, return list of two possibilities:
      // one with any return type, second with void return type.
      def process(x)
      {
        | ScriptParameter.Required(
            RequiredParameter.Regular(
              _,
              Some(
                ScriptType.Function(
                  ScriptTypeCallSignature(typ, parms, ScriptType.Any()))), _) as p) =>
          
          [
            x,
            ScriptParameter.Required(
              RequiredParameter.Regular(
                p.Name,
                Some(ScriptType.Function(ScriptTypeCallSignature(typ, parms, ScriptType.Void()))),
                p.Access))
          ]
          
        | ScriptParameter.Optional(
              _,
              Some(ScriptType.Function(ScriptTypeCallSignature(typ, parms, ScriptType.Any()))),
              _,
              _) as p =>
          
          [
            x,
            ScriptParameter.Optional(
              p.Name,
              Some(ScriptType.Function(ScriptTypeCallSignature(typ, parms, ScriptType.Void()))),
              p.Access,
              p.Optional)
          ]
        
        | ScriptParameter.Rest(
            _,
            Some(
              ScriptType.Array(
                ScriptType.Function(
                  ScriptTypeCallSignature(typ, parms, ScriptType.Any())), _) as a)) as p =>
          [
            x,
            ScriptParameter.Rest(
              p.Name,
              Some(
                ScriptType.Array(
                  ScriptType.Function(
                    ScriptTypeCallSignature(typ, parms, ScriptType.Void())),
                    a.Rank)))
          ]
                

        | ScriptParameter.Rest(
            _,
            Some(
              ScriptType.Ref(
                "Array",
                [ScriptType.Function(ScriptTypeCallSignature(typ, parms, ScriptType.Any()))]))) as p =>
                
          [
            x,
            ScriptParameter.Rest(
              p.Name,
              Some(
                ScriptType.Ref(
                  "Array",
                  [ScriptType.Function(
                    ScriptTypeCallSignature(typ, parms, ScriptType.Void()))])))
          ]
              
        | _ => [x]
      }
      
      def parametersList = GenerateListPermutation(signature.Parameters, process);
      parametersList.Select(parms => CallSignature(signature.TypeParameters, parms, signature.ReturnType))
    }
    
    private GenerateListPermutation[T](l : list[T], f : T -> list[T]) : list[list[T]]
    { 
      l.Map(f).FoldRight([[]], (m, acc) => m.Map(e => acc.Map(a => e :: a)).Flatten())
    }
    
    #endregion
    
    #region Types collection
    
    private GetObjectTypes(obj : option[ScriptObject]) : IEnumerable[string]
    {
      | Some(o) => GetObjectTypes(o)
      | _ => []
    }
    
    private GetObjectTypes(obj : ScriptObject) : IEnumerable[string]
    {
      | Property(value) => if(value.Type is Some(t)) GetScriptTypeTypes(t) else []
      | Call(signature) => GetCallSignatureTypes(signature)
      | Construct(value) => 
        GetCallSignatureTypes(
          value.TypeParameters,
          value.Parameters,
          GetScriptTypeTypes(value.ReturnType))
      | Index(value) => GetScriptTypeTypes(value.ReturnType)
      | Method(value) => GetCallSignatureTypes(value.Signature)
    }
    
    private GetCallSignatureTypes(signature : ScriptTypeCallSignature) : IEnumerable[string]
    {
      GetCallSignatureTypes(
        signature.TypeParameters,
        signature.Parameters,
        GetScriptTypeTypes(signature.ReturnType))
    }
    
    private GetCallSignatureTypes(signature : CallSignature) : IEnumerable[string]
    {
      GetCallSignatureTypes(
        signature.TypeParameters,
        signature.Parameters,
        GetScriptTypeTypes(signature.ReturnType))
    }
    
    private GetCallSignatureTypes(
      typeParameters : list[ScriptTypeParameter],
      parameters : list[ScriptParameter],
      returnTypes : IEnumerable[string]) : IEnumerable[string]
    {
      def paramsTypes = CollectParametersTypes(parameters);          
      def tyParameters = typeParameters.Select(_.Name);
        
      returnTypes.Union(paramsTypes).Except(tyParameters)
    }
    
    private GetScriptTypeTypes(type : option[ScriptType]) : IEnumerable[string]
    {
      if(type is Some(t)) GetScriptTypeTypes(t) else []
    }
    
    // Collect types recursively
    private GetScriptTypeTypes(type : ScriptType) : IEnumerable[string]
    {
      | Array(t, _) => GetScriptTypeTypes(t)
      | Function(signature) => GetCallSignatureTypes(signature)
      | Object(members) => members.SelectMany(GetObjectTypes)        
      | Ref(name, tyArgs) => [name].Union(tyArgs.SelectMany(GetScriptTypeTypes))        
      | _ => []
    }
    
    /// <summary>
    /// Collects all named types.
    /// Predefined types are not collected.
    /// </summary>
    private CollectParametersTypes(parms : list[ScriptParameter]) : IEnumerable[string]
    {
      parms.SelectMany(param =>
        match(param)
        {
        | ScriptParameter.Required(Regular(_, Some(type), _))
        | ScriptParameter.Optional(_, Some(type), _, _)
        | ScriptParameter.Rest(_, Some(type)) =>
          GetScriptTypeTypes(type)
        | _ => []
        })
    }
    
    #endregion
  }
}
