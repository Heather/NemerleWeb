using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Converts all fields to be 'public mutable'.
  /// </summary>
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro Dto(typeBuilder : TypeBuilder)
  {
    DtoImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder)
  }
    
  module DtoImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);         
            
      def toAdd = NemerleModifiers.Public | NemerleModifiers.Mutable;
      def toRemove =
        NemerleModifiers.Private |
        NemerleModifiers.Protected |
        NemerleModifiers.Internal;      
      
      DataMacroHelper.ChangeFieldsAccess(typeBuilder, toAdd, toRemove);
      
      typeBuilder.AddMacroAttribute(<[ Nemerle.Core.Record ]>);     
      
      // Add default constructor if doesn't exist
      def ctors = typeBuilder.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic);
      when(!ctors.Any(c => c.Header.Parameters is []))
      {
        _ = typeBuilder.DefineWithSource(<[decl: public this() {} ]>);
      }
    }
  }
}
