using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  macro NWebMacro(expr) 
  syntax("NWeb", expr)
  {
    def typer = Macros.ImplicitCTX();
    if(!typer.Manager.IsIntelliSenseMode)
      NwebImpl.TransformNweb(expr, typer);
    else
      <[ "" ]>
  }
    
  public module NwebImpl
  {
    public TransformNweb(expr : PExpr, typer : Typer) : PExpr 
    {          
      match(expr)
      {
      | <[ $_unitName() ]> with parms = []
      | <[ $_unitName(..$parms) ]> =>             
        def typedParms = parms.Map(typer.TypeExpr);
        def signature = JSAstHelper.MethodSignature(typedParms);
        
        def properName = JSClass.GetProperName(typer.TypeExpr(expr).Type.TypeInfo);        
        def serverParams = parms.Select(p => <[ paramList.Add("nweb.utils.toTypedObject(" + NWebUtils.ToJson($p) + ")") ]>);
        
        def res = <[
          NemerleWebInitializer.Initialize();
          
          def scripts = NemerleWeb.NWebData.GetScripts();
          def templates = NemerleWeb.NWebData.GetTemplates();
          def resources = NemerleWeb.NWebData.GetNemerleWebScripts();
    
          def declarations = string.Join("\n", templates.Concat(scripts));
          def unitName = $(properName : string);
          def paramList = List();
          paramList.Add($signature);
          {..$(serverParams.NToList())}
          def callParms = string.Join(",", paramList);

$<#
<div id="nweb-start"></div>
$resources
$declarations
<script>
$$(function() {  
  nweb.go(new $unitName($callParms));
});
</script>
#>
      ]>;
      res
      | _ => Message.Error("Correct usage: NWeb ClassName(arguments)"); <[ ]>
      }      
    }
  } 
}
