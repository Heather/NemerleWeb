using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.IO;

using System;
using System.Linq;
using System.Xml;
using System.Collections.Generic;

namespace NemerleWeb
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  public macro Html(_tb : TypeBuilder, mb : ParsedMethod)
  {
    HtmlImpl.ToXLinq(Nemerle.Macros.ImplicitCTX(), mb)
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  public macro Html(_tb : TypeBuilder, mb : MethodBuilder)
  {
  }
  
  macro tag_macro (name, body) 
  syntax ("tag_macro", "(", name, body, ")") {
    <[ 
      tag_impl($name, $body)
    ]>
  }
  
  macro attr_macro (name, value) 
  syntax ("attr_macro", "(", name, value, ")") {
    <[ 
      attr_impl($name, $value)
    ]>
  }
  
  macro text_macro (name, value) 
  syntax ("text_macro", "(", name, value, ")") {
    <[ 
      text_impl($name, $value)
    ]>
  }
  
  internal module HtmlImpl
  {
    internal ToXLinq(typer : Typer, mb : ClassMember.Function) : void
    {
      Macros.DefineCTX(typer);
       
      JSClass.IEnumerableType = <[ ttype : System.Collections.IEnumerable ]>;
      JSClass.StringType = <[ ttype : System.String ]>;
      JSClass.IPageType = <[ ttype: IPage ]>;
      JSClass.ObjectType = <[ ttype: System.Object ]>;
      
      match (mb.body)
      {
      | FunBody.Parsed(PExpr.Sequence([PExpr.Literal(Literal.String(str)) as lit]))
      | FunBody.Parsed(PExpr.Literal(Literal.String(str)) as lit) =>
      
        if (str.IsEmpty()) 
        {
          Message.FatalError(mb.Location, "You must write html string.");
        }
        else
        {
          def litLoc = lit.Location;
          def loc = Location(litLoc.FileIndex, litLoc.Line, litLoc.Column + 2, litLoc.EndLine, litLoc.EndColumn - 2);
          def parser = XmlQuotParser(loc, str);

          _ = match (parser.Parse(str))
          {
          | Some(result) => XmlAstToXLinq(typer, parser).Transform(result)              
          | _ =>
            def (pos, expected) = parser.GetMaxRollbackPosAndNames();
            def msg = if (expected.IsEmpty()) "Unexpected character."
                      else if (expected.Count == 1) $"Expected $(expected.Last())";
                      else $"Expected ..$(expected.Take(expected.Count -1)) $(expected.Last())";
          
            Message.FatalError(parser.ToLocation(pos, pos + 1), msg)
          }
        }
      | FunBody.Abstract => Message.FatalError("Abstract method is not supported")
      | _ => Message.FatalError(mb.header.Location, "You must return XML literal string.")
      }
    }    
  }
}
