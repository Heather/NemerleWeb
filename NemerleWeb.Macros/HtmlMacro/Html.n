using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.IO;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using System.Xml;
using System.Collections.Generic;

namespace NemerleWeb
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  public macro Html(_tb : TypeBuilder, mb : ParsedMethod)
  {
    HtmlImpl.ToXLinq(Nemerle.Macros.ImplicitCTX(), mb)
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  public macro HtmlTyped(_tb : TypeBuilder, mb : MethodBuilder)
  {
    HtmlImpl.FromTypedToString(Nemerle.Macros.ImplicitCTX(), mb)
  }
  
  internal module HtmlImpl
  {
    internal ToXLinq(typer : Typer, mb : ClassMember.Function) : void
    {
      Macros.DefineCTX(typer);
       
      JSClass.IEnumerableType = <[ ttype : System.Collections.IEnumerable ]>;
      JSClass.StringType = <[ ttype : System.String ]>;
      JSClass.IPageType = <[ ttype: IPage ]>;
      JSClass.ObjectType = <[ ttype: System.Object ]>;
      
      match (mb.body)
      {
      | FunBody.Parsed(PExpr.Sequence([PExpr.Literal(Literal.String(str)) as lit]))
      | FunBody.Parsed(PExpr.Literal(Literal.String(str)) as lit) =>
      
        if (str.IsEmpty()) 
        {
          Message.FatalError(mb.Location, "You must write html string.");
        }
        else
        {
          def litLoc = lit.Location;
          def loc = Location(litLoc.FileIndex, litLoc.Line, litLoc.Column + 2, litLoc.EndLine, litLoc.EndColumn - 2);
          def parser = XmlQuotParser(loc, str);

          _ = match (parser.Parse(str))
          {
          | Some(result) => 
            def pexpr = JSAstBuilder.SubstituteLambdas(XmlAstToXLinq(typer, parser).Transform(result));
            def tempMethodName = Name("__n__" + mb.Name);
            typer.CurrentTypeBuilder.Define(<[ decl:
              [HtmlTyped]
              public $(tempMethodName : name)() : list[string] {
                def tag(name, expr) : string { "" }
                def attr(name, expr) : string { "" }
                def attr_splice(name, expr) : string { "" }
                def text(expr) : string { "" }
                def text_splice(expr) : string { "" }
                
                $pexpr
              }
            ]>);
          | _ =>
            def (pos, expected) = parser.GetMaxRollbackPosAndNames();
            def msg = if (expected.IsEmpty()) "Unexpected character."
                      else if (expected.Count == 1) $"Expected $(expected.Last())";
                      else $"Expected ..$(expected.Take(expected.Count -1)) $(expected.Last())";
          
            Message.FatalError(parser.ToLocation(pos, pos + 1), msg)
          }
        }
      | FunBody.Abstract => Message.FatalError("Abstract method is not supported")
      | _ => Message.FatalError(mb.header.Location, "You must return XML literal string.")
      }
    }    
    
    internal FromTypedToString(typer : Typer, mb : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      
      def htmlFromTExpr(expr, indent) : string {
        match(expr) {
        | TExpr.Block(_, body) => htmlFromTExpr(body, indent)
        | TExpr.Label(_, body) => htmlFromTExpr(body, indent)
        | TExpr.TypeConversion(expr, _, _, _) => htmlFromTExpr(expr, indent)
        | Call(StaticRef(lst, mem, _), parms, _) 
          when lst.TypeInfo.FullName == "Nemerle.Core.Cons[T]" && mem.Name == ".ctor" =>
          string.Join("", parms.Map(p => htmlFromTExpr(p.expr, indent)));
          
        | StaticRef(lst, mem, _) 
          when lst.TypeInfo.FullName == "Nemerle.Core.Nil[T]" && mem.Name == "_N_constant_object" =>         
          ""
          
        | Call(StaticRef(_, mem, _), [Parm(_, Literal(Literal.String(tagName)), _, _), tagExprExpr], _) when mem.Name.StartsWith("_N_tag_") => 
          assert2(false);
          def (attrs, children) = match(tagExprExpr.expr) {
          | Tuple([attrs, tags]) => 
            def a = htmlFromTExpr(attrs, indent);
            def t = htmlFromTExpr(tags, indent + "  ");
            (a, t)
          | _ => assert2(false); ("", "");
          }
        
          indent + $"<$(tagName) $attrs>$children</$(tagName)>"
        
        | Call(StaticRef(_, mem, _), [textExprExpr], _) when mem.Name.StartsWith("_N_text_splice_") => 
          def splice = JSAstBuilder.BuildJSAst(textExprExpr.expr, false, mb.Header).Write();
          def splice = splice.Trim(array['\"']);
          $"<span nw-text=\"$splice\" />"        
        
        | Call(StaticRef(_, mem, _), [Parm(_, Literal(Literal.String(textValue)), _, _)], _) 
          when mem.Name.StartsWith("_N_text_") => 
          indent + textValue
        
        | Call(StaticRef(_, mem, _), [Parm(_, Literal(Literal.String(attrName)), _, _), attrExprExpr], _) 
          when mem.Name.StartsWith("_N_attr_splice") => 
          assert2(false);
          def attrSplice = JSAstBuilder.BuildJSAst(attrExprExpr.expr, false, mb.Header).Write();
          $"nw-$attrName=\"$attrSplice\""
        | Call(StaticRef(_, mem, _), [Parm(_, Literal(Literal.String(attrName)), _, _), Parm(_, Literal(Literal.String(attrValue)), _, _)], _) 
          when mem.Name.StartsWith("_N_attr_") => 
          assert2(false);
          $"$attrName=\"$attrValue\""
        
        | _ => 
          //assert2(false); 
          ""
        }
      }
      
      def texpr = TyperHelper.GetTypedBody(mb, typer, typer.CurrentTypeBuilder, true);
      def html = htmlFromTExpr(texpr, "");
      _ = html;
    }
  }
}
