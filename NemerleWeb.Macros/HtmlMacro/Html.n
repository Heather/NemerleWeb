using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.IO;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using System.Xml;
using System.Collections.Generic;

namespace NemerleWeb
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  public macro Html(tb : TypeBuilder, mb : ParsedMethod) : void
  {
    unless(tb.Manager.IsIntelliSenseMode)
      HtmlImpl.ToXLinq(Nemerle.Macros.ImplicitCTX(), mb);
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  public macro HtmlTyped(tb : TypeBuilder, mb : MethodBuilder) : void
  {
    unless(tb.Manager.IsIntelliSenseMode)
      HtmlImpl.FromTypedToString(Nemerle.Macros.ImplicitCTX(), mb);
  }
  
  internal module HtmlImpl
  {
    internal ToXLinq(typer : Typer, mb : ClassMember.Function) : void
    {
      Macros.DefineCTX(typer);
       
      JSClass.IEnumerableType = <[ ttype : System.Collections.IEnumerable ]>;
      JSClass.StringType = <[ ttype : System.String ]>;
      JSClass.IPageType = <[ ttype: IPage ]>;
      JSClass.ObjectType = <[ ttype: System.Object ]>;
            
      match (mb.body)
      {
      | FunBody.Parsed(PExpr.Sequence([PExpr.Literal(Literal.String(str)) as lit]))
      | FunBody.Parsed(PExpr.Literal(Literal.String(str)) as lit) =>
      
        if (str.IsEmpty()) 
        {
          Message.FatalError(mb.Location, "You must write html string.");
        }
        else
        {
          def litLoc = lit.Location;
          def loc = Location(litLoc.FileIndex, litLoc.Line, litLoc.Column + 2, litLoc.EndLine, litLoc.EndColumn - 2);
          def parser = XmlQuotParser(loc, str);

          _ = match (parser.Parse(str))
          {
          | Some(result) => 
            def pexpr = XmlAstToXLinq(typer, parser).Transform(result);
            def tempMethodName = Name("_N_" + mb.Name);
            typer.CurrentTypeBuilder.Define(<[ decl:
              [HtmlTyped]
              public $(tempMethodName : name)() : list[object] {
                def tag(name, expr : object) : object { (name, expr) };
                def attr(name, expr : object) : object { (name, expr) };
                def attr_splice(name, expr : object) : object { (name, expr) };
                def text(expr : object) : object { expr };
                def text_splice(expr : object) : object { expr };
                
                def skip = {
                  _ = tag("", ([], []));
                  _ = attr("", null);
                  _ = attr_splice("", null);
                  _ = text(null);
                  _ = text_splice(null);
                };
                _ = skip;
                
                $pexpr
              }
            ]>);
          | _ =>
            def (pos, expected) = parser.GetMaxRollbackPosAndNames();
            def msg = if (expected.IsEmpty()) "Unexpected character."
                      else if (expected.Count == 1) $"Expected $(expected.Last())";
                      else $"Expected ..$(expected.Take(expected.Count -1)) $(expected.Last())";
          
            Message.FatalError(parser.ToLocation(pos, pos + 1), msg)
          }
        }
      | FunBody.Abstract => Message.FatalError("Abstract method is not supported")
      | _ => Message.FatalError(mb.header.Location, "You must return XML literal string.")
      }
    }    
    
    internal FromTypedToString(typer : Typer, mb : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      
      def escape(expr : string) : string{
        def expr = if(expr.StartsWith("\"") && expr.EndsWith("\"")) expr.Trim('\"') else expr;
        def expr = if(expr.StartsWith("(") && expr.EndsWith(")")) expr.Substring(1, expr.Length - 2) else expr;
        def expr = if(expr.EndsWith(";")) expr.Substring(0, expr.Length - 1) else expr;
        expr.Replace("\"", "'");
      }      
      
      def getAstString(expr : TExpr) : string {
        def (ast, addedReturn) = JSAstBuilder.BuildJSAstForSplices(typer.CurrentType.FullName, expr, mb.Header);        
        def res = if(addedReturn) ast.Write() else "$" + ast.Write();
        res.Replace("\r\n", "")
      }
      
      def getLocalValueName(lv) {
        lv.Name + "_" + lv.Id.ToString()
      }
          
      def htmlFromTExpr(expr : TExpr, indent : string) : string {
        match(expr) {
        | TExpr.Block(_, body) => htmlFromTExpr(body, indent)
        | TExpr.Label(_, body) => htmlFromTExpr(body, indent)
        | TExpr.TypeConversion(expr, _, _, _) => htmlFromTExpr(expr, indent)
        | Call(StaticRef(lst, mem, _), parms, _) 
          when lst.TypeInfo.FullName == "Nemerle.Core.Cons[T]" && mem.Name == ".ctor" =>
          string.Join(" ", parms.Map(p => htmlFromTExpr(p.expr, indent)));
          
        | StaticRef(lst, mem, _) 
          when lst.TypeInfo.FullName == "Nemerle.Core.Nil[T]" && mem.Name == "_N_constant_object" =>         
          ""
          
        | Call(LocalFunRef(decl, _), [Parm(_, Literal(Literal.String(tagName)), _, _), tagExprExpr], _) when decl.Name == "tag" =>           
          
          def (attrs, children) = 
            match(tagExprExpr.expr) 
            {
            //foreach(x in xs)
            | DefValIn(_, val, DefValIn(loopValName, _, Tuple([attrs, childTags]))) =>              
              def foreachEnum = 
                  "nw-foreach=\"" + getLocalValueName(loopValName) + " in " + escape(getAstString(val)) + "\" ";
              (foreachEnum + htmlFromTExpr(attrs, indent), 
               htmlFromTExpr(childTags, indent + "  "))
            //foreach((x0, x1) in xs)
            | DefValIn(_, val, Match(_, [case])) => 
              match(case.patterns) {
              | [(Pattern.Tuple(args), _, _)] => 
                match(case.body)
                {
                | TypeConversion(Tuple([attrs, childTags]), _, _, _) => 
                  def values = args.OfType.[Pattern.As]().Select(a => $<#&quot;$(getLocalValueName(a.decl))&quot;#>);
                  def foreachEnum = $<#nw-foreach="[..$values] in $(escape(getAstString(val)))" #>;
                  (foreachEnum + htmlFromTExpr(attrs, indent), htmlFromTExpr(childTags, indent + "  "))
                | _ => assert2(false); ("", "")
                }
              | _ => assert2(false); ("", "")
              }              
            | Tuple([attrs, childTags]) =>
              (htmlFromTExpr(attrs, indent), 
               htmlFromTExpr(childTags, indent + "  "))
            | _ => assert2(false); ("", "");
            }
        
          indent + $"<$(tagName) $attrs>$children</$(tagName)>";
        
        | Call(LocalFunRef(decl, _), [textExprExpr], _) when decl.Name == "text_splice" => 
          def splice = getAstString(textExprExpr.expr);
          def splice = escape(splice.Trim(array['\"']));
          $"<span nw-text=\"$splice\" />"
        
        | Call(LocalFunRef(decl, _), [Parm(_, Literal(Literal.String(textValue)), _, _)], _) 
          when decl.Name == "text" => 
          indent + textValue
        
        | Call(LocalFunRef(decl, _), [Parm(_, Literal(Literal.String(attrName)), _, _), attrExprExpr], _) 
          when decl.Name == "attr_splice" =>
          def attrExpr = if(attrName == "click")           
            (attrExprExpr.expr :> TExpr.Sequence).e1;
          else
            attrExprExpr.expr;
         
          def attrSplice = escape(getAstString(attrExpr));
          $"nw-$attrName=\"$attrSplice\""
          
        | Call(LocalFunRef(decl, _), [Parm(_, Literal(Literal.String(attrName)), _, _), Parm(_, Literal(Literal.String(attrValue)), _, _)], _) 
          when decl.Name == "attr" => 
          $"$attrName=\"$attrValue\""
        
        | DefFunctionsIn(_, body) => htmlFromTExpr(body, indent);
        | DefValIn(name, _, body) when name.Name == "skip"
        | DefValIn(_, LocalRef as val, body) when val.decl.Name == "skip" => htmlFromTExpr(body, indent);
        | _ => assert2(false); ""
        }
      }
      
      //assert2(false);
      //Message.Hint(mb.Body.ToString());
      TyperHelper.GetTypedBody(mb, typer, typer.CurrentTypeBuilder, body => {        
        //Message.Hint(body.ToString());
        def html = htmlFromTExpr(body, "");
        UnitImpl.AddTemplateData(mb.DeclaringType, mb.Name, html);
      }, true);      
    }
  }
}
