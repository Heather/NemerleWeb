using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Extensions;
using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using System.Collections;
using System.Collections.Generic;
using System.Xml.Linq;
using System.Linq;
using System.Text.RegularExpressions;
using System.Diagnostics;
using L = System.Xml.Linq;
using X = NemerleWeb;
using SCG = System.Collections.Generic;
using NColl = Nemerle.Collections.NCollectionsExtensions;

namespace NemerleWeb
{  
  class XmlAstToXLinq
  {
    [Record]
    public class SpliceNode
    {
      public SpliceId : option[string];
      public PExpression : option[PExpr];
      public Children : List[SpliceNode];
      
      public IsForeach : bool { get; set; }
    }
    
    _typer  : Typer;
    _parser : XmlQuotParser;
    _methodNames : list[string];
    _splice : SpliceNode = SpliceNode(None(), None(), List(), false);
    
    mutable _spliceCounter : int = 0;
    
    public this([NotNull] typer : Typer, [NotNull] parser : XmlQuotParser)
    {
      _typer  = typer;
      _parser = parser;
      _methodNames = typer.CurrentType.GetMethods().Map(m => m.Name);
    }
          
    public ToLocation([NotNull] node : PegLocated) : Location
    {
      _parser.ToLocation(node)
    }
    
    Parse(loc : Location, code : string) : PExpr
    {
      _typer.Manager.MacroColors.PushUseSiteColor();
      def pExpr = try     MainParser.ParseExpr(_typer.Env, code, loc, false)
                  finally _typer.Manager.MacroColors.PopColor();
      pExpr
    }
    
    SplicablePExprStr(value : X.Splicable) : PExpr
    {
      Util.locate(ToLocation(value),
        match (value)
        {
          | Splicable.Value(value)    => <[ $(value : string) ]>
          | Splicable.Expr(expr)      => Parse(ToLocation(value), expr)
          | Splicable.ListExpr(_expr) => Message.FatalError(<#The "..$" not supportend in name context.#>);
          | Splicable.ControlExpr     => assert(false)
        })
    }
    
    public Transform([NotNull] xmlAsts : XmlAst.Seq) : PExpr
    { 
      def res = Util.locate(ToLocation(xmlAsts), TransformImpl(xmlAsts, _splice));
      res;
    }
    
    public TransformImpl([NotNull] xmlAst : XmlAst, spliceNode : SpliceNode, depth = 0 : int) : PExpr
    {              
        def transformImpl(ast) {
          def newNode = SpliceNode(None(), None(), List(), false);
          spliceNode.Children.Add(newNode);
          TransformImpl(ast, newNode, depth + 1);
        }        
        
        match (xmlAst) {
        | Attr(Splicable.Value("click"), Splicable.Expr(expr) as splice) => 
          def e = match(Parse(ToLocation(splice), expr))
          {
          | PExpr.Ref as rf => <[ $rf() ]>
          | PExpr.Call as call => call
          | x => x
          | _ => assert2(false); <[ () ]>
          }
          <[ attr_splice("click", { $e; null }) ]>
        | Attr(Splicable.Value(name), Splicable.Expr(expr) as splice) => <[ attr_splice($(name : string), $(Parse(ToLocation(splice), expr))) ]>        
        | Attr(Splicable.Value(name), Splicable.Value(value))  => <[ attr($(name : string), $(value : string)) ]>
        | Text(Splicable.Value(value))        => <[ text($(value : string)) ]>
        | Tag(Splicable.Value(name), content) =>
          def isInsideTag(c) { c is XmlAst.AttrSplice || c is XmlAst.Attr }
          def attrs = content.Where(c => isInsideTag(c))
                             .Where(c => !(c is XmlAst.AttrSplice(_, SpliceType.Foreach)))
                             .Map(c => TransformImpl(c, spliceNode));          
          def childTags = content.Where(c => !isInsideTag(c))
                                 .Map(c => transformImpl(c));
          def each = content.Where(c => c is XmlAst.AttrSplice(_, SpliceType.Foreach))
                            .FirstOrDefault() :> XmlAst.AttrSplice;
          
          def eachDefines = 
            if(each != null) 
            {              
              match(Parse(ToLocation(each), each.expr)) 
              {
              | <[ $x in $xs ]> => <[ def from = $xs; def $x = from.FirstOrDefault(); ]>
              | _ => Message.FatalError("Unrecognized foreach syntax");
              }            
            } else <[ ]>;
          
          <[
            tag($(name : string), {
              ..$eachDefines;
              ([..$(attrs)],
               [..$(childTags)])
            })
          ]>

        | TagSplice(expr, _)                     => <[ text_splice($(Parse(ToLocation(xmlAst), expr))) ]>
        | AttrSplice(s, SpliceType.Foreach)      => <[ attr_splice("foreach", $(Parse(ToLocation(xmlAst), s))) ]>
        | AttrSplice(s, SpliceType.When)         => <[ attr_splice("when", $(Parse(ToLocation(xmlAst), s))) ]>
        | AttrSplice(s, SpliceType.Unless)       => <[ attr_splice("unless", $(Parse(ToLocation(xmlAst), s))) ]>
        | Seq(items)                             => <[ [..$(items.Map(transformImpl))] ]>;
        | _                                      => Message.FatalError(ToLocation(xmlAst), "Unrecognized syntax in Html"); <[]>
        }
    }
    
    CreateAttribute(name : string, val : string) : XmlAst
    {
      XmlAst.Attr(0, 0, Splicable.Value(0, 0, name), Splicable.Value(0, 0, val))
    }
  }
}
