/*
** Copyright by NN from NemerleWeb team (C) 2013
*/

using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Linq;

namespace TSParser.Ast
{  
  public variant DeclarationElement
  {
    | Reference { Value : Ast.Reference; }
    | ExportAssignment { Value : Ast.ExportAssignment; }
    | InterfaceDeclaration { Value : Ast.InterfaceDeclaration; }
    | ExternalImportDeclaration { Value : Ast.ExternalImportDeclaration; }
    | ImportDeclaration { Value : Ast.ImportDeclaration; }
    | AmbientDeclaration { Value : Ast.AmbientDeclaration; }
  }
  
  public variant Reference
  {
    | NoDefaultLib
    | Lib { Path : string; }
  }
  
  public variant ExportAssignment
  {
    | Module { Name : string; ModuleEntity : string; }
    | Identifier { Name : string; }
  }
  
  [Record]
  public class ExternalImportDeclaration
  {
    public Name : string;
    public ModuleReference : string;
  }
  
  [Record]
  public class ImportDeclaration
  {
    public Name : string;
    public Entity : string;
  }
  
  [Record]
  public class InterfaceDeclaration
  {
    public Name : string;
    public TypeParameters : list[ScriptTypeParameter];
    public Extends : list[ScriptType.Ref];
    public Type : ScriptType.Object;
  }
  
  public variant AmbientDeclaration
  {
    | VariableDeclaration { Value : Ast.AmbientVariableDeclaration; }
    | FunctionDeclaration { Value : Ast.AmbientFunctionDeclaration; }
    | ClassDeclaration { Value : Ast.AmbientClassDeclaration; }
    | EnumDeclaration { Value : Ast.AmbientEnumDeclaration; }
    | ExternalModuleDeclaration { Value : Ast.AmbientExternalModuleDeclaration; }
    | ModuleDeclaration { Value : Ast.AmbientModuleDeclaration; }
  }
  
  [Record]
  public class AmbientVariableDeclaration
  {
    public Name : string;
    public Type : option[ScriptType];
  }

  [Record]
  public class AmbientFunctionDeclaration
  {
    public Name : string;
    public Signature : CallSignature;
  }

  [Record]
  public class AmbientClassDeclaration
  {
    public Name : string;
    public TypeParameters : list[ScriptTypeParameter];
    public Heritage : ClassHeritage;
    public Members : list[AmbientClassBodyElement];
  }

  [Record]
  public class AmbientEnumDeclaration
  {
    public Name : string;
    public Members : list[AmbientEnumMember];
  }

  [Record]
  public class AmbientExternalModuleDeclaration
  {
    public Name : string;
    public Members : list[AmbientExternalModuleElement];
   }

  [Record]
  public class AmbientModuleDeclaration
  {
    public Name : string;
    public Members : list[AmbientModuleElement];
  }
  
  [StructuralEquality(Ignore = [ReturnType])]
  public variant ScriptType
  {
    | Any
    | Number
    | Boolean
    | String
    | Void
    | Ref { Name : string; TypeArguments : list[ScriptType]; }
    | Query { Name : string; }
    | Array { Type : ScriptType; Rank : int; }
    | Object { Members : list[ScriptObject]; }
    | Function { Parameters : list[ScriptParameter]; ReturnType : ScriptType; }
    | Constructor { Parameters : list[ScriptParameter]; ReturnType : ScriptType; }
  }
  
  public variant ScriptObject
  {
    | Property
      {
        Name : string;
        Optional : bool;
        Type : option[ScriptType];
      }
    | Call { Value : Ast.CallSignature; }
    | Construct
      {
        TypeParameters : list[ScriptTypeParameter];
        Parameters : list[ScriptParameter];
        ReturnType : option[ScriptType];
      }
    | Index { Value : Ast.IndexSignature; }
    | Method
      {
        Name : string;
        Optional : bool;
        Signature : CallSignature;
      }
  }
  
  [Record]
  public class IndexSignature
  {
    ParameterName : string;
    ParameterType : IndexParameterType;
    ReturnType : ScriptType;
  }
  
  public variant IndexParameterType
  {
    | Number
    | String
  }
  
  [Record]
  public class CallSignature
  {
    public TypeParameters : list[ScriptTypeParameter];
    public Parameters : list[ScriptParameter];
    public ReturnType : option[ScriptType];
  }
  
  [Record]
  public class ScriptTypeParameter
  {
    public Name : string;
    public Constraint : option[ScriptType];
  }
  
  public variant ScriptParameter
  {
    | Required
      {
        Value : Ast.RequiredParameter;
      }
    | Optional
      {
        Name : string;
        Type : option[ScriptType];
        Access : option[MemberAccess];
        
        // Always true in Ambient context
        new Optional : bool;
      }
    | Rest
      {
        Name : string;
        Type : option[ScriptType];
      }
  }
  
  public variant RequiredParameter
  {
    | Literal { Name : string; Value : string; }
    | Regular
      {
        Name : string;
        Type : option[ScriptType];
        Access : option[MemberAccess];
      }
  }
  
  public variant MemberAccess
  {
    | Public
    | Private
  }
  
  [Record]
  public class AmbientEnumMember
  {
    public Name : string;
    public Value : option[int];
  }
  
  public variant AmbientModuleElement
  {
    | VariableDeclaration { Value : Ast.AmbientVariableDeclaration; }
    | FunctionDeclaration { Value : Ast.AmbientFunctionDeclaration; }
    | ClassDeclaration { Value : Ast.AmbientClassDeclaration; }
    | InterfaceDeclaration { Value : Ast.InterfaceDeclaration; }
    | EnumDeclaration { Value : Ast.AmbientEnumDeclaration; }
    | ModuleDeclaration { Value : Ast.AmbientModuleDeclaration; }
    | ImportDeclaration { Value : Ast.ImportDeclaration; }
  }
  
  public variant AmbientExternalModuleElement
  {
    | ExportAssignment { Value : Ast.ExportAssignment; }
    | ExternalImportDeclaration { Value : Ast.ExternalImportDeclaration; }
    | ModuleElement { Value : Ast.AmbientModuleElement; }
  }
  
  public variant AmbientClassBodyElement
  {
    | Constructor { Parameters : list[Ast.ScriptParameter]; }
    | Property
      {
        Name : string;
        Type : option[ScriptType];
        Access : option[MemberAccess];
        Static : bool;
      }
    | Method
      {
        Name : string;
        Signature : CallSignature;
        Access : option[MemberAccess];
        Static : bool;
      }
    | Index { Value : Ast.IndexSignature; }
  }
  
  [Record]
  public class ClassHeritage
  {
    public Base : option[ScriptType.Ref];
    public Interfaces : list[ScriptType.Ref];
  }
}
