using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Linq;

namespace TSParser
{
  type TypeReference = string;
  type ClassOrInterfaceTypeList = List[TypeReference];
  
  public variant DeclarationElement : Located
  {
    | Reference { Value : ReferenceRule; }
    | ExportAssignment { Value : ExportAssignmentRule; }
    | InterfaceDeclaration { Value : InterfaceDeclarationRule; }
    | ExternalImportDeclaration { Value : ExternalImportDeclarationRule; }
    | ImportDeclaration { Value : ImportDeclarationRule; }
    | AmbientDeclaration { Value : AmbientDeclarationRule; }
  }
  
  public variant ReferenceRule
  {
    | NoDefaultLib
    | Lib { Path : string; }
  }
  
  public variant ExportAssignmentRule
  {
    | Module { Name : string; ModuleEntity : string; }
    | Identifier { Name : string; }
  }
  
  [Record]
  public class ExternalImportDeclarationRule
  {
    public Name : string { get; }
    public ModuleReference : string { get; }
  }
  
  [Record]
  public class ImportDeclarationRule
  {
    public Name : string { get; }
    public Entity : string { get; }
  }
  
  [Record]
  public class InterfaceDeclarationRule
  {
    public Name : string { get; }
    public TypeParameters : List[object] { get; }
    public Extends : ClassOrInterfaceTypeList { get; }
    public Type : object { get; }
  }
  
  public variant AmbientDeclarationRule
  {
    | VariableDeclaration
      {
        Name : string;
      }
    | FunctionDeclaration
      {
        Name : string;
      }
    | ClassDeclaration
      {
        Name : string;
      }
    | EnumDeclaration
      {
        Name : string;
      }
    | ExternalModuleDeclaration
      {
        Name : string;
      }
    | ModuleDeclaration
      {
        Name : string;
      }
  }
  
  public variant ScriptType
  {
    | Any
    | Number
    | Boolean
    | String
    | Void
  }
}
