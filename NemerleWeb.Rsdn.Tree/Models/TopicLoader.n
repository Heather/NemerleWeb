using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;

using HtmlAgilityPack;
using Newtonsoft.Json;

namespace Rsdn.Tree.Models
{
  module TopicLoader
  {
    public GetTopicList(url : string) : IEnumerable[TopicList.Topic]
    {
      def forum = url.Substring(url.Trim('/').LastIndexOf('/')).Trim('/');

      using(client = WebClient()) {
        client.Encoding = System.Text.Encoding.UTF8;
        def topicsJson = client.DownloadString($"http://www.rsdn.ru/rs/forum/$(forum)/topics");
        def reply = JsonConvert.DeserializeAnonymousType(topicsJson, new ( 
          total = 0,
          topics = array[new (
            answersCount = 0,
            createdOn = "",        
            id = 0,
            authorNick = "",
            lastAnswerBy = "",
            lastUpdatedOn = "",
            topicRate = 0,
            topicRateCount = 0,
            topicAgrees = 0,
            topicDisagrees = 0,
            topicSmiles = 0,
            subject = ""        
        )]));

        def topics = reply.topics;
        
        def formatDateTime(str : string) {
          str.Substring(5)
             .Substring(0, 11)
             .Replace('-', '.')
             .Replace('T', ' ');
        }      

        topics.Skip(1).Take(reply.total - 2).Select(topic =>
          TopicList.Topic(topic.subject, 
                          if(string.IsNullOrWhiteSpace(topic.authorNick)) "Аноним" else topic.authorNick, 
                          topic.topicRate, 
                          topic.answersCount, 
                          topic.id,
                          topic.lastAnswerBy,
                          formatDateTime(topic.lastUpdatedOn),
                          formatDateTime(topic.createdOn),
                          topic.topicAgrees,
                          topic.topicDisagrees,
                          topic.topicSmiles)
        );
      }
    }

    public LoadReplies(id : int) : CommentNode
    {
      def replies = WebClient().DownloadString($"http://www.rsdn.ru/rs/topic/$(id)/replies");
      def replyObjects = JsonConvert.DeserializeAnonymousType(replies, array[new (
        id = 0,
        parentId = 0,
        subject = "",
        authorNick = ""
      )]);
      
      def loadReplyText(replyId) {
        System.Threading.Tasks.Task.Run(() => {
          try {
            def client = WebClient();
            client.Encoding = System.Text.Encoding.UTF8;
            def json = client.DownloadString($"http://www.rsdn.ru/rs/message/$(replyId)?formatted=true");
            JsonConvert.DeserializeAnonymousType(json, new ( text = "" )).text;
          } catch {
            | _ => "Couldn't load reply, sorry"
          }
        });
      }

      def repliesWithText = replyObjects.Select(o => {
        new (
          text = loadReplyText(o.id),
          id = o.id,
          parentId = o.parentId,
          subjet = o.subject,
          authorNick = o.authorNick
        )
      }).ToList();

      def map = repliesWithText.GroupBy(r => r.parentId).ToDictionary(g => g.Key, g => g);

      def getChildNodes(parentNodeId, depth) {
        mutable childNodes;
        if(map.TryGetValue(parentNodeId, out childNodes)) {
          childNodes.Map(c => CommentNode(c.text.Result, getChildNodes(c.id, depth + 1), depth))
        } else []
      }

      def res = CommentNode(loadReplyText(id).Result, getChildNodes(id, 1), 0);
      res
    }
  }
}
