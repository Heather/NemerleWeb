using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;

using HtmlAgilityPack;

namespace Rsdn.Tree.Models
{
  module TopicLoader
  {
    public GetTopicList(url : string) : IEnumerable[TopicList.Topic]
    {
      def url = "http://www.rsdn.ru/Forum/MsgList.aspx?group=" + url.Substring(url.Trim('/').LastIndexOf('/')).Trim('/');
      def doc = HtmlWeb().Load(url);
      
      def rows = doc.DocumentNode.SelectNodes("//table[@id='tbl']/tr");

      rows.Skip(1).Take(rows.Count - 2).Select(row => {
        
        def name = row.SelectSingleNode(".//table//td[@nowrap]").InnerText;
        def url = row.SelectSingleNode(".//table//td[@nowrap]//a").Attributes["href"]?.Value;
        def author = row.SelectSingleNode("./td[2]").InnerText;
        def rating = row.SelectSingleNode("./td[3]").InnerText;
        def comments = row.SelectSingleNode("./td[4]").InnerText;

        TopicList.Topic(name, author, rating, comments, url);
      });
    }

    public LoadReplies(url : string) : TopicList.CommentNode
    {
      def start = url.LastIndexOf('/');
      def end = url.LastIndexOf('.');

      when (start == -1 || end == -1)
        return TopicList.CommentNode();

      def id = url.Substring(start + 1, (end - start) - 1);
      def replies = WebClient().DownloadString("http://rsdn.ru/Forum/LoadRe.aspx?tid=" + id);

      def start' = replies.IndexOf("window.parent.LE");
      def start'' = replies.IndexOf("\"", start');
      def end' = replies.IndexOf('\n', start'') - 3;
      def repliesHtml = replies.Substring(start'', end' - start'');
      
      def doc = HtmlDocument();
      doc.LoadHtml(repliesHtml);
      def docNode = doc.DocumentNode;

      def buildCommentNode(node, isRoot) {        
        def url = if(!isRoot) node.SelectSingleNode(".//a[@href]").Attributes["href"].Value else "";
        TopicList.CommentNode(url, node.ChildNodes
                                       .Where(c => c.Name == "table")
                                       .Select(c => buildCommentNode(c, false)).ToList())
      }

      def res = buildCommentNode(docNode, true);
      res
    }
  }
}
