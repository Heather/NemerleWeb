using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;

using HtmlAgilityPack;
using Newtonsoft.Json;

namespace Rsdn.Tree.Models
{
  module TopicLoader
  {
    public GetTopicList(url : string) : IEnumerable[TopicList.Topic]
    {
      def url = "http://www.rsdn.ru/Forum/MsgList.aspx?group=" + url.Substring(url.Trim('/').LastIndexOf('/')).Trim('/');
      def doc = HtmlWeb().Load(url);
      
      def rows = doc.DocumentNode.SelectNodes("//table[@id='tbl']/tr");

      rows.Skip(1).Take(rows.Count - 2).Select(row => {
        
        def name = row.SelectSingleNode(".//table//td[@nowrap]").InnerText;
        def url = row.SelectSingleNode(".//table//td[@nowrap]//a").Attributes["href"]?.Value;
        def author = row.SelectSingleNode("./td[2]").InnerText;
        def rating = row.SelectSingleNode("./td[3]").InnerText;
        def comments = row.SelectSingleNode("./td[4]").InnerText;

        TopicList.Topic(name, author, rating, comments, url);
      });
    }

    public LoadReplies(url : string) : CommentNode
    {
      def start = url.LastIndexOf('/');
      def end = url.LastIndexOf('.');

      when (start == -1 || end == -1)
        return CommentNode("", [], 0);

      def id = url.Substring(start + 1, (end - start) - 1);
      def replies = WebClient().DownloadString($"http://www.rsdn.ru/rs/topic/$(id)/replies");
      def replyObjects = JsonConvert.DeserializeAnonymousType(replies, array[new (
        id = 0,
        parentId = 0,
        subject = "",
        authorNick = ""
      )]);
      
      def loadReplyText(replyId) {
        System.Threading.Tasks.Task.Run(() => {
          try {
            def client = WebClient();
            client.Encoding = System.Text.Encoding.UTF8;
            def json = client.DownloadString($"http://www.rsdn.ru/rs/message/$(replyId)?formatted=true");
            JsonConvert.DeserializeAnonymousType(json, new ( text = "" )).text;
          } catch {
            | _ => "Couldn't load reply, sorry"
          }
        });
      }

      def repliesWithText = replyObjects.Select(o => {
        new (
          text = loadReplyText(o.id),
          id = o.id,
          parentId = o.parentId,
          subjet = o.subject,
          authorNick = o.authorNick
        )
      }).ToList();

      def map = repliesWithText.GroupBy(r => r.parentId).ToDictionary(g => g.Key, g => g);

      def getChildNodes(parentNodeId, depth) {
        mutable childNodes;
        if(map.TryGetValue(parentNodeId, out childNodes)) {
          childNodes.Map(c => CommentNode(c.text.Result, getChildNodes(c.id, depth + 1), depth))
        } else []
      }

      _ = replyObjects;

      def topicId = int.Parse(id);
      def res = CommentNode(loadReplyText(topicId).Result, getChildNodes(topicId, 1), 0);
      res
    }
  }
}
