using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Web;
using System.Web.Routing;
using System.Collections.Generic;
using System.Linq;

using Rsdn.NavTree;

namespace Rsdn
{  
  public class NWebTreeProvider : INavTreeProvider
  {    
    public GetChildren(parentID : string, _requestContext : HttpRequest) : IEnumerable[NodeData]
    {
      if(parentID == ".")
        TreeLoader.GetTopNodes().Select(MapToNodeData)
      else 
        TreeLoader.LoadNodeChildren(parentID).Select(MapToNodeData)
    }
    
    public LoadByIds(ids : IEnumerable[string], _requestContext : HttpRequest) : IEnumerable[NodeData]
    {
      TreeLoader.LoadByIds(ids)
                .Select(MapToNodeData)
    }
    
    public Search(term : string, _requestContext : HttpRequest) : IEnumerable[NodeData]
    {
      TreeLoader.Search(term)
                .Select(MapToNodeData)
    }
    
    public FindNodesByUrl(url : string, context : RequestContext) : IEnumerable[NodeInfo]
    {
      
      null
    }
    
    MapToNodeData(node : TreeNode) : NodeData
    {
      NodeData("", NodeInfo(node.Id, node.Caption, GetIconUrl(node), GetHref(node.Href), SortOrder.Normal, node.LoadOnDemand))
    }
    
    GetHref(href : string) : string
    {
      if(href == null || href.StartsWith("http://")) href else "http://www.rsdn.ru/" + href;
    }
    
    GetIconUrl(node : TreeNode) : string
    {
      def isLeaf = (!node.LoadOnDemand && node.Children == null);
      def filename = match(isLeaf, node.Icon) {
      | (true, "mag")  => "/Images/article18.png"
      | (false, "mag") => "/Images/mag18.png"
      | (true, "at")   => "/Images/article18.png"
      | (false, "at")  => "/Images/folder18.png"
      | (true, "fl")   => "/Images/files18.png"
      | (false, "fl")  => "/Images/filefolder18.png"
      | (true, "fr")   => "/Images/forum18.png"
      | (false, "fr")  => "/Images/forumfolder18.png"
      | _ => "/Images/forum18.png"
      }
      "http://www.rsdn.ru" + filename
    }
  }
}
