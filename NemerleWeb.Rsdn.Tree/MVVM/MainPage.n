using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Web;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

using Rsdn.NavTree;

namespace Rsdn
{    
  [Unit]
  public class MainPage
  {    
    public mutable static Instance : MainPage;
        
    public Pinned : Pinned { get; set; }
    
    Root : TreeNode { get; set; }
    Search : Search { get; set; }
    
    ActiveNodes : list[TreeNode] { get; set; }
    SelectedNode : TreeNode { get; set; }
    SelectedNodeUrl : string { get { if(SelectedNode != null) SelectedNode.Href else "" } }
    
    CurrentView : string { get { if(IsMobile) "MobileView" else "DesktopView"; } }
    IsMobile : bool { get; set; }
    
    public this(urlToOpen : string) 
    {
      MainPage.Instance = this;
      
      Search = Search();                       
      Pinned = Pinned();      
      IsMobile = window.top.document.body.clientWidth < 1000;
              
      _ = server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes.ToList()
        );
      });
    }
    
    public SelectNode(node : TreeNode) : void
    {
      def getAllParents(node : TreeNode) : list[TreeNode] {
      | _ when node.Parent != null => node.Parent :: getAllParents(node.Parent)
      | _ => [];
      };
      
      (window.top.document.getElementById("frmMain") :> HTMLFrameElement).src = node.Href;
      
      SelectedNode = node;
      ActiveNodes = node :: getAllParents(node);
    }
    
    public IsActiveNode(node : TreeNode) : bool 
    {
      ActiveNodes?.Any(n => n.Id == node.Id);
    }
    
    [Html]
    public View() : string
    {
      <#
        <div class="page">
          <div $when(Root != null) class="root">
            <div template="$Search" />
            <div $when(string.IsNullOrEmpty(Search.SearchTerm))>
              <div class="pinned-nodes">
                <div template="$(Pinned.Node)" />
              </div>
              <div template="$Root" />
            </div>
          </div>
        </div>
      #>
    }
        
    public class Server
    {
      public GetTopNodes() : IEnumerable[TreeNode]
      {
        TreeLoader.Service.GetChildren(".", HttpContext.Current.Request)
                  .Select(TreeLoader.MapToTreeNode)
      }
      
      public LoadByIds(ids : IEnumerable[string]) : IEnumerable[TreeNode]
      {
        TreeLoader.Service
                  .LoadByIds(ids, HttpContext.Current.Request)
                  .Select(TreeLoader.MapToTreeNode)
      }
    }
  }
}
