using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using SR = System.Reflection;
using System.Globalization;
using System.Linq;
using System.Text;

namespace NemerleWeb
{
  [Record(NotNull = [".*"])]
  internal class JSClass
  {
    public ClassType : TypeBuilder { get; }
    public Indent : string    { get; }      
    public Typer : Typer { get; }
    
    // HACK: for using types from JSClass
    #region Types
    public static StringType : TypeVar { get; set; }
    public static IEnumerableType : TypeVar { get; set; }        
    public static IPageType : TypeVar { get; set; }
    public static ObjectType : TypeVar { get; set; }
    #endregion
      
    public static Self : string = "_nw_self";
    private static InitSeparator = ";\n";
      
    /// <summary>
    /// Initialize self either
    /// </summary>
    public static SelfInit : string = $<#var $Self = this;#>;
    static InstanceBindingFlags =
      BindingFlags.Instance |
      BindingFlags.Public |
      BindingFlags.NonPublic |
      BindingFlags.DeclaredOnly;
      
    static StaticBindingFlags =
      BindingFlags.Static |
      BindingFlags.Public |
      BindingFlags.NonPublic |
      BindingFlags.DeclaredOnly;
    public Fields : IEnumerable[IField]
    {
      [Memoize]
      get
      {
        ClassType.GetFields(InstanceBindingFlags)
                  .Where(f => f.Name != "server" && f.Name != "__constructorParams")
                  .Where(f => !f.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
      }
    }
      
    public StaticFields : IEnumerable[IField]
    {
      get
      {
        ClassType.GetFields(StaticBindingFlags)
                  .Where(f => !f.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
                  .Where(f => f.Name != "server" && f.Name != "__constructorParams")
      }
    }
              
    public Properties : IEnumerable[IProperty] 
    {
      [Memoize]
      get
      {
        ClassType.GetProperties(InstanceBindingFlags)
                  .Where(p => !p.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
                  .Where(_ is PropertyBuilder)
                  .Where(p => p.Name != "server")
      }
    }
      
    public StaticProperties : IEnumerable[IProperty] 
    {
      get
      {
        ClassType.GetProperties(StaticBindingFlags)
                  .Where(p => !p.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
                  .Where(_ is PropertyBuilder)
                  .Where(p => p.Name != "server")
      }
    }      
              
    public Methods : IEnumerable[IMethod] 
    {
      [Memoize]
      get
      {            
        def methods = ClassType.GetMethods(InstanceBindingFlags);
        FilterMethods(methods)
      }
    }
      
    public StaticMethods : IEnumerable[IMethod] 
    {
      get
      {            
        def methods = ClassType.GetMethods(StaticBindingFlags);
        FilterMethods(methods)
      }
    }
    public static GetNestedTypes(type : TypeBuilder) : IEnumerable[TypeBuilder]
    {
      type.DeclaredNestedTypes
          .Where(c => !c.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
                        .Where(c => c.Name != "Server" && c.Name != "ServerProxy") //Not server                                
                        .Where(c => !c.Name.StartsWith("_N_")) //Not generated class;
    }
    
    NestedClasses : IEnumerable[JSClass]
    {            
      get
      {
        GetNestedTypes(ClassType).Select(c => JSClass(c, Indent, Typer));
      }
    }
              
    IsPage : bool { get { !ClassType.Name.StartsWith("_N_") } }
        
    public Constructors : IEnumerable[IMethod]
    {
      get
      {
        ClassType.GetConstructors(InstanceBindingFlags)
      }
    }
        
    public Write(debug : bool) : string 
    {                
      def meta = JSClassMeta();
      def properTypeName = GetProperName(ClassType);
      def parentPtr = Self;
      def bodyIndent = Indent + "  ";
      def properties = GetProperties(bodyIndent, parentPtr, meta);
      def definedProperties = GetDefinedProperties(bodyIndent, parentPtr, meta);
      def staticProperties = GetStaticProperties(Indent, meta);
      def fieldsDecl = GetFieldsDefaultInit(bodyIndent, parentPtr);
      def fieldsInit = GetFieldsInit(bodyIndent, parentPtr);
      AddFieldsMeta(Fields, meta);
      //def staticFields = GetStaticFields(Indent);
      def constructorsBody = GetConstructorsBody(Indent, bodyIndent);
      def callConstrutor = GetCallConstructor(bodyIndent);
      def methods = GetMethods(bodyIndent, parentPtr, true);
      def definedMethods = GetDefinedMethods(bodyIndent, parentPtr, true);
      def staticMethods = GetStaticMethods(Indent);
      //def nestedClassesString = GenerateNestedClasses();
      def className = ClassType.FullName;
        
      // This is needed to make labmda object behave as regular function
      def returning = match(ClassType.BaseType?.Name)
      {
      | "Function" => bodyIndent + $<#return $Self.apply;#>
      | "FunctionVoid" => bodyIndent + $<#return $Self.apply_void;#>
      | _ => ""
      };

      def ret = StringBuilder();
      _ = ret
        .AppendWhen(debug, _.AppendLine($"// $className === Begin ==="))
        .AppendWhen(debug, _.AppendLine($"// $className - Define ctor"))
        .AppendLineValue($"$(Indent)var $properTypeName$$ctor = {};")
        .AppendWhen(debug, _.AppendLine($"// $className - Constructors body"))
        .AppendLineValue(constructorsBody)
        .AppendWhen(debug, _.AppendLine($"// $className - Init"))
        .AppendLineValue($<#$(Indent)function $properTypeName() {
$(bodyIndent)$SelfInit#>)
        .AppendWhen(debug, _.AppendLine($"// $className - Properties"))
        .AppendLineValue(properties)
        .AppendWhen(debug, _.AppendLine($"// $className - Methods"))
        .AppendLineValue(methods)
        .AppendWhen(debug, _.AppendLine($"// $className - Fields"))
        .AppendLineValue(fieldsDecl)
        .AppendLineValue(fieldsInit)
        .AppendWhen(debug, _.AppendLine($"// $className - Call constructor"))
        .AppendLineValue(callConstrutor)
        .AppendWhen(debug, _.AppendLine($"// $className - Defined properties"))
        .AppendLineValue(definedProperties)
        .AppendWhen(debug, _.AppendLine($"// $className - Defined methods"))
        .AppendLineValue(definedMethods)
        .AppendWhen(debug, _.AppendLine($"// $className - SignalR"))
        .AppendLineValue($<#$(Indent)  if(window["$(properTypeName)_signalr"]) {
$(Indent)    $(properTypeName)_signalr($Self);
$(Indent)  }#>)
        .AppendWhen(debug, _.AppendLine($"// $className - Meta"))
        .AppendLineValue(meta.WriteToJS(bodyIndent))
        .AppendWhen(debug, _.AppendLine($"// $className - Return"))
        .AppendLineValue(returning)
        .AppendLineValue($"$(Indent)}")
        .AppendWhen(debug, _.AppendLine($"// $className - Static methods"))
        .AppendLineValue(staticMethods)
        .AppendWhen(debug, _.AppendLine($"// $className - Static properties"))
        .AppendLineValue(staticProperties)
        .AppendWhen(debug, _.AppendLine($"// $className === End ==="))
        ;

      ret.ToString()
    }
      
    GenerateProperties(indent : string, parentPtr : string, properties : IEnumerable[IProperty], meta : JSClassMeta, generate : bool) : string 
    {
      def propStrings = properties.Select(p =>
        {
          when (p.IsIndexer)
            Message.Error(p.Location, $"Indexed properties are not supported, $p");
            
          when(generate)
            meta.Properties.Add(
              JSClassMemberMeta(
                p.Name,
                p.GetModifiers().CustomAttributes.Select(a => a.ToString()).ToList(),
                p.GetMemType().IsValueType));
            
          def sb = StringBuilder();
            
          def addProperty(prop, prefix : string, value : string) : void
          {
            def body = TranslateMethodBody(prop, indent + "  ");
              
            _ = sb.Append(
              $"$indent$parentPtr.$(prefix)_$(p.Name) = $parentPtr.$(prefix)_$(p.Name)$(DefinedSuffix)");

            _ = sb.AppendLine(
              if(generate)
$<#= function($value) {
$(indent)  $SelfInit
$body
$indent};#>
              else
                ";");
          }
            
          when (p.GetGetter() != null) addProperty(p.GetGetter(), "get", "");
          when (p.GetSetter() != null) addProperty(p.GetSetter(), "set", "value");
            
          sb.ToString()
        });
          
      $<#..$(propStrings; "\n")#>;
    }
      
    GetProperties(indent : string, parentPtr : string, meta : JSClassMeta) : string
    {
      GenerateProperties(indent, parentPtr, Properties, meta, true)
    }
      
    GetDefinedProperties(indent : string, parentPtr : string, meta : JSClassMeta) : string
    {
      GenerateProperties(indent, parentPtr, Properties, meta, false)
    }
      
    GetStaticProperties(indent : string, meta : JSClassMeta) : string 
    {
      GenerateProperties(indent, GetProperName(ClassType), StaticProperties, meta, true)
    }
      
    /// <summary>
    /// Return value only if it is not the default one
    /// </summary>
    FieldInitValue(field : IField) : option[string]
    {
      def field = field :> FieldBuilder;
            
      def initializer = JSAstCache.GetFieldInitializer(ClassType, field?.Name);      
      if(initializer != null)
      {
        def integer(v : Literal.Integer) : string
        {
          if (v.is_negative)
            (unchecked(v.val :> long) * -1).ToString(CultureInfo.InvariantCulture)
          else
            v.val.ToString(CultureInfo.InvariantCulture)
        }
          
        def makeInitializer(expr) : option[string]
        {
        | PExpr.Literal(Literal.Bool(false)) => None()
        | PExpr.Literal(Literal.Bool(val)) => Some(val.ToString(CultureInfo.InvariantCulture).ToLower())
        | PExpr.Literal(Literal.Char('\0')) => None()
        | PExpr.Literal(Literal.Char(val)) => Some(val.ToString(CultureInfo.InvariantCulture))
        | PExpr.Literal(Literal.Decimal(0m)) => None()
        | PExpr.Literal(Literal.Decimal(val)) => Some(val.ToString(CultureInfo.InvariantCulture))
        | PExpr.Literal(Literal.Double(0.0)) => None()
        | PExpr.Literal(Literal.Double(val)) => Some(val.ToString(CultureInfo.InvariantCulture))
        | PExpr.Literal(Literal.Enum(Integer(0, _, _), _, _)) => None()
        | PExpr.Literal(Literal.Enum(Integer as i, _, _)) => Some(integer(i))
        | PExpr.Literal(Literal.Float(0f)) => None()
        | PExpr.Literal(Literal.Float(val)) => Some(val.ToString(CultureInfo.InvariantCulture))
        | PExpr.Literal(Literal.Integer(0, _, _)) => None()
        | PExpr.Literal(Literal.Integer as i) => Some(integer(i))
        | PExpr.Literal(Literal.String(null)) => None()
        | PExpr.Literal(Literal.String(val)) => Some(JSAstHelper.EscapeString(val))
        | PExpr.ListLiteral(elements)
        | PExpr.Tuple(elements) =>
          def elementsWithValue = elements
            .Select(e => makeInitializer(e))
            .Where(init => init.HasValue)
            .Select(init => init.Value);
            
          def ret = string.Join(", ", elementsWithValue);          
          Some($"[$ret]")
        | PExpr.Call => 
          def ast = JSAstBuilder.BuildJSAst(
            ClassType.FullName,
            Typer.TypeExpr(expr),
            false,
            null,
            Some(ClassType));
          Some(ast.Write() + ";")
        | PExpr.Literal(Literal.Void)
        | PExpr.Literal(Literal.Null)    
        | _ => None()
        }
        
        def ret = makeInitializer(initializer);
        
        // Filter out empty strings
        if(ret is Some(v) when !string.IsNullOrEmpty(v))
          ret
        else
          None()
      }
      else
      {
        None()
      }
    }
    
    DefaultFieldValue(field : IField) : string
    {
      DefaultValueInitializer.GetJSAst(field.GetMemType()).Write()
    }
            
    AddFieldsMeta(fields : IEnumerable[IField], meta : JSClassMeta) : void
    {
      foreach(f in fields)
        meta.Fields.Add(
          JSClassMemberMeta(
            f.Name,
            f.GetModifiers().GetCustomAttributes().Select(a => a.ToString()).ToList(),
            f.GetMemType().IsValueType))
    }
      
    GenerateFieldsInit(indent : string, parentPtr : string, fields : IEnumerable[IField]) : string
    {
      def initializations = fields
        .Select(f => new (f = f, init = FieldInitValue(f)))
        .Where(i => i.init.HasValue)
        .Select(i => $"$indent$parentPtr.$(i.f.Name) = $(i.init.Value)");
      
      string.Join(InitSeparator, initializations);
    }
    
    GenerateFieldsDefaultInit(indent : string, parentPtr : string, fields : IEnumerable[IField]) : string
    {
      def declarations = fields.Select(f => $<#$indent$parentPtr.$(f.Name) = $(DefaultFieldValue(f))#>);
      string.Join(InitSeparator, declarations);
    }
        
    GetFieldsDefaultInit(indent : string, parentPtr : string) : string 
    {
      GenerateFieldsDefaultInit(indent, parentPtr, Fields)
    }
    
    GetFieldsInit(indent : string, parentPtr : string) : string 
    {
      GenerateFieldsInit(indent, parentPtr, Fields)
    }
    
    public GetStaticFieldsDefaultInit(indent : string) : string
    {
      def parentPtr = GetProperName(ClassType);
      GenerateFieldsDefaultInit(indent, parentPtr, StaticFields)
    }

    GetConstructorsBody(indent : string, bodyIndent : string) : string
    {
      def valueTypeCtorCode =
        if(ClassType.IsValueType) [GetValueTypeDefaultConstructor(indent, bodyIndent)] else [];
        
      def ctors = Constructors;
      def ctorsCode = ctors.Select(
        ctor => 
        {
          def ctorBody = TranslateMethodBody(ctor, bodyIndent);            
          MakeCtor(indent, bodyIndent, ctorBody, ctor.Header.Parameters)
        });        
        
      def allCtorsCode = valueTypeCtorCode.Concat(ctorsCode);
      
      string.Join(InitSeparator, allCtorsCode)
    }
      
    private MakeCtor(indent : string, bodyIndent : string, ctorBody : string, parameters : list[TParameter]) : string
    {
      def ctorParameters = parameters.Map(p => p.Name);
      def signature = JSAstHelper.Method("", Some(parameters));
            
      def makeBody(body)
        {
          $<#
$(bodyIndent)$SelfInit
$body
$indent#>
        }
      
      def writeBody = makeBody(ctorBody);
            
      def properTypeName = GetProperName(ClassType);
      def ctorObject = properTypeName + "$ctor";
      $<#$indent$ctorObject$signature = function(..$ctorParameters) {$writeBody}#>
    }
              
    private GetValueTypeDefaultConstructor(indent : string, bodyIndent : string) : string
    {
      // Generate JSAst.Seq([Assign(FieldRef(field1, default value)), ...])
      def fieldsAssign = Fields.Map(f =>
        JSAst.Assign(
          JSAst.FieldRef(JSAst.This(), f.Name),
          DefaultValueInitializer.GetJSAst(f.GetMemType()))
        );
      def ctorBody = JSAst.Seq(fieldsAssign).Write(bodyIndent);
            
      MakeCtor(indent, bodyIndent, ctorBody, [])
    }
      
    GetCallConstructor(indent : string) : string
    {
      def properTypeName = GetProperName(ClassType);
      def ctorObject = properTypeName + "$ctor";
          
      $"$indent$ctorObject[arguments[0]].apply(this, Array.prototype.slice.call(arguments, 1))"
    }
        
    public GetStaticConstructorBody(indent : string) : string 
    {
        def ctors = ClassType.GetConstructors(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
        def ctor = ctors.FirstOrDefault();
        if(ctor != null)
          TranslateMethodBody(ctor, indent) + Environment.NewLine;
        else
          ""
    }
      
    GenerateMethods(indent : string, parentPtr : string, hasSelf : bool, methods : IEnumerable[IMethod], generate : bool) : string
    {
      def self = if(hasSelf) "" else SelfInit;
      def methodParms(method) { method.GetParameters().Select(p => p.Name); }
        
      // Method name => signature
      def generatedMethods = Dictionary();
        
      def methodsCode = methods.Select(m =>
      {
        // Add method variable and default signature in first time
        def methodVariable =
          if (generatedMethods.ContainsKey(m.Name)) ""
          else
          {
            if(generate)
            {
              $<#$(indent)$parentPtr.$(m.Name) = {};
$(indent)$parentPtr.$(m.Name)$DefinedSuffix = {};#>;
            }
            else
              ""
          }
          
        def methodWithSignature = JSAstHelper.Method(m.Name, Some(m.Header.Parameters));
        def definedMethodWithSignature = JSAstHelper.Method(m.Name + DefinedSuffix, Some(m.Header.Parameters));
          
        if (generatedMethods.ContainsKey(m.Name))
        {
          // Do not add default method signature
          when (m.Header.Parameters is [])
            generatedMethods[m.Name] = None();
        }
        else
        {
          if (m.Header.Parameters is [])
            generatedMethods.Add(m.Name, None())
          else
            generatedMethods.Add(m.Name, Some(methodWithSignature))
        }
          
        def defineMethod = $"$(indent)$parentPtr.$methodWithSignature = $parentPtr.$definedMethodWithSignature";
          
        if (!m.IsAbstract)
          if(generate)
$<#$methodVariable
$defineMethod = function(..$(methodParms(m))) {
$(indent)  $self
$(TranslateMethodBody(m, indent + "  "))
$(indent)}#>
        else
          $"$defineMethod;"
      else
        ""
      });
        
      // Default methods signature for first method if there are no methods without parameters
      def defaultMethodsCode = generatedMethods
        .Where(kv => kv.Value.IsSome)
        .Select(kv =>
          {
            $<#$indent$parentPtr.$(kv.Key)[""] = $parentPtr.$(kv.Value.Value)#>
          });

      $<#..$(methodsCode; "\n")
..$(defaultMethodsCode; "\n")#>
    }
        
    GetMethods(indent : string, parentPtr : string, hasSelf : bool) : string 
    {
      GenerateMethods(indent, parentPtr, hasSelf, Methods, true)
    }
      
    GetDefinedMethods(indent : string, parentPtr : string, hasSelf : bool) : string 
    {
      GenerateMethods(indent, parentPtr, hasSelf, Methods, false)
    }
      
    GetStaticMethods(indent : string) : string 
    {
      GenerateMethods(indent, GetProperName(ClassType), false, StaticMethods, true)
    }
      
    //GenerateNestedClasses() : string
    //{
    //  $"..$(NestedClasses; Environment.NewLine; _.Write())"
    //}
      
    public TranslateMethodBody([NotNull] meth : IMethod, [NotNull] indent = "" : string) : string
    {
      match(JSAstCache.GetMethodAst(ClassType, meth.Header))
      {
      | Some(ast) => ast.Write(indent)
      | None => 
        if(meth.IsAbstract) ""
        else 
        {
          Message.Hint($"No JSAst found for $(meth.Name) from $(meth.DeclaringType.Name)");
          assert2(false);
          "/* No translation found */"
        }
      }
    }
      
    public static TypeIsArray([NotNull] typeVar : TypeVar) : bool 
    {
      typeVar.TryRequire(IEnumerableType) && !typeVar.TryRequire(StringType);
    }
      
    /// <summary>
    /// Take full name, remove prefix specified in JSClassSettings.JSApiRoots.
    /// </summary>
    public static GetProperNameForJS([NotNull] typeInfo : TypeInfo) : string
    {
      GetProperNameRoots(typeInfo, JSClassSettings.JSApiRoots)
    }
    
    public static GetProperNameRoots([NotNull] typeInfo : TypeInfo, roots : IEnumerable[string]) : string
    {
      def fullName = typeInfo.FullName;
      
      // Check default, if doesn't fit, check other roots.
      def root = roots.FirstOrDefault(root => fullName.StartsWith(root));
      
      if(root != null)
        if(fullName.Length == root.Length)
          ""
        else
          fullName.Substring(root.Length + 1)
      else
        fullName
    }
      
    public static GetProperName([NotNull] typeInfo : TypeInfo) : string 
    {
      // If type or declaring has JSApi attribute, get proper name using special method
      if(typeInfo.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute") ||
          typeInfo.DeclaringType?.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute"))
      {
        GetProperNameForJS(typeInfo)
      }
      else
      {
        def typeName = GetProperNameRoots(typeInfo, JSClassSettings.JSClrRoots);
        
        def typeParams = if(typeInfo.Typarms.IsEmpty) "";
                         else $"[..$(typeInfo.Typarms.Select(_.ToString()))]";
        GetProperName(typeName + typeParams)
      }
    }
        
    public static GetProperName([NotNull] type : Type) : string 
    {
      GetProperName(type.FullName)
    }
    
    public static GetProperName([NotNull] fullName : string) : string
    {          
      fullName.Replace(" ", "")
              .Replace(".", "_")
              .Replace("+", "_")
              .Replace("[", "_$")
              .Replace("]", "$_")
              .Replace(",", "$$")
    }
    
    public static FilterMethods([NotNull] methods : IEnumerable[IMethod]) : IEnumerable[IMethod]
    {
      def pageMethods = typeof(IPage).GetMethods().Select(m => m.Name);
      methods.Where(m => !m.Name.StartsWith("get_") && !m.Name.StartsWith("set_"))
              .Where(m => !m.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
              .Where(m => !m.IsConstructor)
              .Where(m => !m.IsAbstract)
              .Where(m => !pageMethods.Contains(m.Name))
              .Where(m => m.Name != "View")
              .Where(m => !(m.Name.StartsWith("_N__") && m.Name.EndsWith("____")))
              .Where(m => !(m.Name.StartsWith("_N_")))
    }
      
    private static DefinedSuffix = "$$";
      
    public class JSClassMeta
    {
      public Properties : List[JSClassMemberMeta];
      public Fields : List[JSClassMemberMeta];
      public Methods : List[JSClassMemberMeta];
        
      public this() 
      {
        Properties = List();
        Fields = List();
        Methods = List();
      }
        
      public WriteToJS(indent : string) : string
      {
$<#$(indent)  $Self.__nweb_meta = {
$(indent)    properties: [..$(Properties; ","; _.Write())],
$(indent)    fields:     [..$(Fields;     ","; _.Write())],
$(indent)    methods:    [..$(Methods;    ","; _.Write())]
$(indent)  };#>;
      }        
    }
        
    [Record]
    public class JSClassMemberMeta
    {
      Name : string { get; }
      Attributes : List[string] { get; }
      IsValueType : bool { get; }
                    
      public Write() : string
      {
        $<#{ name: "$Name", attrs: ['..$(Attributes; "','")'], #> +
        $<#ValueType: $(IsValueType.ToString(CultureInfo.InvariantCulture).ToLower()) }#>
      }
    }
  }
  
  module JSClassHelper
  {
    public HasBase(ti : TypeInfo) : bool 
    {
      ti.BaseType != null &&      
      ti.BaseType.FullName != "System.Object" &&
      ti.BaseType.FullName != "System.ValueType" &&
      ti.BaseType.FullName != "Nemerle.Builtins.Function" &&
      ti.BaseType.FullName != "Nemerle.Builtins.FunctionVoid" &&
      !ti.BaseType.IsInterface
    }
  }
    
  /// Defines settings for JSclass 
  internal module JSClassSettings
  {
    public JSApiRoots : SortedSet[string] = SortedSet(["NemerleWeb", "NemerleWeb.Predefined"], InvertedComparer());
    public JSClrRoots : SortedSet[string] = SortedSet(["NemerleWeb.TypedClr"], InvertedComparer());
  }  
  
  internal module StringBuilderExtensions
  {
    public AppendValue(this sb : StringBuilder, val : string) : StringBuilder
    {
      if(!string.IsNullOrWhiteSpace(val)) sb.Append(val) else sb
    }
    
    public AppendLineValue(this sb : StringBuilder, val : string) : StringBuilder
    {
      if(!string.IsNullOrWhiteSpace(val)) sb.AppendLine(val) else sb
    }
  }
}
