using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace NemerleWeb
{
  public module JSAstBuilder
  {
    Build(
      expr : TExpr,
      currentScopeDefs : list[string * string],
      methodHeader : TFunHeader) : JSAst
    {
      Build(expr, currentScopeDefs, methodHeader, None())
    }
        
    Build(
      expr : TExpr,
      currentScopeDefs : list[string * string],
      methodHeader : TFunHeader,
      paramKind : option[ParmKind]) : JSAst
    {
      def build = Build(_, currentScopeDefs, methodHeader);
                  
      match(expr) 
      {
      | Array(args, _dims)                => JSAst.Array(args.Map(build))
      | ArrayIndexer(obj, a :: _)         => JSAst.ArrayIndexer(build(obj), build(a))
      | Assign(s, TExpr.DefaultValue())   => JSAst.Assign(build(s), build(TExpr.Literal(Literal.Null())))
      | Assign(s, t)                      => JSAst.Assign(build(s), build(t))
      | Base                              => Message.Error(expr.Location, "Base not implemented"); JSAst.NotImpl("Base")
      | Block(body = body)                => build(body) 
      | Cache                             => Message.Error(expr.Location, "Cache not implemented"); JSAst.NotImpl("Cache")
      | CacheRef                          => Message.Error(expr.Location, "CacheRef not implemented"); JSAst.NotImpl("CacheRef")
      | Call(Delayed(susp), parms, istail) when susp.IsResolved 
                                          => JSKnownMembers.Convert(TExpr.Call(susp.ResolutionResult, parms, istail), Build(_, currentScopeDefs, methodHeader, _))
      | Call as call                      => JSKnownMembers.Convert(call, Build(_, currentScopeDefs, methodHeader, _))
      | ClosureFieldOf                    => Message.Error(expr.Location, "ClosureFieldOf not implemented"); JSAst.NotImpl("ClosureFieldOf")
      | ClosureObjectOf                   => Message.Error(expr.Location, "ClosureObjectOf not implemented"); JSAst.NotImpl("ClosureObjectOf")
      | ConstantObjectRef                 => Message.Error(expr.Location, "ConstantObjectRef not implemented"); JSAst.NotImpl("ConstantObjectRef") 
      | CtorOf                            => Message.Error(expr.Location, "CtorOf not implemented"); JSAst.NotImpl("CtorOf")
      | DebugInfo(expr = expr)            => build(expr)
      | Def                               => Message.Error(expr.Location, "Def not implemented"); JSAst.NotImpl("Def")
      | DefaultValue as d                 => DefaultValueInitializer.GetJSAst(d.Type)
      | DefFunctionsIn(header :: _, body) =>
        def typedBody = header.body :> FunBody.Typed;
        def funBody = BuildJSAst(typedBody.expr, header.ReturnType.ToString() != "void", header);
        def function = JSAst.Function("", header.Parameters.Map(p => p.name), funBody);
        
        match(body) 
        {
        | TExpr.LocalFunRef => function
        | _ => 
          def defFunction = JSAst.DefValue(GetLocalValueName(header.decl), function);          
          JSAst.Seq([defFunction, build(body)])
        }
      | DefValIn(name, val, body)         => 
        def newName = name.Name + "_" + name.Id;
        
        match(Build(val, currentScopeDefs, methodHeader)) 
        {
        | Seq([Seq(Pack :: _) as pack, smth, Seq(Unpack :: _) as unpack]) => 
          JSAst.Seq(pack.Items.Append([JSAst.DefValue(newName, smth)])
                              .Append(unpack.Items)
                              .Append([Build(body, (name.Name, newName) :: currentScopeDefs, methodHeader)]));
        | value => 
          JSAst.Seq([JSAst.DefValue(newName, value), 
                     Build(body, (name.Name, newName) :: currentScopeDefs, methodHeader)
                    ])
        }
      | Delayed                           => JSAst.NotImpl("Delayed")
      | Error                             => Message.Error(expr.Location, "Error in the code"); JSAst.NotImpl("Error")
      | EventMember                       => Message.Error(expr.Location, "EventMember not implemented"); JSAst.NotImpl("EventMember")
      | FieldMember(obj, fld)             => JSKnownMembers.ConvertField(obj, fld, build)
      | FieldOf                           => Message.Error(expr.Location, "FieldOf not implemented"); JSAst.NotImpl("FieldOf")
      | Goto(target, _)                   => JSAst.Goto(target.ToString())
      | HasType(expr, type)               => JSAst.HasType(build(expr), JSClass.GetProperName(type.TypeInfo))
      | If(cond, then, els, _, _)         => JSAst.If(build(cond), build(then), build(els))
      | ImplicitValueTypeCtor as i        => DefaultValueInitializer.GetJSAst(i.Type)
      | Label(id, body)                   => JSAst.Label(id, build(body))
      | Literal(val)                      => 
          match(val)
          {
          | Null          => JSAst.Literal(JSLiteral.Null())
          | String (val)  => JSAst.Literal(JSLiteral.String(val))
          | Float (val)   => JSAst.Literal(JSLiteral.Number(val))
          | Double (val)  => JSAst.Literal(JSLiteral.Number(val))
          | Decimal (val) => JSAst.Literal(JSLiteral.Number(Convert.ToDouble(val)))
          | Char (val)    => JSAst.Literal(JSLiteral.String(val.ToString()))
          | Bool (val)    => JSAst.Literal(JSLiteral.Bool(val))
          | Integer (val, isneg, _) => JSAst.Literal(JSLiteral.Number((val :> int) * (if(isneg) -1 else 1)))
          | Enum (val, _, _) => 
            if (val.val < int.MaxValue :> ulong)
            {
              JSAst.Literal(JSLiteral.Number(val.val :> int))
            }  
            else
            {
              Message.Error("Enums 64bit are not supported");
              JSAst.NotImpl();
            }
          | Void => JSAst.Void()
          | _ =>
            Message.Error($"Unmatched literal $expr");
            JSAst.NotImpl();
          }
      | LocalFunRef                       => Message.Error(expr.Location, "LocalFunRef not implemented"); JSAst.NotImpl("LocalFunRef")
      | LocalRef(decl)                    => 
        def name = GetLocalValueName(decl);
        
        if(System.Text.RegularExpressions.Regex.IsMatch(name, <#_N_closurised_this_ptr_\d{4}#>))
        {
          JSAst.This()
        }
        else 
        {
          def type = if(decl.Type.TypeInfo != null) Some(decl.Type) else None();        
          match (decl.ValueKind)
          {
          | LocalValue.Kind.FunParm(kind) when kind == ParmKind.Ref || kind == ParmKind.Out =>
            // If ref/out passed as ref/out return it as LocalRef
            match (paramKind)
            {
            | Some(ParmKind.Ref)
            | Some(ParmKind.Out) => JSAst.LocalRef(name, type)
            | _ => JSAst.ParamRef(name, type)
            }
          | _ => JSAst.LocalRef(name, type)
          }
        }
      | MacroEnvelope(expanded = ex, original = org, the_macro = _) =>                  
        match(org) 
        {         
        | MacroCall(Name(Id = "js"), _, [p]) => 
          match(p)
          {
          | SyntaxElement.Expression(Literal(Literal.String(val))) => JSAst.Code(val)
          | _ => JSAst.Code(p.ToString().Trim('\"'));
          }             
        | _ => build(ex)
        }          
      | Match(_, _) as m                  =>       
        def typerType = typeof(Typer3);
        def typer = FormatterServices.GetUninitializedObject(typerType);
        def localFunField = typerType.GetField("current_local_fun", BindingFlags.NonPublic | BindingFlags.Instance);
        localFunField.SetValue(typer, methodHeader);
        build(DecisionTreeCompiler.Run(m.Type, m.expr, m.cases, typer :> Typer3))
      | MethodAddress(_, meth, _, _)      => JSAst.MethodRef(JSAst.This(), meth.Name, JSAstHelper.MethodParameters(meth))
      | MethodOf                          => Message.Error(expr.Location, "MethodOf not implemented"); JSAst.NotImpl("MethodOf")
      | MethodRef(obj, meth, _, _)        => JSAst.MethodRef(build(obj), meth.Name, JSAstHelper.MethodParameters(meth))
      | MultipleAssign(assigns)           => JSAst.Seq(assigns.Map((l, e) => JSAst.Assign(JSAst.LocalRef(GetLocalValueName(l), None()), build(e))))
      | OpCode(name)                      => ConvertToJSOpCode(name)
      | PropertyMember(obj, prop)         => JSAst.PropertyGet(build(obj), prop.Name)
      | SelfTailCall(func, parms)         => build(TExpr.Call(func, parms, true))
      | Sequence(e1, e2)                  => JSAst.Seq([build(e1), build(e2)])
      | StaticEventRef                    => Message.Error(expr.Location, "StaticEventRef not implemented"); JSAst.NotImpl("StaticEventRef")
      | StaticPropertyRef(from, prop)     => JSAst.PropertyGet(JSAst.LocalRef(from.tycon.Name, None()), prop.Name)
      | StaticRef(from, mem, _)           =>        
        def typeName =
          if(from.tycon.SystemType != null) from.tycon.SystemType.FullName
          else                              from.tycon.FrameworkTypeName;              
        
        if (typeName == typeof(Nemerle.Core.list[_].Nil).FullName)
          JSAst.Array([])
        else
          if(mem is IMethod as m)
            JSAst.StaticMethodRef(JSClass.GetProperName(from.TypeInfo), mem.Name, JSAstHelper.MethodParameters(m))
          else
            JSAst.StaticRef(JSClass.GetProperName(from.TypeInfo), mem.Name);
      | Switch(expr, defCase, cases)      =>
        JSAst.Switch(
          build(expr),
          cases.Map((id, ex) => JSAst.SwitchCase(JSAst.Literal(JSLiteral.Number(id :> double)), build(ex))),
          if(defCase.IsSome) build(defCase.Value) else JSAst.Void())
      | This                              => JSAst.This()
      | Throw(expr)                       => JSAst.Throw(build(expr))
      | Try(body, cases)                  =>
        def hasType(exception : LocalValue) : JSAst
        {
          JSAst.HasType(
            JSAst.LocalRef(NWExceptionName, Some(exception.Type)),
            JSClass.GetProperName(exception.Type.HintFast.TypeInfo))
        }
        def getHandler(handler : TExpr, exception : LocalValue) : JSAst
        {
          def newName = exception.Name + "_" + exception.Id;
          
          JSAst.Seq([
            JSAst.DefValue(newName, JSAst.LocalRef(NWExceptionName, Some(exception.Type))),
            build(handler),
          ])
        }
        def buildCase(case : Try_case) : JSAst * JSAst
        {          
        // | _ => handler
        | Try_case.Fault(handler) =>
          (JSAst.Literal(JSLiteral.Bool(true)), build(handler))
        // | exception.Name is exception.Type => handler
        | Try_case.Catch(exception, handler) =>
          def handlerBody = getHandler(handler, exception);
          if(exception.Type.HintFast.TypeInfo.FullName == "System.Exception")
            (JSAst.Literal(JSLiteral.Bool(true)), handlerBody)
          else
            (hasType(exception), handlerBody)
        // | exception.Name is exception.Type when filter => handler
        | Try_case.Filter(exception, filter, handler) =>
          def cond = JSAst.Call(JSAst.OpCode("&&"), [hasType(exception), build(filter)]);
          (cond, getHandler(handler, exception))
        }
        
        def catchBody =
          cases.FoldRight(
            JSAst.Void(), 
            (case, acc) => 
            {
              def (condition, handler) = buildCase(case);              
              JSAst.If(condition, handler, acc)
            });
        
        JSAst.TryCatch(build(body), Some(NWExceptionName), catchBody)
      | TryFinally(body, handler)         => JSAst.TryFinally(build(body), build(handler))
      | Tuple(args)                       => JSAst.Tuple(args.Map(a => build(a)))
      | TupleIndexer(obj, pos, _len)      => JSAst.TupleIndexer(build(obj), pos)
      | TypeConversion(e, _, _, _)        => build(e)
      | TypeOf                            => Message.Error("TypeOf is not implemented"); JSAst.NotImpl("TypeOf")
      | Use                               => Message.Error("Use is not implemented"); JSAst.NotImpl("Use")
      | null => JSAst.Void()
      | _ => Message.Error("Unmatched TExpr $expr"); JSAst.NotImpl("unmatched");
      }
    } 
    
    public GetLocalValueName(localVal : LocalValue) : string
    { 
      if(localVal.ValKind is LocalValue.Kind.FunParm) localVal.Name else localVal.Name + "_" + localVal.Id
    }
    
    private NWExceptionName = "_NW$_exception";
      
    ConvertToJSOpCode(name : string) : JSAst
    {
      | "+.s"                       
      | "+.u"                       
      | "+.f"                       => JSAst.OpCode("+")
      | "<<.s" | "<<.f"                
      | "<<.u"                      => JSAst.OpCode("<<")
      | ">>.s" | ">>.f"             
      | ">>.u"                      => JSAst.OpCode(">>")
      | "unary.+.s"                    
      | "unary.+.u"                    
      | "unary.+.f"                 => JSAst.OpCode("+")
      | "-.s"                       
      | "-.u"                       
      | "-.f"                       
      | "unary.-.s"                 
      | "unary.-.f"                 => JSAst.OpCode("-")
      | "unary.~.u"                    
      | "unary.~.s"                 => JSAst.OpCode("~")
      | "++.i4.f"                   
      | "++.i4.s"                   
      | "++.i4.u"                   
      | "++.i4.s.i1"                
      | "++.i4.u.i1"                
      | "++.i4.s.i2"                
      | "++.i4.u.i2"                
      | "++.i8.f"                   
      | "++.i8.s"                   
      | "++.i8.u"                   
      | "++.r4.f"                   
      | "++.r8.f"                   => JSAst.OpCode("++")
      | "--.i4.f"                   
      | "--.i4.s"                   
      | "--.i4.u"                   
      | "--.i4.s.i1"                
      | "--.i4.u.i1"                
      | "--.i4.s.i2"                
      | "--.i4.u.i2"                
      | "--.i8.f"                   
      | "--.i8.s"                   
      | "--.i8.u"                   
      | "--.r4.f"                   
      | "--.r8.f"                   => JSAst.OpCode("--")
      | "unary.~.f"                 => JSAst.OpCode("~")
      | "*.s"                       
      | "*.u"                       
      | "*.f"                       => JSAst.OpCode("*")
      | "/.s" | "/.f"               
      | "/.u"                       => JSAst.OpCode("/")
      | "%.s" | "%.f"               
      | "%.u"                       => JSAst.OpCode("%")
      | "|.s" | "|.u" | "|.f" | "|" => JSAst.OpCode("|")
      | "&.s" | "&.u" | "&.f" | "&" => JSAst.OpCode("&")
      | "^.s" | "^.u" | "^.f" | "^" => JSAst.OpCode("^")
      | "bool.!"                    => JSAst.OpCode("!")
      | "==.ref" | "=="             => JSAst.OpCode("===")
      | "!=.ref" | "!="             => JSAst.OpCode("!==")
      | "<.s" | "<.f"               
      | "<.u"                       => JSAst.OpCode("<")
      | ">.s" | ">.f"               
      | ">.u"                       => JSAst.OpCode(">")
      | "<=.s"                      
      | "<=.f"                      
      | "<=.u"                      => JSAst.OpCode("<=")
      | ">=.s"                      
      | ">=.f"                      
      | ">=.u"                      => JSAst.OpCode(">=")
      | _                           => 
          Message.Error("unmatched TExpr.Opcode (" + name + ")"); 
          JSAst.NotImpl();
    }

    /// <summary>
    /// Special method for building ast for slices.
    /// </summary>
    public BuildJSAstForSplices(expr : TExpr, methodHeader : TFunHeader) : JSAst
    {
      def ast = JSAstBuilder.Build(expr, [], methodHeader);
      
      def ast = JSAstHelper.TransformBottomUp(ast);
      def ast = JSAstHelper.FlattenAndRemoveVoids(ast);      
      def ast = JSAst.Recurse(ast, (a, _) => {
        match(a : JSAst) {
        | If(a, b, Label(_, Literal(JSLiteral.Bool(false)))) => JSAst.Call(JSAst.OpCode("&&"), [a, b])
        | _ => a
        }
      });
                      
      ast
      /*
      JSAstHelper
        .IterateAST(ast)
        .Where(a => a is JSAst.DefValue || a is JSAst.Assign)
        .Select(j =>
          match(j)
          {                 
          | JSAst.DefValue(name, Call(MethodRef(Method = "template") as template, [PropertyGet(l1, r1), PropertyGet as p2])) => 
            JSAst.DefValue(name, JSAst.Call(template, [JSAst.FieldRef(l1, r1), p2]))
          // Convert sequence to anonymous function call
          | JSAst.DefValue(name, JSAst.Seq as val) =>             
            JSAst.DefValue(name, JSAst.Call(JSAstHelper.MakeReturningFunction(val), []))
          | JSAst.DefValue => j :> JSAst.DefValue
          | JSAst.Assign(JSAst.LocalRef(name, _type), r) => JSAst.DefValue(name, r)
          | JSAst.Assign(JSAst.FieldRef(_obj, name), r) => JSAst.DefValue(name, r)
          | _ => Message.Error("Must not get here"); null
        });*/
    }
      
    public BuildJSAst(expr : TExpr, shouldReturn : bool, methodHeader : TFunHeader) : JSAst.Seq
    {
      mutable ast = JSAstBuilder.Build(expr, [], methodHeader);
      
      when(shouldReturn)
        ast = JSAstHelper.MakeReturn(ast);
      
      ast = JSAstHelper.TransformBottomUp(ast);
      ast = JSAstHelper.FlattenAndRemoveVoids(ast);
          
      ast = JSAstHelper.FlattenAndRemoveVoids(ast);
      ast = JSAstHelper.GotosToSwitch(ast);
                
      match(ast)
      {
      | Seq as seq => seq
      | _ => JSAst.Seq([ast])
      }
    }
  }
}
