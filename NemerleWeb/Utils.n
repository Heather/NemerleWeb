using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.IO;
using System.Web;

using Nemerle.Extensions;
using Nemerle.Xml;
using Nemerle.NemerleWeb;
using System.Xml.Linq;

using Newtonsoft.Json;

namespace Nemerle.NemerleWeb
{
  public module Utils
  {
    public ToJson(value : string) : string
    {
      def sb = Text.StringBuilder(value.Length + 2);
      _ = sb.Append(' ') // this char will replased later by '"'.
      .Append(value).Replace(<#"#>, <#""#>).Replace("\n", <#\n#>)
      .Append('"');
      
      sb[0] = '"';
      
      sb.ToString()
    }
    
    public ToJson[T](value : T) : string
    {
        JsonConvert.SerializeObject(value, JsonSerializerSettings() <- TypeNameHandling = TypeNameHandling.Objects);
    }
        
    public MakePageHtml[ViewModel](viewModel : IViewModel) : string
    {
      def doc = viewModel.__View();      
      doc.DescendantNodes().OfType.[XElement]().Where(n => n.IsEmpty).Iter(n => n.Value = string.Empty);
      def view = HttpUtility.HtmlDecode(string.Join(Environment.NewLine, doc.Map(x => x.ToString())));
      
      def script = $<#
  <script type='text/javascript'>
    $(viewModel.GetLambdaScript())
    $(viewModel.GetViewModelScript())
  </script>
      #>;
      
      view + script;
    }
  }
}
