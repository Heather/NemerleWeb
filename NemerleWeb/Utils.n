using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Reflection;
using System.Runtime.Serialization;
using System.Xml;

using Nemerle.Extensions;
using Nemerle.Xml;
using NemerleWeb;
using System.Xml.Linq;

using Newtonsoft.Json;

namespace NemerleWeb
{
  public module Utils
  {
    public ToJson(value : string) : string
    {
      def sb = Text.StringBuilder(value.Length + 2);
      _ = sb.Append(' ') // this char will replased later by '"'.
      .Append(value).Replace(<#"#>, <#""#>).Replace("\n", <#\n#>)
      .Append('"');      
      sb[0] = '"';      
      sb.ToString()
    }
    
    public ToJson[T](value : T) : string
    {
        JsonConvert.SerializeObject(value, JsonSerializerSettings() <- TypeNameHandling = TypeNameHandling.Objects);
    }
        
    public MakePageHtml[ViewModel](viewModel : IViewModel) : string
    {
        def models = viewModel.GetType()
                              .Assembly
                              .GetTypes()
                              .Where(t => t.GetCustomAttributes(typeof(JsModel), false).Any());
        def modelTemplates = string.Join(Environment.NewLine, models.Select(t => GetModelTemplates(t)));
        def modelLambdas = string.Join(Environment.NewLine, models.Select(t => GetModelLambdas(t)));
        def modelScripts = string.Join(Environment.NewLine, models.Select(t => GetModelScript(t)));
        
        def viewHTml = GetHtml(viewModel.__View());
        
      
        def script = $<#
$modelTemplates
<script type='text/javascript'>
  $modelLambdas
  $modelScripts
  $(viewModel.GetLambdaScript())
  $(viewModel.GetViewModelScript())
</script>
      #>;
      
      viewHTml + script;
    }
    
    GetModelScript(type : Type) : string {
      type.GetMethod("GetModelScript", BindingFlags.Static | BindingFlags.Public).Invoke(null, array[]) :> string;        
    }
    
    GetModelTemplates(type : Type) : string {
      if(!type.IsAbstract) {
        def model = FormatterServices.GetUninitializedObject(type);
        string.Join(Environment.NewLine, 
                    type.GetMethods()
                        .Where(m => m.Name.StartsWith("__"))
                        .Select(m => CreateTemplate(GetHtml(m.Invoke(model, array[]) :> list[XElement]), m.DeclaringType.Name + m.Name)))
      } else {
        ""
      }
    }
    
    GetModelLambdas(type : Type) : string {
        type.GetMethod("GetLambdaScript", BindingFlags.Static | BindingFlags.Public).Invoke(null, array[]) :> string;        
    }
    
    CreateTemplate(html : string, name : string) : string {
        $<# 
<script type="text/html" id="$name">
  $html
</script>
        #>
    }
    
    GetHtml(xs : list[XElement]) : string {
      using(str = StringWriter())
      using(writer = XmlTextWriter(str)) {        
        writer.QuoteChar = '\'';
        xs.DescendantNodes().OfType.[XElement]().Where(n => n.IsEmpty).Iter(n => n.Value = string.Empty);
        xs.Iter(x => x.WriteTo(writer));
        HttpUtility.HtmlDecode(str.ToString());
      }
    }
  }
}
