using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module StringExtensions
  {
    public static FirstCharacterToLower(this str : string) : string 
    {
      if (String.IsNullOrEmpty(str) || Char.IsLower(str, 0))
        str
      else
        Char.ToLowerInvariant(str[0]).ToString() + str.Substring(1);
    }
  }
  
  module JsLinqExtensions
  {
    public static AsEnumerable(this seq : JsAST) : JsAST
    {
      "Enumerable".StaticCall("from", [seq])
    }
  }
  
  module JsKnownMembersLinq
  { 
    public ConvertMethod(type : TypeInfo, left : JsAST, member : IMember, parms : list[JsAST]) : JsAST
    {
      match(member.Name, parms)
      {
      | (_, _) when TypeHelper.TypeName(type) == typeof(Enumerable).FullName =>
        match (parms)
        {
        | [seq] =>
          match (member.Name)
          {
          | "AsEnumerable" => seq.AsEnumerable();
          | "Count" => JsAST.FieldRef(seq, "length", true)
          | "FirstOrDefault" => seq.AsEnumerable().MethodCall(member.Name, [JsAST.Literal(JsLiteral.Null())])
          | "All"
          | "Average"
          | "Cast"          
          | "Empty"
          | "First"
          | "Last" => seq.AsEnumerable().MethodCall(member.Name, [])          
          | "LastOrDefault" => seq.AsEnumerable().MethodCall(member.Name, [JsAST.Literal(JsLiteral.Null())])
          | "LongCount"
          | "Max"
          | "Min"
          | "OfType"
          | "Reverse"
          | "Single"
          | "SingleOrDefault"
          | "Sum"
          | "ToArray" => seq.AsEnumerable().MethodCall(member.Name, [])
          | "ToList" when TypeHelper.TypeName(type) == typeof(Enumerable).FullName => seq
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
          
        | [seq, arg1] =>
          match (member.Name)
          {
          | "FirstOrDefault" => seq.AsEnumerable().MethodCall(member.Name, [JsAST.Literal(JsLiteral.Null()), arg1])
          | "Aggregate"
          | "All"
          | "Average"
          | "Concat"
          | "Contains"
          | "Count"
          | "DefaultIfEmpty"
          | "ElementAt"
          | "ElementAtOrDefault"
          | "Except"
          | "First"
          | "GroupBy"
          | "Intersect"
          | "Last" => seq.AsEnumerable().MethodCall(member.Name, [arg1])          
          | "LastOrDefault" => seq.AsEnumerable().MethodCall(member.Name, [JsAST.Literal(JsLiteral.Null()), arg1])
          | "LongCount"
          | "Max"
          | "Min"
          | "OrderBy"
          | "Repeat"
          | "Select"
          | "SelectMany"
          | "SequenceEqual"
          | "Single"
          | "SingleOrDefault"
          | "Skip"
          | "SkipWhile"
          | "Sum"
          | "Take"
          | "TakeWhile"
          | "ThenBy"
          | "ThenByDescending"
          | "ToDictionary"          
          | "ToLookup"
          | "Union"
          | "Where" => seq.AsEnumerable().MethodCall(member.Name, [arg1])
                              
          // Exception
          | "Range" => "Enumerable".StaticCall("range", [seq, arg1])
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
          
        | [seq, arg1, arg2] =>
          match (member.Name)
          {
          | "Aggregate"
          | "Contains"
          | "Count"
          | "Except"
          | "GroupBy"
          | "Intersect"
          | "OrderBy"
          | "SelectMany"
          | "SequenceEqual"
          | "ThenBy"
          | "ThenByDescending"
          | "ToDictionary"
          | "ToLookup"
          | "Union"
          | "Zip" => seq.AsEnumerable().MethodCall(member.Name, [arg1, arg2])
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
        
        | [seq, arg1, arg2, arg3] =>
          match (member.Name)
          {
          | "Aggregate"
          | "GroupBy"
          | "ToDictionary"
          | "ToLookup" => seq.AsEnumerable().MethodCall(member.Name, [arg1, arg2, arg3])
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
        
        | [seq, arg1, arg2, arg3, arg4] =>
          match (member.Name)
          {
          | "GroupBy"
          | "GroupJoin"
          | "Join" => seq.AsEnumerable().MethodCall(member.Name, [arg1, arg2, arg3, arg4])
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
        
        | [seq, arg1, arg2, arg3, arg4, arg5] =>
          match (member.Name)
          {
          | "GroupJoin"
          | "Join" => seq.AsEnumerable().MethodCall(member.Name, [arg1, arg2, arg3, arg4, arg5])
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
        | _ => JsKnownMembersHelper.Default(type, left, member, parms)
        }
      | _ => JsKnownMembersHelper.DefaultThrow(type, left, member, parms)
      }
    }
  }
}