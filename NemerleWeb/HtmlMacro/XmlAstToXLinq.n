using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using System.Collections;
using System.Collections.Generic;
using System.Xml.Linq;
using System.Linq;
using System.Text.RegularExpressions;
using L = System.Xml.Linq;
using X = Nemerle.NemerleWeb;
using SCG = System.Collections.Generic;
using NColl = Nemerle.Collections.NCollectionsExtensions;

namespace Nemerle.NemerleWeb
{  
  class XmlAstToXLinq
  {
    _typer  : Typer;
    _parser : XmlQuotParser;
    _methodNames : list[string];
    mutable _transformCounter : int = 0;
    mutable _spliceCounter : int = 0;
    
    public this(typer : Typer, parser : XmlQuotParser)
    {
      _typer  = typer;
      _parser = parser;
      _methodNames = typer.CurrentType.GetMethods().Map(m => m.Name);
    }
          
    public ToLocation(node : PegLocated) : Location
    {
      _parser.ToLocation(node)
    }
    
    Parse(loc : Location, code : string) : PExpr
    {
      _typer.Manager.MacroColors.PushUseSiteColor();
      def pExpr = try     { MainParser.ParseExpr(_typer.Env, code, loc, false); }
                  finally { _typer.Manager.MacroColors.PopColor(); };
      pExpr
    }

    SplicablePExprName(value : X.Splicable, defaultns : string = "") : PExpr
    {
      Util.locate(ToLocation(value),
      match (value)
      {
        | Splicable.Value(value)          =>
            if(defaultns.IsEmpty())    
                <[ L.XName.Get($(value : string)) ]>
            else            
                <[ L.XNamespace.Get($(defaultns : string)).GetName($(value : string))]>
        | Splicable.Expr(expr)            => Parse(ToLocation(value), expr)
        | Splicable.ListExpr              => Message.FatalError(<#The "..$" not supportend in name context.#>);
        | Splicable.ControlExpr           => assert(false)
      })
    }
    
    SplicablePExprStr(value : X.Splicable) : PExpr
    {
      Util.locate(ToLocation(value),
      match (value)
      {
        | Splicable.Value(value)    => <[ $(value : string) ]>
        | Splicable.Expr(expr)      => Parse(ToLocation(value), expr)          
        | Splicable.ListExpr(_expr) => Message.FatalError(<#The "..$" not supportend in name context.#>);
        | Splicable.ControlExpr     => assert(false)
      })
    }
    public Transform(xmlAsts : XmlAst.Seq) : PExpr
    {
        def splicedMethod = CleanupCallRefs(GetMethodWithSplicesOnly(xmlAsts));
        def splices = TyperHelper.GetSplices(splicedMethod, _typer);
        _typer.CurrentTypeBuilder.Compile();
        Util.locate(ToLocation(xmlAsts), TransformImpl(xmlAsts, splices))
    }
    
    public TransformImpl(xmlAst : XmlAst, splices : Dictionary[int, string], loopStack = null : list[string]) : PExpr
    {        
        _transformCounter++;
        def currentSplice = _transformCounter;
        
        def loopStack = if(loopStack == null) [] else loopStack;
        def loopSubstitutions = loopStack.Rev().Select((l, i) => (l, string.Join("", NList.Repeat("$parent.", i))));
                
        def transformJsExpr(expr) {
            match(expr.Trim('\"')) {
            | x when x.StartsWith("self.") => if(loopStack.Length > 0) x.Replace("self.", "$root.") else x.Replace("self.", "") |> transformJsExpr
            | x when x.EndsWith(";") => x.Substring(0, x.Length - 1) |> transformJsExpr
            | x => match(loopSubstitutions.Find((l, _) => Regex.IsMatch(x, $"^$l"))) {
                | Some((l, s)) => Regex.Replace(x, $"^$l", s) |> transformJsExpr
                | None => x
                }
            };
        }
                
        def getSplice() {
            mutable splice;
            if(splices.TryGetValue(currentSplice, out splice))
                transformJsExpr(if(splice != null) splice else "");
            else 
                ""
        }
        
        match (xmlAst) {
        | Attr(name, Splicable.Expr(_) as value)             => 
            def name1   = SplicablePExprName(name);
            def value1  = SplicablePExprStr(value);
            
            match(name, value) {
            | (Splicable.Value(v), _) when v == "value" => <[ [L.XAttribute("data-bind", "value: " + $(getSplice()))] ]>
            | (Splicable.Value(v), _) when v == "click" => <[ [L.XAttribute("data-bind", "click: " + $(getSplice()))] ]>
            | (Splicable.Value(v), _) when v == "enable" => <[ [L.XAttribute("data-bind", "enable: " + $(getSplice()))] ]>
            | (Splicable.Value(v), _) when v == "visible" => <[ [L.XAttribute("data-bind", "visible: " + $(getSplice()))] ]>
            | (Splicable.Value(v), _) when v == "options" => <[ [L.XAttribute("data-bind", "options: " + $(getSplice()))] ]>
            | _ => <[ [L.XAttribute($name1, $value1)] ]>
            }          
        | Attr(name, value)             => 
            def nameExpr   = SplicablePExprName(name);          
            def valueExpr  = SplicablePExprStr(value);
            <[ [L.XAttribute($nameExpr, $valueExpr)] ]>
        | Text(Splicable.Value(value))  => <[ [L.XText($(value : string))] ]>
        | Text(_)  => assert(false);
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.Foreach) as c :: content) =>
            def header = Parse(ToLocation(c), expr);
            match(header) {
            | <[ $x in $xs ]> => 
                def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);                
                def tagExpr = TransformImpl(tag, splices, loopStack.Append([x.ToString() + "."]));
                def ret = <[ 
                    mutable ret;
                    foreach($x in $xs.Take(1)) {
                        ret = [[XComment(" ko foreach: " + $(getSplice()) + " ")], $tagExpr, [XComment(" /ko ")]].Flatten(c => c)
                    }
                    ret
                    ]>;
                ret
            | _ => TransformImpl(XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content), splices, loopStack);
            }
        | Tag(name, XmlAst.AttrSplice(_, SpliceType.When)   :: content) =>            
            def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);
            def tagExpr = TransformImpl(tag, splices, loopStack);
            <[ [[XComment(" ko if: " + $(getSplice()) + " ")], $tagExpr, [XComment(" /ko ")]].Flatten(c => c) ]>        
        | Tag(name, XmlAst.AttrSplice(_, SpliceType.Unless) :: content)
            => 
            def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);
            def tagExpr = TransformImpl(tag, splices, loopStack);
            <[ [[XComment(" ko ifnot: " + $(getSplice()) + " ")], $tagExpr, [XComment(" /ko ")]].Flatten(c => c) ]>        
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.Expr) as exprAst  :: content) =>            
            assert2(false);            
            def attr = Parse(ToLocation(exprAst), expr);
            def attrPexpr = match(attr) {
            | <[ Template($data, $a => $b.$templateName) ]> => <[ [Template($data, $a => $b.$templateName).SetDataName($(data.ToString() : string)).SetTemplate($(templateName.ToString() : string)) :> XAttribute] ]>
            | _ => <[]>
            }
            def nameExpr1 = SplicablePExprName(name);
            def nameExpr2 = Util.locate(ToLocation(name), <[ $nameExpr1 : L.XName ]>);            
            def cont = content.Map(x => <[ $(TransformImpl(x, splices, loopStack)) ]>);            
            def expr = <[ [L.XElement($nameExpr2, [..$cont].Append([$attrPexpr]).Flatten(c => c).Cast.[object]().CombineAttributes().ToArray())]; ]>;
            <[ $expr ]>
        | Tag(name, content)            => 
            def nameExpr1 = SplicablePExprName(name);
            def nameExpr2 = Util.locate(ToLocation(name), <[ $nameExpr1 : L.XName ]>);            
            def cont = content.Map(x => <[ $(TransformImpl(x, splices, loopStack)) ]>);            
            def expr = <[ [L.XElement($nameExpr2, [..$cont].Flatten(c => c).Cast.[object]().CombineAttributes().ToArray())]; ]>;
            <[ $expr ]>
        | TagSplice(_, false)               => <[ [L.XAttribute("data-bind", "text: " + $(getSplice()))] ]>
        | TagSplice(expr, true)             => <[ [NColl.NToArray($(Parse(ToLocation(xmlAst), expr)))] ]>
        | AttrSplice(expr, SpliceType.Expr) => <[ [$(Parse(ToLocation(xmlAst), expr)) : L.XAttribute] ]>
        | AttrSplice(expr, SpliceType.List) => <[ [NColl.NToArray.[L.XAttribute]($(Parse(ToLocation(xmlAst), expr)) : IEnumerable[L.XAttribute])]]> 
        | AttrSplice(_, SpliceType.Foreach)
        | AttrSplice(_, SpliceType.When)
        | AttrSplice(_, SpliceType.Unless)  => Message.FatalError("Control instraction must place before attributes.");
        | Seq(items) => 
            def exprs = items.Map(x => <[ $(TransformImpl(x, splices, loopStack)) ]>);
            <[ { ..$exprs } ]>
        }
    }
    
    public GetMethodWithSplicesOnly(xmlAst : XmlAst) : PExpr
    {        
        _spliceCounter++;
        def varName = "var" + _spliceCounter.ToString();
        match (xmlAst)
        {
        | Attr(_, Splicable.Expr(str) as expr) => 
            def value1  = Parse(ToLocation(expr), str);
            <[ def $(varName : dyn) = $value1 ]>
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.Foreach) as c :: content) =>
            def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);                
            def tagExpr = GetMethodWithSplicesOnly(tag);
            def header = Parse(ToLocation(c), expr);
            match(header) {
            | <[ $x in $xs ]> => <[ foreach($x in { def $(varName : dyn) = $xs; $xs }) { $tagExpr } ]>
            | _ => <[ ]>
            }
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.When)   as c :: content) with isWhen = true
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.Unless) as c :: content) with isWhen = false
            => 
            def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);
            def tagExpr = GetMethodWithSplicesOnly(tag);
            def cond1 = Parse(ToLocation(c), expr);
            def cond2 = if (isWhen) cond1 else <[ ! $cond1 ]>;
            <[ if ({ def $(varName : dyn) = $cond2; $cond2}) $tagExpr else null ]>  
        | Tag(_, content) =>             
            def splices = content.Map(c => GetMethodWithSplicesOnly(c));
            <[ { ..$splices } ]> 
        | TagSplice(expr, false)        =>
            def pexpr = Parse(ToLocation(xmlAst), expr);
            <[ def $(varName : dyn) = $pexpr ]>
        | TagSplice(expr, true)             => <[ def $(varName : dyn) = NColl.NToArray($(Parse(ToLocation(xmlAst), expr))) ]>
        | AttrSplice(expr, SpliceType.Expr) => <[ def $(varName : dyn) = $(Parse(ToLocation(xmlAst), expr)) : L.XAttribute ]>
        | AttrSplice(expr, SpliceType.List) => <[ def $(varName : dyn) = NColl.NToArray.[L.XAttribute]($(Parse(ToLocation(xmlAst), expr)) : IEnumerable[L.XAttribute]) ]>         
        | AttrSplice(_, SpliceType.Foreach)
        | AttrSplice(_, SpliceType.When)
        | AttrSplice(_, SpliceType.Unless)  => 
            Message.FatalError("Control instruction must place before attributes.");        
        | Seq(items) =>
            def exprs = items.Map(x => <[ $(GetMethodWithSplicesOnly(x)) ]>);
            <[ { ..$exprs } ]>
        | _ => <[ ]>
        }
    }
    
    CleanupCallRefs(expr : PExpr) : PExpr {
    | Sequence(items) => PExpr.Sequence(items.Map(i => CleanupCallRefs(i)).Filter(c => match(c) { 
                                                                                       | PExpr.Sequence([]) => false 
                                                                                       | _ => true 
                                                                                       }))
    | MacroCall(name, ns, parms) => PExpr.MacroCall(name, ns, parms.Map(p => 
                                                            match(p) {
                                                            | SyntaxElement.Expression(body) => SyntaxElement.Expression(CleanupCallRefs(body))                                                            
                                                            | _ => p
                                                            }))
    | Define(p, Ref(name)) when _methodNames.Any(m => m == name.Id) => PExpr.Define(p, PExpr.Literal(Literal.String("self." + name.Id)))
    | _ => expr
    }
  }
  
  public module Ext 
  {
      public CombineAttributes(this instance : IEnumerable[object]) : IEnumerable[object]
      {
          def attrs = instance.OfType.[XAttribute]()
                              .GroupBy(a => a.Name.LocalName)
                              .Map(a => XAttribute(a.Key, string.Join(",", a.Map(x => x.Value))));
          instance.Filter(x => !(x is XAttribute)).Append(attrs);
      }
  }
}
