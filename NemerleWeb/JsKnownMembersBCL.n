using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersBCL
  {
    public ConvertMethod(type : TypeInfo, left : JsAST, member : IMember, parms : list[JsAST]) : JsAST
    {
      match(member.Name, parms)
      {
        | ("ToString", h :: _) => JsAST.Call(JsAST.MethodRef(h, "toString"), [])
        | ("ToString", [])  => JsAST.Call(JsAST.MethodRef(left, "toString"), [])        
        | ("op_Implicit", h :: [])                                            => h
        | ("op_Implicit", h :: t)                                             => JsAST.Seq(h :: t)
        | ("op_Addition", parms)                                              => JsAST.Call(JsAST.OpCode("+"), parms)
        //List
        | ("get_Item", h :: []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName     => JsAST.Call(JsAST.Indexer(left), [h])
        | ("get_Count", []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName         => JsAST.FieldRef(left, "length", true)
        | ("Add",      h :: []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName     => JsAST.Call(JsAST.MethodRef(TypeHelper.PropertyToField(left, false), "push"), [h])
        | ("Remove",   h :: []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName     => JsAST.Call(JsAST.MethodRef(TypeHelper.PropertyToField(left, false), "remove"), [h])
        | ("ToList", h :: []) when TypeHelper.TypeName(type) == typeof(Enumerable).FullName    => h
        | ("GetEnumerator", []) when TypeHelper.TypeName(type) == typeof(IEnumerable).FullName
        | ("GetEnumerator", []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName => JsAST.Call(JsAST.MethodRef(left, "getEnumerator"), [])
        | ("MoveNext", []) when type.FullName == "System.Collections.Generic.Enumerator[T]" => JsAST.Call(JsAST.MethodRef(left, "moveNext"), [])
        | ("Dispose", []) when type.FullName == typeof(IDisposable).FullName => JsAST.Call(JsAST.MethodRef(left, "dispose"), [])
        | ("get_Current", []) when type.FullName == "System.Collections.Generic.Enumerator[T]" => JsAST.Call(JsAST.MethodRef(left, "current"), [])
        | ("WriteLine", h :: []) when TypeHelper.TypeName(type) == typeof(Console).FullName    => JsAST.Call(JsAST.MethodRef(JsAST.LocalRef("console"), "log"), [h])
        //
        | (".ctor", parms) when TypeHelper.TypeName(type) == typeof(list[_].Cons).FullName     => JsAST.Array(parms.Filter(p => !(p is JsAST.NotImpl()))) //filter out [] in the end
        | (".ctor", parms) when TypeHelper.TypeName(type) == typeof(List[_]).FullName          => JsAST.Array(parms.Filter(p => !(p is JsAST.NotImpl())))
        | (".ctor", lambda :: _) when type.FullName == "System.Func"                           => lambda
        | (".ctor", lambda :: _) when type.FullName == "System.Action"                         => lambda
        | (".ctor", parms) => JsAST.Call(JsAST.Constructor(type), parms)        
        | _ when member.Name.StartsWith("get_")                               =>
          def propertyName = TypeHelper.RemoveGetSet(member.Name);
          def prop = member.DeclaringType
                           .GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                           .FirstOrDefault(m => m.Name == propertyName) :> IProperty;
          if(prop != null)
            JsAST.PropertyGet(left, propertyName, JsClass.HasGetterNoSetter(prop))
          else
            JsAST.PropertyGet(left, propertyName, false)
        | (_, h :: []) when member.Name.StartsWith("set_")                    => JsAST.PropertySet(left, TypeHelper.RemoveGetSet(member.Name), h)            
        | _ => JsKnownMembersHelper.DefaultThrow(type, left, member, parms)
      }
    }    
  }
}