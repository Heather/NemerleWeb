using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersBCL
  {
    public ConvertMethod(type : TypeInfo, left : JsAST, member : IMember, parms : list[JsAST]) : JsAST
    {
      match(member.Name, parms)
      {
        | ("ToString", h :: _) => JsAST.Call(JsAST.MethodRef(h, "toString"), [])
        | ("ToString", [])  => JsAST.Call(JsAST.MethodRef(left, "toString"), [])
        | ("Concat", h :: t) when TypeHelper.TypeName(type) == typeof(string).FullName         => JsAST.Call(JsAST.MethodRef(h, "concat"), t)
        | ("ToUpper", []) when TypeHelper.TypeName(type) == typeof(string).FullName            => JsAST.Call(JsAST.MethodRef(left, "toUpperCase"), [])
        | ("Contains", [sub]) when TypeHelper.TypeName(type) == typeof(string).FullName        => JsAST.Call(JsAST.OpCode("!="), [JsAST.Call(JsAST.MethodRef(left, "indexOf"), [sub]), JsAST.Literal(JsLiteral.Integer(-1))])
        | ("IsNullOrEmpty", [str]) when TypeHelper.TypeName(type) == typeof(string).FullName
        | ("IsNullOrWhiteSpace", [str]) when TypeHelper.TypeName(type) == typeof(string).FullName   => 
          JsAST.Call(JsAST.OpCode("||"), 
                [JsAST.Call(JsAST.OpCode("==="), [str, JsAST.Literal(JsLiteral.Null())]),
                 JsAST.Call(JsAST.OpCode("==="), [str, JsAST.Literal(JsLiteral.String(""))])])
        | ("op_Implicit", h :: [])                                            => h
        | ("op_Implicit", h :: t)                                             => JsAST.Seq(h :: t)
        | ("op_Addition", parms)                                              => JsAST.Call(JsAST.OpCode("+"), parms)
        //List
        | ("get_Item", h :: []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName     => JsAST.Call(JsAST.Indexer(left), [h])
        | ("get_Count", []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName         => JsAST.FieldRef(left, "length")
        | ("Add",      h :: []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName     => JsAST.Call(JsAST.MethodRef(TypeHelper.PropertyToField(left), "push"), [h])
        | ("Remove",   h :: []) when TypeHelper.TypeName(type) == typeof(List[_]).FullName     => JsAST.Call(JsAST.MethodRef(TypeHelper.PropertyToField(left), "remove"), [h])
        | ("ToList", h :: []) when TypeHelper.TypeName(type) == typeof(Enumerable).FullName    => h        
        //
        | ("WriteLine", h :: []) when TypeHelper.TypeName(type) == typeof(Console).FullName    => JsAST.Call(JsAST.MethodRef(JsAST.LocalRef("console"), "log"), [h])
        //
        | (".ctor", parms) when TypeHelper.TypeName(type) == typeof(list[_].Cons).FullName     => JsAST.Array(parms.Filter(p => !(p is JsAST.NotImpl()))) //filter out [] in the end
        | (".ctor", parms) when TypeHelper.TypeName(type) == typeof(List[_]).FullName          => JsAST.Array(parms.Filter(p => !(p is JsAST.NotImpl())))
        | (".ctor", lambda :: _) when type.FullName == "System.Func"                           => lambda
        | (".ctor", lambda :: _) when type.FullName == "System.Action"                         => lambda
        | (".ctor", parms) => JsAST.Call(JsAST.Constructor(type), parms)
        | _ when member.Name.StartsWith("get_")                               => JsAST.PropertyGet(left, TypeHelper.RemoveGetSet(member.Name))
        | (_, h :: []) when member.Name.StartsWith("set_")                    => JsAST.PropertySet(left, TypeHelper.RemoveGetSet(member.Name), h)            
        | _ => JsKnownMembersHelper.DefaultThrow(type, left, member, parms)
      }
    }    
  }
}