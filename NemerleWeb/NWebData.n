using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using NemerleWeb;

using System;
using System.Text;
using System.IO;
using System.Reflection;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Cryptography;

namespace NemerleWeb
{
  public module NWebData
  {
    public Scripts : List[string] = List();
    public Templates : List[(string * string)] = List();   
    
    this() 
    {
      def readResource(name, assembly) {        
        using (def stream = assembly.GetManifestResourceStream(name))
        using (def reader = StreamReader(stream))       
            reader.ReadToEnd();        
      }
      def datas = AppDomain.CurrentDomain
                           .GetAssemblies()
                           .SelectMany(a => a.GetTypes()
                           .Where(t => t.Name.EndsWith("NWebDataPerAssembly")));
                           
      def staticFields = StringBuilder();
      def getFullPath(filename) 
      {
        Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Scripts", "NemerleWeb", filename)
      }
      
      foreach(dataType in datas)
      {
        def instance = Activator.CreateInstance(dataType, array[], array[]) :> NWebDataInstance;
        
        foreach((f, _) in instance.Scripts) 
        {
          Scripts.Add(f);
          def filename = Path.GetFileName(f);
          def scriptContents = readResource(filename, dataType.Assembly);
          File.WriteAllText(getFullPath(filename), scriptContents);
        }
          
        foreach((id, path) in instance.Templates) 
        {
          def filename = Path.GetFileName(path);
          def templateContents = readResource(filename, dataType.Assembly);
          Templates.Add((id, templateContents));
          File.WriteAllText(getFullPath(filename), templateContents);
        }
        
        foreach(fields in instance.Fields)
          _ = staticFields.Append(fields);
      }
      
      def staticFieldsContent = staticFields.ToString();
      def bytes = Encoding.Unicode.GetBytes(staticFieldsContent);
      using(sha = SHA1CryptoServiceProvider()) 
      {
        def hash = BitConverter.ToString(sha.ComputeHash(bytes)).Replace("-", "");
        def staticFieldsFilename = getFullPath("_N_static_fields_" + hash + " .js");
        File.WriteAllText(staticFieldsFilename, staticFieldsContent);
        Scripts.Add(staticFieldsFilename);
      }      
    }         
    
    public GetScripts() : IEnumerable[string]
    {
      Scripts.Select(filename => {
$<#
<script type="text/javascript" src="$filename"></script> #>
      });
    }
    
    public GetTemplates() : IEnumerable[string]
    {
      Templates.Select(((id, content), _) => {
$<#
<script type="text/html" id="$(id)">
$content
</script>#>
      });
    }
  }
  
  public class NWebDataInstance
  {
    public Scripts : List[(string * int)] = List();
    public Templates : List[(string * string)] = List();
    public Fields : List[string] = List();
    
    public AddScript(filename : string, ancestorCount : int) : void
    {
      Scripts.Add((filename, ancestorCount));
    }

    public AddFields(fields : string) : void
    {
      Fields.Add(fields);
    }
    
    public AddTemplate(id : string, filename : string) : void
    {
      Templates.Add((id, filename));
    }
  }
}
