using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using NemerleWeb;

using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;

namespace NemerleWeb
{
  public module NWebData
  {
    public Scripts : List[string] = List();
    public Templates : List[(string * string)] = List();   
    
    this() 
    {
      def readResource(name, assembly) {        
        using (def stream = assembly.GetManifestResourceStream(name))
        using (def reader = StreamReader(stream))       
            reader.ReadToEnd();        
      }
      def datas = AppDomain.CurrentDomain
                           .GetAssemblies()
                           .SelectMany(a => a.GetTypes()
                           .Where(t => t.Name.EndsWith("NWebDataPerAssembly")));
      
      foreach(dataType in datas)
      {
        def instance = Activator.CreateInstance(dataType, array[], array[]) :> NWebDataInstance;
                  
        foreach(f in instance.Scripts)
          Scripts.Add(f);
          
        foreach((id, filename) in instance.Templates)        
          Templates.Add((id, readResource(Path.GetFileName(filename), dataType.Assembly)));
      }
    }         
    
    public GetScripts() : IEnumerable[string]
    {
      Scripts.Select(filename => {
$<#
<script type="text/javascript" src="$filename"></script> #>
      });
    }
    
    public GetTemplates() : IEnumerable[string]
    {
      Templates.Select(((id, content), _) => {
$<#
<script type="text/html" id="$(id)">
$content
</script>#>
      });
    }
  }
  
  public class NWebDataInstance
  {
    public Scripts : List[string] = List();
    public Templates : List[(string * string)] = List();
    
    public AddScript(filename : string) : void
    {
      Scripts.Add(filename);
    }
        
    public AddTemplate(id : string, filename : string) : void
    {
      Templates.Add((id, filename));
    }
  }
}
