using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using BF = System.Reflection.BindingFlags;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.NemerleWeb 
{
  macro signal_macro(expr) 
  syntax("signal", expr)
  {
    def ctx = Macros.ImplicitCTX();
    SignalImpl.TransformSignal(expr, ctx);
  }
  
  public module SignalImpl
  {
    public TransformSignal(expr : PExpr, typer : Typer) : PExpr {
      CreateGetSignalIfNeeded(typer.CurrentTypeBuilder);
      <[]>
    }
    
    public CreateGetSignalIfNeeded(tb : TypeBuilder) : void {
      when(!tb.GetMethods().Any(m => m.Name == "GetSignal")) {
        def hubName = tb.Name + "Hub";
        tb.Define(<[ decl: GetSignal() : string {
          <#
          var #> + $(hubName : string) + <# = $.connection.#> + $(hubName : string) + <#;

          // Declare a function on the chat hub so the server can invoke it
          chat.AddMessage = function (message) {
              alert(message);
          };

          // Start the connection
          $.connection.hub.start();
          #>
        } ]>);
      }        
    }
  }
}



