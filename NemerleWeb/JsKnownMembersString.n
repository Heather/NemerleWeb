using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersString
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(string), Handler); 
    }
    
    private Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      def toString(arg : JsAst)
      {
      | JsAst.Literal(JsLiteral.String) => arg        
      | _ => arg.MethodCall("toString", [])
      }
          
      match (parms)
      {
      | [] =>
        match (member.Name)
        {
        | "get_Length" => Some(JsAst.FieldRef(left, "length", true))
        | "Clone" => Some(left)
        | "Copy"
        | "GetEnumerator"
        | "GetHashCode"
        | "GetType"
        | "GetTypeCode"
        | "Intern"
        | "IsInterned"
        | "IsNormalized" => None()
        | "IsNullOrEmpty" =>
          Some(JsAst.Call(JsAst.OpCode("||"),
              [JsAst.Call(JsAst.OpCode("==="), [left, JsAst.Literal(JsLiteral.Null())]),
                JsAst.Call(JsAst.OpCode("==="), [left, JsAst.Literal(JsLiteral.String(""))])]))
                 
        | "IsNullOrWhiteSpace"
        | "Normalize"
        | "ToCharArray" => None()
        | "ToLower" => Some(left.MethodCall("toLowerCase", []))
        | "ToLowerInvariant" => None()
        | "ToString" => Some(toString(left))
        | "ToUpper" => Some(left.MethodCall("toUpperCase", []))
        | "ToUpperInvariant"
        | "Trim"
        | "TrimEnd"
        | "TrimStart"
        | _ => None()
        }
          
      | [arg1] =>
        match (member.Name)
        {
        | "Compare"
        | "CompareOrdinal"
        | "CompareTo" => None()
        | "Concat" =>          
          match (arg1)
          {
          | JsAst.Array(Values = values) =>
            match (values)
            {
            | [] => None()
            | [v] => Some(toString(v))
            | _ => Some(toString(values.Head).MethodCall("concat", values.Tail))
            }
          | _ => Some(toString(arg1))
          }
          
        | "Contains" =>
          Some(JsAst.Call(
            JsAst.OpCode("!="),
            [
              JsAst.Call(
                JsAst.MethodRef(left, "indexOf"),
                [arg1]),
              JsAst.Literal(JsLiteral.Integer(-1))
            ]))
            
        | "EndsWith"
        | "Equals"
        | "Format"
        | "IndexOf"
        | "IndexOfAny"
        | "IsNormalized"
        | "Join"
        | "LastIndexOf"
        | "LastIndexOfAny"
        | "Normalize"
        | "PadLeft"
        | "PadRight"
        | "Remove"
        | "Split"
        | "StartsWith"
        | "Substring"
        | "ToLower"        
        | "ToUpper"
        | "Trim" => None()
        
        | "ToString" => Some(arg1.MethodCall("toString", []))
        
        | _ => None()
        }
          
      | [arg1, arg2] =>
        match (member.Name)
        {        
        | "Concat" => Some(toString(arg1).MethodCall("concat", [arg2]))
        | "Compare"
        | "EndsWith"
        | "Equals"
        | "Format"
        | "IndexOf"
        | "IndexOfAny"
        | "Insert"
        | "LastIndexOf"          
        | "LastIndexOfAny"
        | "PadLeft"
        | "PadRight"
        | "Remove"
        | "Replace"
        | "Split"
        | "StartsWith"
        | "Substring"
        | "ToCharArray"
        | _ => None()
        }
          
      | [arg1, arg2, arg3] =>
        match (member.Name)
        {
        | "Concat" => Some(toString(arg1).MethodCall("concat", [arg2, arg3]))
        | "Compare"
        | "CopyTo"
        | "Equals"
        | "Format"
        | "IndexOf"
        | "IndexOfAny"
        | "Join"
        | "LastIndexOf"
        | "LastIndexOfAny"
        | "Split"
        | "StartsWith"
        | _ => None()
        }
        
      | [arg1, arg2, arg3, arg4] =>
        match (member.Name)
        {
        | "Concat" => Some(toString(arg1).MethodCall("concat", [arg2, arg3, arg4]))
        | "Compare"
        | "CompareOrdinal"
        | "IndexOf"
        | "LastIndexOf"
        | _ => None()
        }
          
      | [_arg1, _arg2, _arg3, _arg4, _arg5] =>
        match (member.Name)
        {
        | "Compare"
        | _ => None()
        }       
      | [_arg1, _arg2, _arg3, _arg4, _arg5, _arg6] =>
        match (member.Name)
        {
        | "Compare"
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}