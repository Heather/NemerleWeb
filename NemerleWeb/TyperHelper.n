using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace NemerleWeb
{
    public module TyperHelper
    {
        static mutable _index : int = 0;
        
        public GetTypedBody(method : IMethod, typer : Typer, tb : TypeBuilder, bodyHandler : TExpr -> void, fullTyping : bool = true) : void
        {
          when (!method.Header.Name.Contains("_N_GetVariantCodeSafe"))
          {
            // NOTE: Must not use 'Body' property because it checks for FunBody.Parsed
            match(method.Header.body)
            {
            | FunBody.Typed(_typedBody) => ()
            | FunBody.Parsed(parsed) =>
              match(parsed)
              {
              | <[ {} ]>
              | <[ { base () } ]> => ()
              | _ => 
                def oldEmitDebug = typer.Manager.Options.EmitDebug;
                typer.Manager.Options.EmitDebug = false;
                def mb = method :> MethodBuilder;              
                def env = mb.Env ?? mb.DeclaringType.GlobalEnv;
              
                if (env == null)
                {
                  Message.Error($"Env is null in $mb");
                  ()
                }
                else
                {
                  def methodTyper = Typer(tb, null, mb, env);
                  
                  methodTyper.BeforeStage3 += (_, e) => {
                    def typer = e.Typer;
                    match(typer.CurrentFunction.body) {
                    | FunBody.Typed(body) =>
                      bodyHandler(body);
                    | _ => ()
                    }
                  }
                  
                  if(fullTyping)
                  {
                    try
                    {
                      methodTyper.RunFullTyping();
                    }
                    catch
                    {
                    | _ =>
                      Message.Error($"Failed typing $method, $typer, $tb");
                      throw;
                    }
                  }
                  else
                  {
                    def runTyper = methodTyper.GetType().GetMethod("RunTyper", BindingFlags.NonPublic | BindingFlags.Instance);
                    _ = runTyper.Invoke(methodTyper, array[]);
                  }                
                                    
                  typer.Manager.Options.EmitDebug = oldEmitDebug;
                }
              }
            | FunBody.Abstract => ()
            | null =>
              // External method don't have body
              def mi = method :> LibraryReference.ExternalMethodInfo;
              
              Message.Error($"External methods are not implemented: $(mi.GetName())");
            | _ =>
              Message.Error("Couldn't type body"); 
            }
          }
        }
        
        BuildMethod(expr : PExpr, typer : Typer) : MethodBuilder
        {
            def tb = typer.CurrentType;
            def methodName = $"_N__TyperHelperMethod$(_index)____";
            _index++;
            def meth = tb.DefineAndReturn(<[ decl: $(methodName : dyn)() : void { $expr } ]>) :> MethodBuilder;
            tb.Compile();
            meth
        }
    }
}
