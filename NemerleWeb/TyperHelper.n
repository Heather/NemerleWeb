using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.NemerleWeb
{
    public module TyperHelper
    {
        static mutable _index : int = 0;
        
        public GetSplices(expr : PExpr, typer : Typer) : Dictionary[int, string] {            
            def method = BuildMethod(expr, typer);
            def oldBody = method.Header.Body;
            def defs = JsASTBuilder.BuildJsASTForSplices(GetTypedBody(method, typer, typer.CurrentTypeBuilder, false));
            method.Header.body = oldBody;
            def defs2 = JsASTBuilder.BuildJsASTForSplices(GetTypedBody(method, typer, typer.CurrentTypeBuilder));
            
            defs.Append(defs2)
                .Flatten(j => 
                    match(j) {
                    | JsAST.DefValue(name, val) => 
                        regexp match(name) {
                        | <#^var(?<index : int>\d+)$#> => [(index, val.Write())]
                        | _ => []
                        }
                    })
                .GroupBy((i, _) => i)
                .ToDictionary(g => g.Key, g => g.FirstOrDefault((_, v) => !string.IsNullOrEmpty(v))[1]);
        }
        
        public GetMethodJsAST(method : MethodBuilder, typer : Typer, tb : TypeBuilder) : JsAST 
        {   
            JsASTBuilder.BuildJsAST(GetTypedBody(method, typer, tb), !(method.Header.ReturnType is FixedType.Void()) && !method.IsConstructor);            
        }
        
        GetTypedBody(method : MethodBuilder, typer : Typer, tb : TypeBuilder, fullTyping : bool = true) : TExpr {
            match(method.Header.Body) {
            | FunBody.Typed(typedBody) => typedBody
            | FunBody.Parsed => 
                def oldEmitDebug = typer.Manager.Options.EmitDebug;
                typer.Manager.Options.EmitDebug = false;
                def methodTyper = Typer(tb, null, method, method.Env);
                if(fullTyping) {
                    methodTyper.RunFullTyping();
                } else {
                    def runTyper = methodTyper.GetType().GetMethod("RunTyper", BindingFlags.NonPublic | BindingFlags.Instance);
                    _ = runTyper.Invoke(methodTyper, array[]);
                }
                typer.Manager.Options.EmitDebug = oldEmitDebug;
                GetTypedBody(method, typer, tb);
            | _ => 
                Message.Error("Couldn't type body"); 
                TExpr.Error();
            }
        }
        
        BuildMethod(expr : PExpr, typer : Typer) : MethodBuilder
        {
            def tb = typer.CurrentType;
            def methodName = "__TyperHelperMethod" + _index;
            _index++;
            def meth = tb.DefineAndReturn(<[ decl: $(methodName : dyn)() : void { $expr } ]>) :> MethodBuilder;
            tb.Compile();
            meth
        }
    }
}
