using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
    [Record]
    public class JsClass
    {
        public ClassType : TypeBuilder { get; set; }
        public Indent : string    { get; set; }
        public IEnumerableType : TypeVar { get; set; }
        public StringType : TypeVar { get; set; }
        public Typer : Typer { get; set; }
        
        private HasGetterNoSetter(p : IProperty) : bool
        {
          p.GetGetter() != null && p.GetSetter() == null
        }
        
        public Properties : IEnumerable[IProperty] 
        {
          get
          {
            ClassType.GetProperties()
                     .Where(p => p.Name != "server")
                     .Where(p => !HasGetterNoSetter(p))
          }
        }
        
        public ComputedProperties : IEnumerable[IProperty] 
        {
          get
          {
            ClassType.GetProperties()
                     .Where(p => p.Name != "server")
                     .Where(p => HasGetterNoSetter(p));
          }
        }
        
        public Methods : IEnumerable[IMethod] 
        {
          get
          {            
            def methods = ClassType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            FilterMethods(methods);
          }
        }
        
        
        IsViewmodel : bool { get { !ClassType.Name.StartsWith("_N_") } }
        
        public Constructor : IMethod { 
            get {
                def constructors = ClassType.GetConstructors(BindingFlags.Public | BindingFlags.Instance);
                when(constructors.Length > 1)
                      Message.Error(ClassType.Location, "Multiple constructors are not supported");  
                constructors.FirstOrDefault()
            }
        }
        
        public Write() : string 
        {
            def bodyIndent = Indent + "  ";
            def constructorParams = GetConstructorParams();
            def properties = GetProperties(bodyIndent);
            def computedProperties = GetComputedProperties(bodyIndent);
            def fields = GetFields(bodyIndent);         
            def constructorBody = GetConstructorBody(bodyIndent);
            def staticConstructorBody = GetStaticConstructorBody(Indent);
            def methods = GetMethods(bodyIndent);                        
            def innerClasses = GetNestedClasses();
            
            def returning = match(ClassType.BaseType.Name) {
                | "Function" => bodyIndent + "return this.apply;"
                | "FunctionVoid" => bodyIndent + "return this.apply_void;"
                | _ => ""
            }
            
$<#
$innerClasses
$(Indent)function $(GetProperName(ClassType))(..$constructorParams) {
$(bodyIndent)var self = this;
$properties
$fields
$methods
$constructorBody
$computedProperties
{{{SignalR}}}
$returning
$(Indent)}
$staticConstructorBody#>
        }
        
        GetConstructorParams() : list[string] 
        { 
            def ctor = Constructor;
            if(ctor != null) ctor.GetParameters().Map(p => p.Name) else [];            
        }
        
        GetProperties(indent : string) : string 
        {                                                   
            def propVal(prop : IProperty)
            {
              def isArray = TypeIsArray(prop.GetGetter().ReturnType);
              match((IsViewmodel, isArray))
              {
              | (true, true) => "ko.observableArray([])"
              | (true, false) => "ko.observable(null)"
              | (false, true) => "[]";   
              | (false, false) => "{}";
              }
            }
            def propStrings = Properties.Select(p => indent + $<#this.$(p.Name) = $(propVal(p))#>);
            $<#..$(propStrings; ";\n")#>;
        }
        
        GetComputedProperties(indent : string) : string 
        {                              
            def propVal(prop : IProperty)
            {
                def computedBody = TranslateMethodBody(prop.GetGetter(), indent);
$<#ko.computed(function() {
$computedBody
})#>
            }
            def propStrings = ComputedProperties.Select(p => indent + $<#this.$(p.Name) = $(propVal(p))#>);
            $<#..$(propStrings; ";\n")#>;
        }
        
        GetFields(indent : string) : string 
        {
            def fields = ClassType.GetFields().Where(f => !f.IsStatic && f.Name != "server" && !f.Name.StartsWith("_N_") && f.Name != "__constructorParams");
            def fldVal(fld : IField) {
                if(TypeIsArray(fld.GetMemType())) "[]" else "{}";
            }
            def fieldStrings = fields.Select(f => indent + $<#this.$(f.Name) = $(fldVal(f))#>);
            $<#..$(fieldStrings; ";\n")#>;
        }
        
        GetStaticFields(indent : string) : string 
        {
            def fields = ClassType.GetFields().Where(f => f.IsStatic);
            def fldVal(_fld : IField) {
                "{}";                    
            }
            def fieldStrings = fields.Select(f => indent + $<#$(ClassType.Name).$(f.Name) = $(fldVal(f))#>);
            $<#..$(fieldStrings; ";\n")#>;
        }
        
        GetConstructorBody(indent : string) : string
        {
            //assert2(false);
            def ctor = Constructor;
            if(ctor != null) {
                def ctorBody = TranslateMethodBody(ctor, indent);
                def endIndex = ctorBody.IndexOf("js constructor end");
                if(endIndex != -1) ctorBody.Substring(0, endIndex - 1) else ctorBody
            }
            else
                ""
        }
        
        GetStaticConstructorBody(indent : string) : string 
        {
            def ctors = ClassType.GetConstructors(BindingFlags.Static | BindingFlags.NonPublic);            
            def ctor = ctors.FirstOrDefault();
            if(ctor != null)
                TranslateMethodBody(ctor,indent);
            else
                ""
        }
        
        GetMethods(indent : string) : string 
        {
            def methodParms(method) {
                method.GetParameters().Select(p => p.Name);
            }
            def methods = Methods.Select(m => 
$<#$(indent)this.$(m.Name) = function(..$(methodParms(m))) { 
$(TranslateMethodBody(m, indent + "  "))
$(indent)}#>);

            $<#..$(methods; "\n")#>
        }
        
        GetNestedClasses() : string 
        {            
            def nested = ClassType.DeclaredNestedTypes
                                  .Where(c => c.Name != "Server" && c.Name != "ServerProxy") //Not server
                                  .Where(c => !c.Name.StartsWith("_N__N_")) //Not generated class
                                  .Select(c => JsClass(c, Indent, IEnumerableType, StringType, Typer).Write());
            $"..$(nested; Environment.NewLine)"
        }
        
        ApplyAttributesToGeneratedClasses() : void
        {
            ClassType.DeclaredNestedTypes
                     .Where(t => t.Name.StartsWith("_N__N_"))
                     .Iter(t => t.Ast.AddCustomAttribute(<[ NemerleWeb.GeneratedClass ]>));
        }
        
        TypeIsArray(type : TypeVar) : bool 
        {
          type.TryRequire(IEnumerableType) && !type.TryRequire(StringType);
          //type.IsDerivedFrom(IEnumerableType.TypeInfo) && type.FullName != "System.String";
        }
                
        public TranslateMethodBody(meth : IMethod, indent = "" : string) : string
        {           
            def ast = TyperHelper.GetMethodJsAST(meth, Typer, ClassType);
            ast.Write(indent);
        }
        
        public static GetProperName(type : TypeInfo) : string {
            type.FullName.Replace(".", "_")
        }
        
        public static FilterMethods(methods : IEnumerable[IMethod]) : IEnumerable[IMethod]
        {
          def viewModelMethods = typeof(IViewModel).GetMethods().Select(m => m.Name).ToList();
          methods.Where(m => !m.Name.StartsWith("get_") && !m.Name.StartsWith("set_"))
                 .Where(m => !m.IsConstructor)
                 .Where(m => !viewModelMethods.Any(vm => vm == m.Name))
                 .Where(m => m.Name != "View")
                 .Where(m => !m.Name.StartsWith("__"))
        }
    }
}
