using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersBCLString
  { 
    public ConvertMethod(type : TypeInfo, left : JsAST, member : IMember, parms : list[JsAST]) : JsAST
    {
      match(member.Name, parms)
      {
      | ("Concat", JsAST.Array(h :: t) :: _) when TypeHelper.TypeName(type) == typeof(string).FullName => JsAST.Call(JsAST.MethodRef(h, "concat"), t)	
      | ("Concat", h :: t) when TypeHelper.TypeName(type) == typeof(string).FullName         => JsAST.Call(JsAST.MethodRef(h, "concat"), t)
      | (_, _) when TypeHelper.TypeName(type) == typeof(String).FullName =>
        match (parms)
        {
        | [] =>
          match (member.Name)
          {
          | "get_Length" => JsAST.FieldRef(left, "length", true)
          | "Clone" => left
          | "Copy"
          | "GetEnumerator"
          | "GetHashCode"
          | "GetType"
          | "GetTypeCode"
          | "Intern"
          | "IsInterned"
          | "IsNormalized" => JsKnownMembersHelper.Default(type, left, member, parms)
          | "IsNullOrEmpty" =>
            JsAST.Call(JsAST.OpCode("||"),
                [JsAST.Call(JsAST.OpCode("==="), [left, JsAST.Literal(JsLiteral.Null())]),
                 JsAST.Call(JsAST.OpCode("==="), [left, JsAST.Literal(JsLiteral.String(""))])])
                 
          | "IsNullOrWhiteSpace"
          | "Normalize"
          | "ToCharArray" => JsKnownMembersHelper.Default(type, left, member, parms)
          | "ToLower" => left.MethodCall("toLowerCase", [])
          | "ToLowerInvariant"
          | "ToString" => JsKnownMembersHelper.Default(type, left, member, parms)
          | "ToUpper" => left.MethodCall("toUpperCase", [])
          | "ToUpperInvariant"
          | "Trim"
          | "TrimEnd"
          | "TrimStart"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
          
        | [arg1] =>
          match (member.Name)
          {
          | "Compare"
          | "CompareOrdinal"
          | "CompareTo" => JsKnownMembersHelper.Default(type, left, member, parms)
          | "Concat" =>
            match (arg1)
            {
            | JsAST.Array(a) => left.MethodCall("concat", a)
            |  _ => left.MethodCall("concat", [arg1])
            }
          
          | "Contains" =>
            JsAST.Call(JsAST.OpCode("!="), [JsAST.Call(JsAST.MethodRef(left, "indexOf"), [arg1]), JsAST.Literal(JsLiteral.Integer(-1))])
            
          | "EndsWith"
          | "Equals"
          | "Format"
          | "IndexOf"
          | "IndexOfAny"
          | "IsNormalized"
          | "Join"
          | "LastIndexOf"
          | "LastIndexOfAny"
          | "Normalize"
          | "PadLeft"
          | "PadRight"
          | "Remove"
          | "Split"
          | "StartsWith"
          | "Substring"
          | "ToLower"
          | "ToString"
          | "ToUpper"
          | "Trim"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
          
        | [arg1, arg2] =>
          match (member.Name)
          {
          | "Compare"
          | "Concat"
          | "EndsWith"
          | "Equals"
          | "Format"
          | "IndexOf"
          | "IndexOfAny"
          | "Insert"
          | "LastIndexOf"          
          | "LastIndexOfAny"
          | "PadLeft"
          | "PadRight"
          | "Remove"
          | "Replace"
          | "Split"
          | "StartsWith"
          | "Substring"
          | "ToCharArray"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
          
        | [arg1, arg2, arg3] =>
          match (member.Name)
          {
          | "Compare"
          | "Concat"
          | "CopyTo"
          | "Equals"
          | "Format"
          | "IndexOf"
          | "IndexOfAny"
          | "Join"
          | "LastIndexOf"
          | "LastIndexOfAny"
          | "Split"
          | "StartsWith"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
        
        | [arg1, arg2, arg3, arg4] =>
          match (member.Name)
          {
          | "Compare"
          | "CompareOrdinal"
          | "IndexOf"
          | "LastIndexOf"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
          
        | [arg1, arg2, arg3, arg4, arg5] =>
          match (member.Name)
          {
          | "Compare"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }       
        | [arg1, arg2, arg3, arg4, arg5, arg6] =>
          match (member.Name)
          {
          | "Compare"
          | _ => JsKnownMembersHelper.Default(type, left, member, parms)
          }
        | _ => JsKnownMembersHelper.Default(type, left, member, parms)
        }
      | _ => JsKnownMembersHelper.DefaultThrow(type, left, member, parms)
      }
    }
  }
}