using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  internal module TypeHelper
  {   
    public PropertyToField([NotNull] prop : JsAST, isObservable : bool) : JsAST
    {   
      match(prop)
      {
      | PropertyGet(obj, name, false) => JsAST.FieldRef(obj, name, !isObservable)
      | _ => prop
      }
    }
  }

  internal module StringExtensions
  {
    public static FirstCharacterToLower([NotNull] this str : string) : string 
    {
      if (str.Length == 0 || Char.IsLower(str, 0))
        str
      else
        Char.ToLowerInvariant(str[0]).ToString() + str.Substring(1);
    }
  }
  
  // Mini lifting
  internal module JsAstExtensions
  {
    public static MethodCall(this self : JsAST, [NotNull] method : string, [NotNull] parms : list[JsAST]) : JsAST
    {
      JsAST.Call(JsAST.MethodRef(self, method.FirstCharacterToLower()), parms)
    }
    
    public static StaticCall(this type : string, [NotNull] method : string, [NotNull] parms : list[JsAST]) : JsAST
    {
      JsAST.Call(JsAST.StaticRef(type, method.FirstCharacterToLower()), parms)
    }
  }
  
  module JsKnownMembers
  {
    static this()
    {
      JsKnownMembersBase.Register(); 
      JsKnownMembersOperators.Register(); 
      JsKnownMembersDelegate.Register();
      JsKnownMembersObject.Register();
      JsKnownMembersString.Register();
      JsKnownMembersIDisposable.Register();
      JsKnownMembersConsole.Register();
      JsKnownMembersConvert.Register();
      
      JsKnownMembersSCGList.Register();
      JsKnownMembersIEnumerable.Register();
      JsKnownMembersEnumerator.Register();
      
      JsKnownMembersLinqEnumerable.Register();
      
      JsKnownMembersNemerleList.Register();
      JsKnownMembersNemerleNCollectionsExtensions.Register();
    }
    
    public Convert([NotNull] call : TExpr.Call, [NotNull] builder : TExpr -> JsAST) : JsAST
    {
      match (call)
      {
        | Call(MethodRef(obj = Call(MethodRef(meth = serverMeth, obj = obj), _, _), meth = meth), parms, _)
          when serverMeth.Name == "get_server" && obj is TExpr.This =>
            def parameters =
              if (parms.Length > 0) parms.Zip(meth.GetParameters()).Take(parms.Length - 1).Map((cp, mp) => (mp.name, builder(cp.expr)))
              else [];
            def callback = if(parms.Length > 0) builder(parms.Last().expr) else JsAST.Void();
            match(callback)
            {
              | Seq(DefValue as dv :: cb :: []) => JsAST.Seq([dv, JsAST.ServerCall(meth.Name, serverMeth.DeclaringType.Name, parameters, cb)])
              | _ => JsAST.ServerCall(meth.Name, serverMeth.DeclaringType.Name, parameters, callback)
            }
        | Call(MethodRef(_, meth, _, _), [modelParm, viewParm], _) when meth.Name == "GetTemplateName" =>             
          match(modelParm, viewParm)
          {
          | (Parm(expr = TExpr.Literal(Literal.String(model))), Parm(expr = TExpr.Literal(Literal.String(view)))) =>
            JsAST.Code($"nweb.utils.getTemplateName(this.$model, '$view')")
          | _ => Message.FatalError("Invalid GetTemplateName call, use 'name' macro")
          }
        | Call(MethodRef(obj = o, meth = meth), parms, _) =>
          ConvertMethod(o.Type.TypeInfo, builder(o), meth, parms.Map(p => builder(p.expr)))
        | Call(StaticRef(from = fromType, mem = meth) as left, parms, _) =>
            ConvertMethod(fromType.TypeInfo, builder(left), meth, parms.Map(p => builder(p.expr)))
                
        | Call(OpCode as op, parms, _) => JsAST.Call(builder(op), parms.Map(p => builder(p.expr)))
        | Call(Base, _, _) => JsAST.Void()        
        | Call(s, _, _) => Message.Warning($"Unsupported call to $s"); JsAST.Void()          
      }
    }
    
    #region ConvertMethod
    
    internal type ConvertTypeHandler = JsAST * IMember * list[JsAST] -> option[JsAST];
    
    // typeof().FullName -> Handler
    private static _convertTypeHandlers : Dictionary[string, ConvertTypeHandler] = Dictionary();
    
    internal type ConvertMemberHandler = TypeInfo * JsAST * list[JsAST] -> option[JsAST];
    
    // memberName -> Handler
    private static _convertMemberHandlers : Dictionary[string, ConvertMemberHandler] = Dictionary();
    
    // Default memberName -> Handler
    private static _convertDefaultMemberHandlers : Dictionary[string, ConvertMemberHandler] = Dictionary();

    /// <summary>
    /// Convert method.
    /// Note: type can be null.
    /// </summary>
    public ConvertMethod(type : TypeInfo, [NotNull] left : JsAST, [NotNull] member : IMember, [NotNull] parms : list[JsAST]) : JsAST
    {
      // First try convert member by name
      def memberName = member.Name;
      mutable memberHandler;
      when (_convertMemberHandlers.TryGetValue(memberName, out memberHandler))
        when (memberHandler(type, left, parms) is Some(ast))
          return ast;
      
      // If no member handler found, try method handler
      def typeName = TypeName(type);
      mutable typeHandler;
      when (_convertTypeHandlers.TryGetValue(typeName, out typeHandler))
        when (typeHandler(left, member, parms) is Some(ast))
          return ast;
          
      // Try using just FullName if SystemType
      when (type != null && type.SystemType != null)
        when (_convertTypeHandlers.TryGetValue(type.FullName, out typeHandler))
          when (typeHandler(left, member, parms) is Some(ast))
            return ast;
          
      // Nothing found, try default dictionary
      when (_convertDefaultMemberHandlers.TryGetValue(memberName, out memberHandler))
        when (memberHandler(type, left, parms) is Some(ast))
          return ast;
      
      // Process low level naming
      DefaultConvertMethod(type, left, member, parms)
    }
    
    private DefaultConvertMethod(type : TypeInfo, left : JsAST, member : IMember, parms : list[JsAST]) : JsAST
    {     
      def propertyName = RemoveGetSet(member.Name);
      
      match (parms)
      {
      | _ when member.Name.StartsWith("get_") =>
        def prop = member.DeclaringType
                          .GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                          .FirstOrDefault(m => m.Name == propertyName) :> IProperty;
        if(prop != null)
          JsAST.PropertyGet(left, propertyName, JsClass.HasGetterNoSetter(prop))
        else
          JsAST.PropertyGet(left, propertyName, false)        
      | [h] when member.Name.StartsWith("set_") =>
        JsAST.PropertySet(left, propertyName, h)
      | _ => 
        // TODO: Change to Error
        Message.Warning(
          member.Location,
          $"Invalid $(member.Name) with $(TypeName(type)) type, params: ..$parms not implemented in JS");
          
        left.MethodCall(propertyName, parms)
      }
    }
    
    public RegisterType([NotNull] type : Type, [NotNull] handler : ConvertTypeHandler) : void
    {
      _convertTypeHandlers.Add(type.FullName, handler);
    }
    
    public RegisterType([NotNull] type : string, [NotNull] handler : ConvertTypeHandler) : void
    {
      _convertTypeHandlers.Add(type, handler);
    }
    
    public RegisterMember([NotNull] memberName : string, [NotNull] handler : ConvertMemberHandler) : void
    {
      _convertMemberHandlers.Add(memberName, handler);
    }
    
    public RegisterDefaultMember([NotNull] memberName : string, [NotNull] handler : ConvertMemberHandler) : void
    {
      _convertDefaultMemberHandlers.Add(memberName, handler);
    }
    
    #endregion
      
    public ConvertField([NotNull] obj : TExpr, [NotNull] field : IField, [NotNull] builder : TExpr -> JsAST) : JsAST
    {
      match(field)
      {
      //| _ when field.Name == "hd" && field.DeclaringType.FullName == "Nemerle.Core.Cons[T]" => JsAST.Call(JsAST.Indexer(builder(obj)), [JsAST.Literal(JsLiteral.Integer(0))])
      //| _ when field.Name == "tl" && field.DeclaringType.FullName == "Nemerle.Core.Cons[T]" => JsAST.Call(JsAST.MethodRef(builder(obj), "splice"), [JsAST.Literal(JsLiteral.Integer(1))])        
      | _ => JsAST.FieldRef(builder(obj), field.Name, false) 
      }
    }
    
    #region Helper methods
    
    [Memoize]
    private InternalTypeName(type : TypeInfo) : string
    {
      if (type.SystemType != null) type.SystemType.FullName else type.FrameworkTypeName;
    }
    
    private TypeName(type : TypeInfo) : string
    {
      if (type != null) InternalTypeName(type) else "";
    }
                  
    private RemoveGetSet([NotNull] methodName : string) : string
    {
      if (IsGetSet(methodName)) methodName.Substring(4) else methodName
    }
      
    private IsGetSet(methodName : string) : bool
    {
      methodName.StartsWith("get_") || methodName.StartsWith("set_")
    }
    
    #endregion
  }
}
