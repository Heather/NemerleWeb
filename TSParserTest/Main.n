using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using TSParser;

module Program
{
  parseText(text : string) : bool
  {
    def parser = TSDeclarationParser();
    def (pos, _ret) = parser.TryParse(text);
    if(pos == text.Length) true
    else
    {
      def errorText =
        if(pos + 55 > text.Length)
          text.Substring(pos)
        else
          text.Substring(pos, 55);
      WriteLine(errorText);
      false
    }
  }
  parseTextWithResult(text : string) : void
  {
    if(parseText(text))
      WriteLine("SUCCESS");
    else
      WriteLine("FAILURE");
  }
  parseFile(path : string) : void
  {
    if(parseText(File.ReadAllText(path)))
      ()//WriteLine($"$path - SUCCESS");
    else
      WriteLine($"$path - FAILURE");
  }
    
  
  Main() : void
  {
    parseTextWithResult(<#
    #>);

    def parse(dir)
    {
      try
      {
        foreach(f in Directory.EnumerateFiles($@"..\..\..\NemerleWeb.TypedJS\$dir\", "*.*", SearchOption.AllDirectories))
          parseFile(f);
          ();
      }
      catch
      {
      | _ => ()
      }
    }
    
    parse("ScriptsLib");
    parse("Scripts");
    
    WriteLine("Press any key to continue");
    _ = ReadKey();
  }
}