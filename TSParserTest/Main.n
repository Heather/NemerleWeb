using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using TSParser;

module Program
{
  parseText(text : string) : bool
  {
    def parser = TSDeclarationParser();
    def (pos, ret) = parser.TryParse(text);
    if(pos == text.Length) true
    else
    {
      WriteLine(text.Substring(pos, 50));
      false
    }
  }
  parseTextWithResult(text : string) : void
  {
    if(parseText(text))
      WriteLine("SUCCESS");
    else
      WriteLine("FAILURE");
  }
  parseFile(path : string) : void
  {
    if(parseText(File.ReadAllText(path)))
      ()//WriteLine($"$path - SUCCESS");
    else
      WriteLine($"$path - FAILURE");
  }
    
  
  Main() : void
  {
    parseTextWithResult(<#
    /// <reference path="XXXX" />
    declare class P extends QQ < P > {
    };
    declare enum Q { Z,X};
    
interface A extends B<C> {
};

declare var P : {
  q : number;
};
declare var PP : boolean;

declare module QZ { 
  
   /* */
   var O : number;
 
 }
 
 ;

    #>);
    
    foreach(f in Directory.EnumerateFiles(@"..\..\..\NemerleWeb.TypedJS\Scripts\", "*.*", SearchOption.AllDirectories))
      //parseFile(f);
      ();
    
    WriteLine("Press any key to continue");
    _ = ReadKey();
  }
}