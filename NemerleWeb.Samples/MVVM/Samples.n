using System.Collections.Generic;
using System.Linq;
using System.Text;
using Nemerle;
using NemerleWeb;

namespace NemerleWeb.Samples
{
  [JsModel, Record]  
  class Sample
  {
    public Name : string { get; set; }
    public SourceFiles : list[string] { get; set; }
    public Source : string { get; set; }
    public Instance : ViewModel { get; set; }
    public TemplateName : string { get; set; }
  }
  
  [ViewModel]
  class SamplesViewModel
  {      
    SelectedSample : Sample { get; set; }
    
    Samples : List[Sample] { get; set; }
    KnockoutSamples : List[Sample] { get; set; }
    
    NameList : NameListViewModel { get; set; }
    NameListCSharp : NameListCSharpViewModel { get; set; }
    CompList : CompListViewModel { get; set; }
    Signal : SignalViewModel { get; set; }
    Variants : VariantsAndMatchingViewModel { get; set; }    
    Introduction : IntroductionViewModel { get; set; }
    ListsAndCollections : ListsAndCollectionsViewModel { get; set; }
    LoadingAndSaving : LoadingAndSavingViewModel { get; set; }
    SinglePageApps : SPAViewModel { get; set; }
    
    Sources : List[string * string] { get; set; }
    ThisPageSource : string { get; set; }
        
    public this()
    {
      NameList = NameListViewModel();
      NameListCSharp = NameListCSharpViewModel();
      CompList = CompListViewModel();
      Signal = SignalViewModel();
      Variants = VariantsAndMatchingViewModel();
      Introduction = IntroductionViewModel("John", "Silver");
      ListsAndCollections = ListsAndCollectionsViewModel();
      LoadingAndSaving = LoadingAndSavingViewModel();
      SinglePageApps = SPAViewModel();
            
      Samples = 
      [
        Sample("List of names", ["MVVM/NameListViewModel.n"], "", NameList, tname template(_.NameList)),  // in tname template(_.NameList) second parameter is View by default
        Sample("List of names C#", ["MVVM/NameListCSharpViewModel.cs", "MVVM/NameListCSharpViewModel.View.n"], "", NameListCSharp, tname template(_.NameListCSharp)), 
        Sample("Computation Expressions", ["MVVM/CompListViewModel.n"], "", CompList, tname template(_.CompList, _.View)), 
        Sample("Chat using SignalR", ["MVVM/SignalViewModel.n"], "", Signal, tname template(_.Signal, _.View)), 
        Sample("Variants and Pattern Matching", ["MVVM/VariantsAndMatchingViewModel.n"], "", Variants, tname template(_.Variants, _.View))
      ].ToList();
      
      KnockoutSamples =
      [
        Sample("Introduction", ["MVVM/Knockout/Tutorial_1_Introduction.n"], "", Introduction, tname template(_.Introduction)), 
        Sample("Lists and collections", ["MVVM/Knockout/Tutorial_2_ListsAndCollections.n"], "", ListsAndCollections, tname template(_.ListsAndCollections)), 
        Sample ("Single page applications", ["MVVM/Knockout/Tutorial_3_SinglePageApps.n"], "", SinglePageApps, tname template(_.SinglePageApps)), 
        Sample("Loading and saving", ["MVVM/Knockout/Tutorial_5_LoadingAndSaving.n"], "", SinglePageApps, tname template(_.SinglePageApps))
      ].ToList();
                 
      SelectedSample = Samples[2];
                         
      foreach(sample in Samples)
      {
        server.LoadSourceForList(sample.SourceFiles, source =>
        {
          sample.Source = source;
          js prettyPrint();
        });        
      }
            
      server.LoadSourceFor("MVVM/Samples.n", source =>
      {
        ThisPageSource = source;
        js prettyPrint();
      });
    }
    
    SelectSample(sample : Sample) : void 
    {
      def sample = Samples.Concat(KnockoutSamples).FirstOrDefault(s => s.Name == sample.Name);
      SelectedSample = sample;
    }
    
    public class Server
    {
      public LoadSourceFor(sample : string) : string
      {
        Helpers.LoadSourceFor(sample);
      }
      
      public LoadSourceForList(samples : IEnumerable[string]) : string
      {
        $<#..$(samples; "\n"; Helpers.LoadSourceFor)#>
      }
    }
    
    [Html]
    public View() : string
    {
      <# 
        <div class="container">
          <ul class="samples-menu">
            <li class="header">Samples</li>
            <li $foreach(s in Samples) css-selected="$(SelectedSample.Name == s.Name)"><span click="$SelectSample">$(s.Name)</span></li>
            <li class="split"></li>
            <li class="header">KnockoutJs tutorials</li>
            <li $foreach(s in KnockoutSamples) css-selected="$(SelectedSample.Name == s.Name)"><span click="$SelectSample">$(s.Name)</span></li>
          </ul>          
          <div $foreach(s in Samples.Concat(KnockoutSamples)) class="current-sample">
            <div $when(SelectedSample.Name == s.Name)>
              <div template="$(template(s.Instance, s.TemplateName))"></div>
              <h2>Source</h2>
              <pre class="prettyprint lang-n prettyprinted"></pre>
            </div>
          </div>
          <h2>Main page source</h2>
          <pre class="prettyprint lang-n prettyprinted">$ThisPageSource</pre>
        </div>
      #>
    }    
  }
}
